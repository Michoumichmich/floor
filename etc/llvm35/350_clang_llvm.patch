diff --git a/include/llvm/CodeGen/AsmPrinter.h b/include/llvm/CodeGen/AsmPrinter.h
index de14c1a..80fc6bc 100644
--- a/include/llvm/CodeGen/AsmPrinter.h
+++ b/include/llvm/CodeGen/AsmPrinter.h
@@ -232,7 +232,7 @@ public:
   /// requested, it will override the alignment request if required for
   /// correctness.
   ///
-  void EmitAlignment(unsigned NumBits, const GlobalObject *GO = nullptr) const;
+  virtual void EmitAlignment(unsigned NumBits, const GlobalObject *GO = nullptr) const;
 
   /// This method prints the label for the specified MachineBasicBlock, an
   /// alignment (if present) and a comment describing it if appropriate.
@@ -500,7 +500,7 @@ private:
   void EmitVisibility(MCSymbol *Sym, unsigned Visibility,
                       bool IsDefinition = true) const;
 
-  void EmitLinkage(const GlobalValue *GV, MCSymbol *GVSym) const;
+  virtual void EmitLinkage(const GlobalValue *GV, MCSymbol *GVSym) const;
 
   void EmitJumpTableEntry(const MachineJumpTableInfo *MJTI,
                           const MachineBasicBlock *MBB, unsigned uid) const;
diff --git a/include/llvm/InitializePasses.h b/include/llvm/InitializePasses.h
index 02f4259..744e850 100644
--- a/include/llvm/InitializePasses.h
+++ b/include/llvm/InitializePasses.h
@@ -64,6 +64,11 @@ void initializeTarget(PassRegistry&);
 
 void initializeAAEvalPass(PassRegistry&);
 void initializeAddDiscriminatorsPass(PassRegistry&);
+void initializeAddressSpaceFixPass(PassRegistry&);
+void initializeCUDAFirstPass(PassRegistry&);
+void initializeCUDAFinalPass(PassRegistry&);
+void initializeMetalFinalPass(PassRegistry&);
+void initializeSPIRFinalPass(PassRegistry&);
 void initializeADCEPass(PassRegistry&);
 void initializeAliasAnalysisAnalysisGroup(PassRegistry&);
 void initializeAliasAnalysisCounterPass(PassRegistry&);
diff --git a/include/llvm/LinkAllPasses.h b/include/llvm/LinkAllPasses.h
index e06560c..ccab99a 100644
--- a/include/llvm/LinkAllPasses.h
+++ b/include/llvm/LinkAllPasses.h
@@ -48,6 +48,11 @@ namespace {
         return;
 
       (void) llvm::createAAEvalPass();
+      (void) llvm::createAddressSpaceFixPass();
+      (void) llvm::createCUDAFirstPass();
+      (void) llvm::createCUDAFinalPass();
+      (void) llvm::createMetalFinalPass();
+      (void) llvm::createSPIRFinalPass();
       (void) llvm::createAggressiveDCEPass();
       (void) llvm::createAliasAnalysisCounterPass();
       (void) llvm::createAliasDebugger();
diff --git a/include/llvm/Transforms/IPO.h b/include/llvm/Transforms/IPO.h
index ce1a7d6..8042a55 100644
--- a/include/llvm/Transforms/IPO.h
+++ b/include/llvm/Transforms/IPO.h
@@ -177,6 +177,7 @@ ModulePass *createStripDeadPrototypesPass();
 /// and marks them with the nocapture attribute.
 ///
 Pass *createFunctionAttrsPass();
+extern char &FunctionAttrsID;
 
 //===----------------------------------------------------------------------===//
 /// createMergeFunctionsPass - This pass discovers identical functions and
diff --git a/include/llvm/Transforms/IPO/PassManagerBuilder.h b/include/llvm/Transforms/IPO/PassManagerBuilder.h
index 50877d0..0e9dd02 100644
--- a/include/llvm/Transforms/IPO/PassManagerBuilder.h
+++ b/include/llvm/Transforms/IPO/PassManagerBuilder.h
@@ -118,6 +118,10 @@ public:
   bool LoopVectorize;
   bool RerollLoops;
   bool LoadCombine;
+  bool EnableAddressSpaceFix;
+  bool EnableCUDAPasses;
+  bool EnableMetalPasses;
+  bool EnableSPIRPasses;
 
 private:
   /// ExtensionList - This is list of all of the extensions that are registered.
diff --git a/include/llvm/Transforms/Scalar.h b/include/llvm/Transforms/Scalar.h
index 413134e..ea0d968 100644
--- a/include/llvm/Transforms/Scalar.h
+++ b/include/llvm/Transforms/Scalar.h
@@ -30,6 +30,37 @@ class TargetMachine;
 
 //===----------------------------------------------------------------------===//
 //
+// AddressSpaceFix - This pass fixes (intentionally) broken uses of addrspace
+// pointers that should be non-addrspace pointers.
+//
+FunctionPass *createAddressSpaceFixPass();
+
+//===----------------------------------------------------------------------===//
+//
+// CUDAFirst - first pass, making CUDA related IR changes.
+//
+FunctionPass *createCUDAFirstPass();
+
+//===----------------------------------------------------------------------===//
+//
+// CUDAFinal - final pass, making CUDA related IR changes.
+//
+FunctionPass *createCUDAFinalPass();
+
+//===----------------------------------------------------------------------===//
+//
+// MetalFinal - This pass fixes Metal/AIR issues.
+//
+FunctionPass *createMetalFinalPass();
+
+//===----------------------------------------------------------------------===//
+//
+// SPIRFinal - This pass fixes LLVM IR to be SPIR-compliant.
+//
+FunctionPass *createSPIRFinalPass();
+
+//===----------------------------------------------------------------------===//
+//
 // ConstantPropagation - A worklist driven constant propagation pass
 //
 FunctionPass *createConstantPropagationPass();
diff --git a/lib/AsmParser/LLParser.cpp b/lib/AsmParser/LLParser.cpp
index ac6e0e5..9e922f8 100644
--- a/lib/AsmParser/LLParser.cpp
+++ b/lib/AsmParser/LLParser.cpp
@@ -2644,10 +2644,10 @@ bool LLParser::ParseValID(ValID &ID, PerFunctionState *PFS) {
         ParseType(DestTy) ||
         ParseToken(lltok::rparen, "expected ')' at end of constantexpr cast"))
       return true;
-    if (!CastInst::castIsValid((Instruction::CastOps)Opc, SrcVal, DestTy))
+    /*if (!CastInst::castIsValid((Instruction::CastOps)Opc, SrcVal, DestTy))
       return Error(ID.Loc, "invalid cast opcode for cast from '" +
                    getTypeString(SrcVal->getType()) + "' to '" +
-                   getTypeString(DestTy) + "'");
+                   getTypeString(DestTy) + "'");*/
     ID.ConstantVal = ConstantExpr::getCast((Instruction::CastOps)Opc,
                                                  SrcVal, DestTy);
     ID.Kind = ValID::t_Constant;
@@ -3971,12 +3971,12 @@ bool LLParser::ParseCast(Instruction *&Inst, PerFunctionState &PFS,
       ParseType(DestTy))
     return true;
 
-  if (!CastInst::castIsValid((Instruction::CastOps)Opc, Op, DestTy)) {
+  /*if (!CastInst::castIsValid((Instruction::CastOps)Opc, Op, DestTy)) {
     CastInst::castIsValid((Instruction::CastOps)Opc, Op, DestTy);
     return Error(Loc, "invalid cast opcode for cast from '" +
                  getTypeString(Op->getType()) + "' to '" +
                  getTypeString(DestTy) + "'");
-  }
+  }*/
   Inst = CastInst::Create((Instruction::CastOps)Opc, Op, DestTy);
   return false;
 }
diff --git a/lib/IR/Constants.cpp b/lib/IR/Constants.cpp
index 7557886..a9f4def 100644
--- a/lib/IR/Constants.cpp
+++ b/lib/IR/Constants.cpp
@@ -1509,7 +1509,8 @@ Constant *ConstantExpr::getCast(unsigned oc, Constant *C, Type *Ty) {
   Instruction::CastOps opc = Instruction::CastOps(oc);
   assert(Instruction::isCast(opc) && "opcode out of range");
   assert(C && Ty && "Null arguments to getCast");
-  assert(CastInst::castIsValid(opc, C, Ty) && "Invalid constantexpr cast!");
+  // TODO: fix this!
+  //assert(CastInst::castIsValid(opc, C, Ty) && "Invalid constantexpr cast!");
 
   switch (opc) {
   default:
@@ -1734,8 +1735,9 @@ Constant *ConstantExpr::getIntToPtr(Constant *C, Type *DstTy) {
 }
 
 Constant *ConstantExpr::getBitCast(Constant *C, Type *DstTy) {
-  assert(CastInst::castIsValid(Instruction::BitCast, C, DstTy) &&
-         "Invalid constantexpr bitcast!");
+  // TODO: fix this! fails in AddAppleCLKernelAnnotation
+  //assert(CastInst::castIsValid(Instruction::BitCast, C, DstTy) &&
+  //     "Invalid constantexpr bitcast!");
 
   // It is common to ask for a bitcast of a value to its own type, handle this
   // speedily.
diff --git a/lib/IR/Instructions.cpp b/lib/IR/Instructions.cpp
index 9553252..5047ab2 100644
--- a/lib/IR/Instructions.cpp
+++ b/lib/IR/Instructions.cpp
@@ -275,11 +275,13 @@ void CallInst::init(Value *Func, ArrayRef<Value *> Args, const Twine &NameStr) {
           (FTy->isVarArg() && Args.size() > FTy->getNumParams())) &&
          "Calling a function with bad signature!");
 
+#if 0 // TODO: disabled for now, need to ignore address space mismatches
   for (unsigned i = 0; i != Args.size(); ++i)
     assert((i >= FTy->getNumParams() || 
             FTy->getParamType(i) == Args[i]->getType()) &&
            "Calling a function with a bad signature!");
 #endif
+#endif
 
   std::copy(Args.begin(), Args.end(), op_begin());
   setName(NameStr);
diff --git a/lib/IR/Verifier.cpp b/lib/IR/Verifier.cpp
index 9cf911b..8d61d2b 100644
--- a/lib/IR/Verifier.cpp
+++ b/lib/IR/Verifier.cpp
@@ -1542,10 +1542,17 @@ void Verifier::VerifyCallSite(CallSite CS) {
             "Incorrect number of arguments passed to called function!", I);
 
   // Verify that all arguments to the call match the function type.
-  for (unsigned i = 0, e = FTy->getNumParams(); i != e; ++i)
-    Assert3(CS.getArgument(i)->getType() == FTy->getParamType(i),
+  // Note that address space mismatches will be fixed later.
+  for (unsigned i = 0, e = FTy->getNumParams(); i != e; ++i) {
+    Assert3(CS.getArgument(i)->getType() == FTy->getParamType(i) ||
+            (CS.getArgument(i)->getType()->isPointerTy() &&
+             FTy->getParamType(i)->isPointerTy() &&
+             PointerType::get(cast<PointerType>(CS.getArgument(i)->getType())->getElementType(),
+                              FTy->getParamType(i)->getPointerAddressSpace()) ==
+             FTy->getParamType(i)),
             "Call parameter type does not match function signature!",
             CS.getArgument(i), FTy->getParamType(i), I);
+  }
 
   AttributeSet Attrs = CS.getAttributes();
 
diff --git a/lib/Target/NVPTX/NVPTX.td b/lib/Target/NVPTX/NVPTX.td
index 93fabf6..5bf4334 100644
--- a/lib/Target/NVPTX/NVPTX.td
+++ b/lib/Target/NVPTX/NVPTX.td
@@ -32,10 +32,18 @@ def SM21 : SubtargetFeature<"sm_21", "SmVersion", "21",
                             "Target SM 2.1">;
 def SM30 : SubtargetFeature<"sm_30", "SmVersion", "30",
                             "Target SM 3.0">;
+def SM32 : SubtargetFeature<"sm_32", "SmVersion", "32",
+                            "Target SM 3.2">;
 def SM35 : SubtargetFeature<"sm_35", "SmVersion", "35",
                             "Target SM 3.5">;
+def SM37 : SubtargetFeature<"sm_37", "SmVersion", "37",
+                            "Target SM 3.7">;
 def SM50 : SubtargetFeature<"sm_50", "SmVersion", "50",
                             "Target SM 5.0">;
+def SM52 : SubtargetFeature<"sm_52", "SmVersion", "52",
+                            "Target SM 5.2">;
+def SM53 : SubtargetFeature<"sm_53", "SmVersion", "53",
+                            "Target SM 5.3">;
 
 // PTX Versions
 def PTX30 : SubtargetFeature<"ptx30", "PTXVersion", "30",
@@ -46,6 +54,12 @@ def PTX32 : SubtargetFeature<"ptx32", "PTXVersion", "32",
                              "Use PTX version 3.2">;
 def PTX40 : SubtargetFeature<"ptx40", "PTXVersion", "40",
                              "Use PTX version 4.0">;
+def PTX41 : SubtargetFeature<"ptx41", "PTXVersion", "41",
+                             "Use PTX version 4.1">;
+def PTX42 : SubtargetFeature<"ptx42", "PTXVersion", "42",
+                             "Use PTX version 4.2">;
+def PTX43 : SubtargetFeature<"ptx43", "PTXVersion", "43",
+                             "Use PTX version 4.3">;
 
 //===----------------------------------------------------------------------===//
 // NVPTX supported processors.
@@ -57,8 +71,12 @@ class Proc<string Name, list<SubtargetFeature> Features>
 def : Proc<"sm_20", [SM20]>;
 def : Proc<"sm_21", [SM21]>;
 def : Proc<"sm_30", [SM30]>;
+def : Proc<"sm_32", [SM32, PTX40]>;
 def : Proc<"sm_35", [SM35]>;
-def : Proc<"sm_50", [SM50]>;
+def : Proc<"sm_37", [SM37, PTX41]>;
+def : Proc<"sm_50", [SM50, PTX40]>;
+def : Proc<"sm_52", [SM52, PTX41]>;
+def : Proc<"sm_53", [SM53, PTX42]>;
 
 
 def NVPTXInstrInfo : InstrInfo {
diff --git a/lib/Target/NVPTX/NVPTXAsmPrinter.h b/lib/Target/NVPTX/NVPTXAsmPrinter.h
index a9f9bdd..bf44862 100644
--- a/lib/Target/NVPTX/NVPTXAsmPrinter.h
+++ b/lib/Target/NVPTX/NVPTXAsmPrinter.h
@@ -202,6 +202,12 @@ private:
   void EmitFunctionBodyEnd() override;
   void emitImplicitDef(const MachineInstr *MI) const override;
 
+  /// superfluous function header fix: nop these three functions
+  void EmitGlobalVariable(const GlobalVariable *GV) override {}
+  void EmitLinkage(const GlobalValue *GV, MCSymbol *GVSym) const override {}
+  void EmitAlignment(unsigned NumBits, const GlobalObject *GO = nullptr) const override {}
+  ///
+
   void EmitInstruction(const MachineInstr *) override;
   void lowerToMCInst(const MachineInstr *MI, MCInst &OutMI);
   bool lowerOperand(const MachineOperand &MO, MCOperand &MCOp);
diff --git a/lib/Target/NVPTX/NVPTXISelLowering.cpp b/lib/Target/NVPTX/NVPTXISelLowering.cpp
index d76b20a..a444f10 100644
--- a/lib/Target/NVPTX/NVPTXISelLowering.cpp
+++ b/lib/Target/NVPTX/NVPTXISelLowering.cpp
@@ -205,7 +205,15 @@ NVPTXTargetLowering::NVPTXTargetLowering(NVPTXTargetMachine &TM)
   // Turn FP extload into load/fextend
   setLoadExtAction(ISD::EXTLOAD, MVT::f16, Expand);
   setLoadExtAction(ISD::EXTLOAD, MVT::f32, Expand);
+  setLoadExtAction(ISD::EXTLOAD, MVT::f64, Expand);
+  setLoadExtAction(ISD::EXTLOAD, MVT::v2f16, Expand);
+  setLoadExtAction(ISD::EXTLOAD, MVT::v2f32, Expand);
+  setLoadExtAction(ISD::EXTLOAD, MVT::v2f64, Expand);
+  setLoadExtAction(ISD::EXTLOAD, MVT::v4f16, Expand);
+  setLoadExtAction(ISD::EXTLOAD, MVT::v4f32, Expand);
+  setLoadExtAction(ISD::EXTLOAD, MVT::v4f64, Expand);
   // Turn FP truncstore into trunc + store.
+  // FIXME: vector types should also be expanded
   setTruncStoreAction(MVT::f32, MVT::f16, Expand);
   setTruncStoreAction(MVT::f64, MVT::f16, Expand);
   setTruncStoreAction(MVT::f64, MVT::f32, Expand);
diff --git a/lib/Target/NVPTX/NVPTXInstrInfo.td b/lib/Target/NVPTX/NVPTXInstrInfo.td
index 9900b8c..4879b84 100644
--- a/lib/Target/NVPTX/NVPTXInstrInfo.td
+++ b/lib/Target/NVPTX/NVPTXInstrInfo.td
@@ -1659,12 +1659,12 @@ multiclass FSET_FORMAT<PatFrag OpNode, PatLeaf Mode, PatLeaf ModeFTZ> {
             (SET_f64ir fpimm:$a, Float64Regs:$b, Mode)>;
 }
 
-defm FSetGT : FSET_FORMAT<setogt, CmpGT, CmpGT_FTZ>;
-defm FSetLT : FSET_FORMAT<setolt, CmpLT, CmpLT_FTZ>;
-defm FSetGE : FSET_FORMAT<setoge, CmpGE, CmpGE_FTZ>;
-defm FSetLE : FSET_FORMAT<setole, CmpLE, CmpLE_FTZ>;
-defm FSetEQ : FSET_FORMAT<setoeq, CmpEQ, CmpEQ_FTZ>;
-defm FSetNE : FSET_FORMAT<setone, CmpNE, CmpNE_FTZ>;
+defm FSetOGT : FSET_FORMAT<setogt, CmpGT, CmpGT_FTZ>;
+defm FSetOLT : FSET_FORMAT<setolt, CmpLT, CmpLT_FTZ>;
+defm FSetOGE : FSET_FORMAT<setoge, CmpGE, CmpGE_FTZ>;
+defm FSetOLE : FSET_FORMAT<setole, CmpLE, CmpLE_FTZ>;
+defm FSetOEQ : FSET_FORMAT<setoeq, CmpEQ, CmpEQ_FTZ>;
+defm FSetONE : FSET_FORMAT<setone, CmpNE, CmpNE_FTZ>;
 
 defm FSetUGT : FSET_FORMAT<setugt, CmpGTU, CmpGTU_FTZ>;
 defm FSetULT : FSET_FORMAT<setult, CmpLTU, CmpLTU_FTZ>;
@@ -1673,6 +1673,13 @@ defm FSetULE : FSET_FORMAT<setule, CmpLEU, CmpLEU_FTZ>;
 defm FSetUEQ : FSET_FORMAT<setueq, CmpEQU, CmpEQU_FTZ>;
 defm FSetUNE : FSET_FORMAT<setune, CmpNEU, CmpNEU_FTZ>;
 
+defm FSetGT : FSET_FORMAT<setgt, CmpGT, CmpGT_FTZ>;
+defm FSetLT : FSET_FORMAT<setlt, CmpLT, CmpLT_FTZ>;
+defm FSetGE : FSET_FORMAT<setge, CmpGE, CmpGE_FTZ>;
+defm FSetLE : FSET_FORMAT<setle, CmpLE, CmpLE_FTZ>;
+defm FSetEQ : FSET_FORMAT<seteq, CmpEQ, CmpEQ_FTZ>;
+defm FSetNE : FSET_FORMAT<setne, CmpNE, CmpNE_FTZ>;
+
 defm FSetNUM : FSET_FORMAT<seto, CmpNUM, CmpNUM_FTZ>;
 defm FSetNAN : FSET_FORMAT<setuo, CmpNAN, CmpNAN_FTZ>;
 
diff --git a/lib/Target/NVPTX/NVPTXSubtarget.cpp b/lib/Target/NVPTX/NVPTXSubtarget.cpp
index d5cded2..2e0ca79 100644
--- a/lib/Target/NVPTX/NVPTXSubtarget.cpp
+++ b/lib/Target/NVPTX/NVPTXSubtarget.cpp
@@ -45,9 +45,9 @@ NVPTXSubtarget &NVPTXSubtarget::initializeSubtargetDependencies(StringRef CPU,
 
   ParseSubtargetFeatures(TargetName, FS);
 
-  // Set default to PTX 3.2 (CUDA 5.5)
+  // Set default to PTX 4.0
   if (PTXVersion == 0) {
-    PTXVersion = 32;
+    PTXVersion = 40;
   }
 
   return *this;
diff --git a/lib/Transforms/IPO/FunctionAttrs.cpp b/lib/Transforms/IPO/FunctionAttrs.cpp
index 8174df9..21a73ba 100644
--- a/lib/Transforms/IPO/FunctionAttrs.cpp
+++ b/lib/Transforms/IPO/FunctionAttrs.cpp
@@ -135,6 +135,7 @@ namespace {
 }
 
 char FunctionAttrs::ID = 0;
+char &llvm::FunctionAttrsID = FunctionAttrs::ID;
 INITIALIZE_PASS_BEGIN(FunctionAttrs, "functionattrs",
                 "Deduce function attributes", false, false)
 INITIALIZE_AG_DEPENDENCY(AliasAnalysis)
diff --git a/lib/Transforms/IPO/GlobalOpt.cpp b/lib/Transforms/IPO/GlobalOpt.cpp
index c1d0d3b..3d4303a 100644
--- a/lib/Transforms/IPO/GlobalOpt.cpp
+++ b/lib/Transforms/IPO/GlobalOpt.cpp
@@ -20,6 +20,7 @@
 #include "llvm/ADT/SmallSet.h"
 #include "llvm/ADT/SmallVector.h"
 #include "llvm/ADT/Statistic.h"
+#include "llvm/ADT/Triple.h"
 #include "llvm/Analysis/ConstantFolding.h"
 #include "llvm/Analysis/MemoryBuiltins.h"
 #include "llvm/IR/CallSite.h"
@@ -1869,6 +1870,17 @@ static void ChangeCalleesToFastCall(Function *F) {
   }
 }
 
+/// ChangeCalleesToSpirFunc - Walk all of the direct calls of the specified
+/// function, changing them to spir_func calling convention.
+static void ChangeCalleesToSpirFunc(Function *F) {
+  for (User *U : F->users()) {
+    if (isa<BlockAddress>(U))
+      continue;
+    CallSite CS(cast<Instruction>(U));
+    CS.setCallingConv(CallingConv::SPIR_FUNC);
+  }
+}
+
 static AttributeSet StripNest(LLVMContext &C, const AttributeSet &Attrs) {
   for (unsigned i = 0, e = Attrs.getNumSlots(); i != e; ++i) {
     unsigned Index = Attrs.getSlotIndex(i);
@@ -1903,6 +1915,7 @@ static bool isProfitableToMakeFastCC(Function *F) {
 }
 
 bool GlobalOpt::OptimizeFunctions(Module &M) {
+  const llvm::Triple triple(M.getTargetTriple());
   bool Changed = false;
   // Optimize functions.
   for (Module::iterator FI = M.begin(), E = M.end(); FI != E; ) {
@@ -1921,8 +1934,17 @@ bool GlobalOpt::OptimizeFunctions(Module &M) {
         // If this function has a calling convention worth changing, is not a
         // varargs function, and is only called directly, promote it to use the
         // Fast calling convention.
-        F->setCallingConv(CallingConv::Fast);
-        ChangeCalleesToFastCall(F);
+        // with OpenCL/SPIR: change it to spir_func instead (fastcc is invalid)
+        if ((triple.getArch() == llvm::Triple::ArchType::spir ||
+             triple.getArch() == llvm::Triple::ArchType::spir64) &&
+            triple.getVendorName().str() == "unknown") {
+          F->setCallingConv(CallingConv::SPIR_FUNC);
+          ChangeCalleesToSpirFunc(F);
+        }
+        else {
+          F->setCallingConv(CallingConv::Fast);
+          ChangeCalleesToFastCall(F);
+        }
         ++NumFastCallFns;
         Changed = true;
       }
diff --git a/lib/Transforms/IPO/Internalize.cpp b/lib/Transforms/IPO/Internalize.cpp
index c970a1a..20d38ef 100644
--- a/lib/Transforms/IPO/Internalize.cpp
+++ b/lib/Transforms/IPO/Internalize.cpp
@@ -23,6 +23,7 @@
 #include "llvm/ADT/SmallPtrSet.h"
 #include "llvm/ADT/Statistic.h"
 #include "llvm/Analysis/CallGraph.h"
+#include "llvm/IR/Function.h"
 #include "llvm/IR/Module.h"
 #include "llvm/Pass.h"
 #include "llvm/Support/CommandLine.h"
@@ -127,6 +128,14 @@ static bool shouldInternalize(const GlobalValue &GV,
   if (ExternalNames.count(GV.getName()))
     return false;
 
+  // is this a compute (opencl/cuda/metal) kernel function?
+  if (isa<Function>(GV)) {
+    const Function* F = dyn_cast<Function>(&GV);
+    if (F && F->hasFnAttribute("compute_kernel")) {
+      return false;
+    }
+  }
+
   return true;
 }
 
diff --git a/lib/Transforms/IPO/PassManagerBuilder.cpp b/lib/Transforms/IPO/PassManagerBuilder.cpp
index 701fb46..8e06212 100644
--- a/lib/Transforms/IPO/PassManagerBuilder.cpp
+++ b/lib/Transforms/IPO/PassManagerBuilder.cpp
@@ -70,6 +70,10 @@ PassManagerBuilder::PassManagerBuilder() {
     LoopVectorize = RunLoopVectorization;
     RerollLoops = RunLoopRerolling;
     LoadCombine = RunLoadCombine;
+    EnableAddressSpaceFix = false;
+    EnableCUDAPasses = false;
+    EnableMetalPasses = false;
+    EnableSPIRPasses = false;
 }
 
 PassManagerBuilder::~PassManagerBuilder() {
@@ -130,6 +134,9 @@ void PassManagerBuilder::populateFunctionPassManager(FunctionPassManager &FPM) {
 }
 
 void PassManagerBuilder::populateModulePassManager(PassManagerBase &MPM) {
+  // run "first" passes that should run before all else
+  if(EnableCUDAPasses) MPM.add(createCUDAFirstPass());
+
   // If all optimizations are disabled, just run the always-inline pass.
   if (OptLevel == 0) {
     if (Inliner) {
@@ -153,6 +160,18 @@ void PassManagerBuilder::populateModulePassManager(PassManagerBase &MPM) {
 
   addInitialAliasAnalysisPasses(MPM);
 
+  if (EnableAddressSpaceFix) {
+    // address space fixing should be run as early as possible, but it also
+    // requires readonly/nocapture/etc function and argument attributes,
+    // which in turn requires certain alias analysis to be run first
+    // -> this is the earliest point to do this
+    // NOTE: the original FunctionAttrs pass should still be run later on,
+    // because the code will have changed significantly due to optimizations
+    // and other pass changes
+    MPM.add(createFunctionAttrsPass());
+    MPM.add(createAddressSpaceFixPass());
+  }
+
   if (!DisableUnitAtATime) {
     addExtensionsToPM(EP_ModuleOptimizerEarly, MPM);
 
@@ -280,6 +299,11 @@ void PassManagerBuilder::populateModulePassManager(PassManagerBase &MPM) {
     }
   }
   addExtensionsToPM(EP_OptimizerLast, MPM);
+
+  // run CUDAFinal/MetalFinal/SPIRFinal pass at the very end, no IR should change after this point!
+  if(EnableSPIRPasses) MPM.add(createSPIRFinalPass());
+  else if(EnableMetalPasses) MPM.add(createMetalFinalPass());
+  else if(EnableCUDAPasses) MPM.add(createCUDAFinalPass());
 }
 
 void PassManagerBuilder::populateLTOPassManager(PassManagerBase &PM,
diff --git a/lib/Transforms/Scalar/AddressSpaceFix.cpp b/lib/Transforms/Scalar/AddressSpaceFix.cpp
new file mode 100644
index 0000000..437368f
--- /dev/null
+++ b/lib/Transforms/Scalar/AddressSpaceFix.cpp
@@ -0,0 +1,239 @@
+//===- AddressSpaceFix.cpp - OpenCL/SPIR and related addrspace fixes ------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file implements an address space fixer for OpenCL/SPIR (and related).
+//
+//===----------------------------------------------------------------------===//
+
+#include "llvm/ADT/Statistic.h"
+#include "llvm/ADT/STLExtras.h"
+#include "llvm/ADT/SetVector.h"
+#include "llvm/ADT/SmallPtrSet.h"
+#include "llvm/ADT/SmallVector.h"
+#include "llvm/ADT/StringExtras.h"
+#include "llvm/Analysis/AliasAnalysis.h"
+#include "llvm/IR/CFG.h"
+#include "llvm/IR/CallSite.h"
+#include "llvm/IR/CallingConv.h"
+#include "llvm/IR/ConstantRange.h"
+#include "llvm/IR/Constants.h"
+#include "llvm/IR/DataLayout.h"
+#include "llvm/IR/DebugInfo.h"
+#include "llvm/IR/DerivedTypes.h"
+#include "llvm/IR/Dominators.h"
+#include "llvm/IR/Function.h"
+#include "llvm/IR/InlineAsm.h"
+#include "llvm/IR/InstIterator.h"
+#include "llvm/IR/InstVisitor.h"
+#include "llvm/IR/IntrinsicInst.h"
+#include "llvm/IR/IRBuilder.h"
+#include "llvm/IR/LLVMContext.h"
+#include "llvm/IR/Metadata.h"
+#include "llvm/IR/Module.h"
+#include "llvm/IR/LegacyPassManager.h"
+#include "llvm/Pass.h"
+#include "llvm/Support/CommandLine.h"
+#include "llvm/Support/Debug.h"
+#include "llvm/Support/ErrorHandling.h"
+#include "llvm/Support/raw_ostream.h"
+#include "llvm/Transforms/IPO/PassManagerBuilder.h"
+#include "llvm/Transforms/IPO.h"
+#include "llvm/Transforms/Scalar.h"
+#include <algorithm>
+#include <cstdarg>
+#include <memory>
+#include <cxxabi.h>
+using namespace llvm;
+
+#define DEBUG_TYPE "AddressSpaceFix"
+
+#if 1
+#define DBG(x)
+#else
+#define DBG(x) x
+#endif
+
+namespace {
+	// AddressSpaceFix
+	struct AddressSpaceFix : public FunctionPass, InstVisitor<AddressSpaceFix> {
+		friend class InstVisitor<AddressSpaceFix>;
+		
+		static char ID; // Pass identification, replacement for typeid
+		
+		std::shared_ptr<llvm::IRBuilder<>> builder;
+		
+		Module* M { nullptr };
+		LLVMContext* ctx { nullptr };
+		Function* func { nullptr };
+		Instruction* alloca_insert { nullptr };
+		bool was_modified { false };
+		
+		AddressSpaceFix() : FunctionPass(ID) {
+			initializeAddressSpaceFixPass(*PassRegistry::getPassRegistry());
+		}
+		
+		void getAnalysisUsage(AnalysisUsage &AU) const override {
+			AU.addRequiredID(FunctionAttrsID);
+		}
+		
+		bool runOnFunction(Function &F) override {
+			// exit if empty function
+			if (F.empty()) return false;
+			
+			//
+			M = F.getParent();
+			ctx = &M->getContext();
+			func = &F;
+			builder = std::make_shared<llvm::IRBuilder<>>(*ctx);
+			
+			// find first non-alloca instruction in the entry block of the function
+			// -> this will be the insert position for new alloca instructions
+			for(auto& instr : *F.begin()) {
+				if(!isa<AllocaInst>(instr)) {
+					alloca_insert = &instr;
+					break;
+				}
+			}
+			
+			// visit everything in this function
+			was_modified = false; // reset every time
+			DBG(errs() << "in func: "; errs().write_escaped(F.getName()) << '\n';)
+			visit(F);
+			if(was_modified) {
+				DBG(errs() << "!! modified function: ";)
+				DBG(errs().write_escaped(F.getName()) << '\n';)
+			}
+			return was_modified;
+		}
+		
+		// InstVisitor overrides...
+		using InstVisitor<AddressSpaceFix>::visit;
+		void visit(Instruction& I) {
+			InstVisitor<AddressSpaceFix>::visit(I);
+		}
+		
+		void visitCallInst(CallInst& CI) {
+			CallSite CS { &CI };
+			PointerType* FPTy = cast<PointerType>(CS.getCalledValue()->getType());
+			FunctionType* FTy = cast<FunctionType>(FPTy->getElementType());
+			
+			for (unsigned i = 0, e = FTy->getNumParams(); i != e; ++i) {
+				// check if there is a type mismatch
+				if(CS.getArgument(i)->getType() != FTy->getParamType(i)) {
+					// both types must be pointers
+					auto arg = CS.getArgument(i);
+					auto called_arg_type = arg->getType();
+					auto expected_arg_type = FTy->getParamType(i);
+					if(!called_arg_type->isPointerTy() ||
+					   !expected_arg_type->isPointerTy()) {
+						// emit original verifier assertion (TODO: fix it there!)
+						assert(false && "#1: Call parameter type does not match function signature!");
+						continue;
+					}
+					
+					// check if the mismatch is _only_ due to the addrspace
+					auto as_ptr = cast<PointerType>(called_arg_type);
+					if(PointerType::get(as_ptr->getElementType(),
+										expected_arg_type->getPointerAddressSpace()) !=
+					   expected_arg_type) {
+						// emit original verifier assertion (TODO: fix it there!)
+						assert(false && "#2: Call parameter type does not match function signature!");
+						continue;
+					}
+					// else: yup, only addrspace mismatch
+					DBG(errs() << "#####################################################\n";)
+					DBG(errs() << "\t>> call to: "; CS.getCalledFunction()->llvm::Value::getType()->dump();)
+					DBG(errs() << "\n\t>> full: " << CS.getCalledFunction()->getName() << "\n";)
+					DBG(errs() << "\tonly addrspace mismatch!\n";)
+					DBG(errs() << "\treplacing arg #" << i << "!\n";)
+					DBG(errs() << called_arg_type->getPointerAddressSpace() << ", ";)
+					DBG(errs() << expected_arg_type->getPointerAddressSpace() << "\n";)
+					DBG(called_arg_type->dump(); errs() << ", ";)
+					DBG(expected_arg_type->dump(); errs() << "\n";)
+					DBG({
+						int err = 0;
+						const char* demangled_name = abi::__cxa_demangle(CS.getCalledFunction()->getName().data(), 0, 0, &err);
+						errs() << "\tfunc: " << (demangled_name != nullptr ? demangled_name : CS.getCalledFunction()->getName().data()) << "\n";
+						if(demangled_name != nullptr) {
+							free((void*)demangled_name);
+						}
+					})
+					
+					// abort if arg is a bitcast or addrspacecast and pretend everything is fine ("someone else" is already making it fit)
+					if(isa<BitCastInst>(arg) || isa<AddrSpaceCastInst>(arg)) continue;
+					
+					// abort if expected param address space is not 0, this is not supported (or would end in a good way ...)
+					// TODO: figure out if it would be a good idea to allow things like loading from e.g. local AS and calling a global AS function
+					if(expected_arg_type->getPointerAddressSpace() != 0) continue;
+					
+					// abort if current argument is in address space 0 (can't be moved to an address space)
+					if(called_arg_type->getPointerAddressSpace() == 0) continue;
+					
+					// fix it:
+					//  * create a temporary object (of the element/pointee type of the address space pointer)
+					//  * load data from the address space pointer to the temp object
+					//  * replace the respective call operand/argument with a pointer to the temp object
+					//  * after the call, store data back to the address space pointer from the temp object,
+					//    unless the temp object can not or has not been written to
+					
+					// TODO: handle alignment?
+					
+					// query information that decides if a store is necessary later on
+					const bool is_constant_as = (as_ptr->getPointerAddressSpace() == 2);
+					const bool is_readonly = CS.onlyReadsMemory(i);
+					const bool is_load = isa<LoadInst>(arg);
+					
+					builder->SetInsertPoint(alloca_insert); // insert alloca at function entry
+					auto tmp = builder->CreateAlloca(as_ptr->getElementType(),
+													 // what about arrays?
+													 nullptr,
+													 // give it a nice name
+													 "asfixtmp");
+					
+					builder->SetInsertPoint(&CI); // insert load before call
+					builder->CreateStore(builder->CreateLoad(arg), tmp);
+					
+					CS.setArgument(i, tmp);
+					
+					// don't emit stores for const pointers or constant address space pointers
+					if(!is_constant_as && !is_readonly && !is_load) {
+						builder->SetInsertPoint(CI.getNextNode()); // insert store after call
+						builder->CreateStore(builder->CreateLoad(tmp), arg);
+						DBG(errs() << "<< emitted write-back\n";)
+					}
+					else {
+						DBG(errs() << "<< discarded write-back";)
+						if(is_constant_as) {
+							DBG(errs() << ": constant address space";)
+						}
+						else if(is_readonly) {
+							DBG(errs() << ": readonly arg";)
+						}
+						else if(is_load) {
+							DBG(errs() << ": load instruction";)
+						}
+						DBG(errs() << ", " << is_constant_as << ", " << is_readonly << ", " << is_load << "\n";)
+					}
+
+					// done, signal that the function was modified
+					was_modified = true;
+				}
+			}
+		}
+	};
+}
+
+char AddressSpaceFix::ID = 0;
+INITIALIZE_PASS_BEGIN(AddressSpaceFix, "AddressSpaceFix", "AddressSpaceFix Pass", false, false)
+INITIALIZE_PASS_DEPENDENCY(FunctionAttrs)
+INITIALIZE_PASS_END(AddressSpaceFix, "AddressSpaceFix", "AddressSpaceFix Pass", false, false)
+
+FunctionPass *llvm::createAddressSpaceFixPass() {
+	return new AddressSpaceFix();
+}
diff --git a/lib/Transforms/Scalar/CMakeLists.txt b/lib/Transforms/Scalar/CMakeLists.txt
index 261ddda..bc96e84 100644
--- a/lib/Transforms/Scalar/CMakeLists.txt
+++ b/lib/Transforms/Scalar/CMakeLists.txt
@@ -1,4 +1,9 @@
 add_llvm_library(LLVMScalarOpts
+  AddressSpaceFix.cpp
+  CUDAFirst.cpp
+  CUDAFinal.cpp
+  MetalFinal.cpp
+  SPIRFinal.cpp
   ADCE.cpp
   ConstantHoisting.cpp
   ConstantProp.cpp
diff --git a/lib/Transforms/Scalar/CUDAFinal.cpp b/lib/Transforms/Scalar/CUDAFinal.cpp
new file mode 100644
index 0000000..b77f9fa
--- /dev/null
+++ b/lib/Transforms/Scalar/CUDAFinal.cpp
@@ -0,0 +1,116 @@
+//===- CUDAFinal.cpp - CUDA final pass ------------------------------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// TODO
+//
+//===----------------------------------------------------------------------===//
+
+#include "llvm/ADT/Statistic.h"
+#include "llvm/ADT/STLExtras.h"
+#include "llvm/ADT/SetVector.h"
+#include "llvm/ADT/SmallPtrSet.h"
+#include "llvm/ADT/SmallVector.h"
+#include "llvm/ADT/StringExtras.h"
+#include "llvm/Analysis/AliasAnalysis.h"
+#include "llvm/IR/CFG.h"
+#include "llvm/IR/CallSite.h"
+#include "llvm/IR/CallingConv.h"
+#include "llvm/IR/ConstantRange.h"
+#include "llvm/IR/Constants.h"
+#include "llvm/IR/DataLayout.h"
+#include "llvm/IR/DebugInfo.h"
+#include "llvm/IR/DerivedTypes.h"
+#include "llvm/IR/Dominators.h"
+#include "llvm/IR/Function.h"
+#include "llvm/IR/InlineAsm.h"
+#include "llvm/IR/InstIterator.h"
+#include "llvm/IR/InstVisitor.h"
+#include "llvm/IR/IntrinsicInst.h"
+#include "llvm/IR/IRBuilder.h"
+#include "llvm/IR/LLVMContext.h"
+#include "llvm/IR/Metadata.h"
+#include "llvm/IR/Module.h"
+#include "llvm/IR/LegacyPassManager.h"
+#include "llvm/Pass.h"
+#include "llvm/Support/CommandLine.h"
+#include "llvm/Support/Debug.h"
+#include "llvm/Support/ErrorHandling.h"
+#include "llvm/Support/raw_ostream.h"
+#include "llvm/Transforms/IPO/PassManagerBuilder.h"
+#include "llvm/Transforms/IPO.h"
+#include "llvm/Transforms/Scalar.h"
+#include <algorithm>
+#include <cstdarg>
+#include <memory>
+#include <cxxabi.h>
+using namespace llvm;
+
+#define DEBUG_TYPE "CUDAFinal"
+
+#if 1
+#define DBG(x)
+#else
+#define DBG(x) x
+#endif
+
+namespace {
+	// CUDAFinal
+	struct CUDAFinal : public FunctionPass, InstVisitor<CUDAFinal> {
+		friend class InstVisitor<CUDAFinal>;
+		
+		static char ID; // Pass identification, replacement for typeid
+		
+		std::shared_ptr<llvm::IRBuilder<>> builder;
+		
+		Module* M { nullptr };
+		LLVMContext* ctx { nullptr };
+		Function* func { nullptr };
+		Instruction* alloca_insert { nullptr };
+		bool was_modified { false };
+		
+		CUDAFinal() : FunctionPass(ID) {
+			initializeCUDAFinalPass(*PassRegistry::getPassRegistry());
+		}
+		
+		bool runOnFunction(Function &F) override {
+			// exit if empty function
+			if(F.empty()) return false;
+			
+			// if not a kernel function, return (for now)
+			if(!F.hasFnAttribute("compute_kernel")) return false;
+			
+			// reset
+			M = F.getParent();
+			ctx = &M->getContext();
+			func = &F;
+			builder = std::make_shared<llvm::IRBuilder<>>(*ctx);
+			was_modified = false;
+			
+			// visit everything in this function
+			DBG(errs() << "in func: "; errs().write_escaped(F.getName()) << '\n';)
+			visit(F);
+			return was_modified;
+		}
+		
+		// InstVisitor overrides...
+		using InstVisitor<CUDAFinal>::visit;
+		void visit(Instruction& I) {
+			InstVisitor<CUDAFinal>::visit(I);
+		}
+		
+	};
+}
+
+char CUDAFinal::ID = 0;
+INITIALIZE_PASS_BEGIN(CUDAFinal, "CUDAFinal", "CUDAFinal Pass", false, false)
+INITIALIZE_PASS_END(CUDAFinal, "CUDAFinal", "CUDAFinal Pass", false, false)
+
+FunctionPass *llvm::createCUDAFinalPass() {
+	return new CUDAFinal();
+}
diff --git a/lib/Transforms/Scalar/CUDAFirst.cpp b/lib/Transforms/Scalar/CUDAFirst.cpp
new file mode 100644
index 0000000..8371614
--- /dev/null
+++ b/lib/Transforms/Scalar/CUDAFirst.cpp
@@ -0,0 +1,754 @@
+//===- CUDAFirst.cpp - CUDA first pass ------------------------------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This pass currently builds PTX texture/surface instructions (inline asm) from
+// floor.read_image.* and floor.write_image.* intrinsics.
+//
+//===----------------------------------------------------------------------===//
+
+#include "llvm/ADT/Statistic.h"
+#include "llvm/ADT/STLExtras.h"
+#include "llvm/ADT/SetVector.h"
+#include "llvm/ADT/SmallPtrSet.h"
+#include "llvm/ADT/SmallVector.h"
+#include "llvm/ADT/StringExtras.h"
+#include "llvm/Analysis/AliasAnalysis.h"
+#include "llvm/IR/CFG.h"
+#include "llvm/IR/CallSite.h"
+#include "llvm/IR/CallingConv.h"
+#include "llvm/IR/ConstantRange.h"
+#include "llvm/IR/Constants.h"
+#include "llvm/IR/DataLayout.h"
+#include "llvm/IR/DebugInfo.h"
+#include "llvm/IR/DerivedTypes.h"
+#include "llvm/IR/Dominators.h"
+#include "llvm/IR/Function.h"
+#include "llvm/IR/InlineAsm.h"
+#include "llvm/IR/InstIterator.h"
+#include "llvm/IR/InstVisitor.h"
+#include "llvm/IR/IntrinsicInst.h"
+#include "llvm/IR/IRBuilder.h"
+#include "llvm/IR/LLVMContext.h"
+#include "llvm/IR/Metadata.h"
+#include "llvm/IR/Module.h"
+#include "llvm/IR/LegacyPassManager.h"
+#include "llvm/Pass.h"
+#include "llvm/Support/CommandLine.h"
+#include "llvm/Support/Debug.h"
+#include "llvm/Support/ErrorHandling.h"
+#include "llvm/Support/raw_ostream.h"
+#include "llvm/Transforms/IPO/PassManagerBuilder.h"
+#include "llvm/Transforms/IPO.h"
+#include "llvm/Transforms/Scalar.h"
+#include <algorithm>
+#include <cstdarg>
+#include <memory>
+#include <array>
+#include <cxxabi.h>
+using namespace llvm;
+
+#define DEBUG_TYPE "CUDAFirst"
+
+#if 1
+#define DBG(x)
+#else
+#define DBG(x) x
+#endif
+
+// condensed version of the COMPUTE_IMAGE_TYPE defined by floor
+enum class COMPUTE_IMAGE_TYPE : uint32_t {
+	//! invalid/uninitialized
+	NONE					= (0u),
+	
+	//////////////////////////////////////////
+	// -> image flags and types
+	//! upper 14-bit (18-31): type flags (currently used: 13/14)
+	__FLAG_MASK				= (0xFFFC0000u),
+	__FLAG_SHIFT			= (18u),
+	//! base type: image is an array (aka has layers)
+	FLAG_ARRAY				= (1u << (__FLAG_SHIFT + 0u)),
+	//! base type: image is a buffer object
+	FLAG_BUFFER				= (1u << (__FLAG_SHIFT + 1u)),
+	//! base type: image uses mutli-sampling (consists of multiple samples)
+	FLAG_MSAA				= (1u << (__FLAG_SHIFT + 2u)),
+	//! base type: image is a cube map
+	FLAG_CUBE				= (1u << (__FLAG_SHIFT + 3u)),
+	//! base type: image is a depth image
+	FLAG_DEPTH				= (1u << (__FLAG_SHIFT + 4u)),
+	//! base type: image is a stencil image
+	FLAG_STENCIL			= (1u << (__FLAG_SHIFT + 5u)),
+	//! base type: image is a renderbuffer
+	FLAG_RENDERBUFFER		= (1u << (__FLAG_SHIFT + 6u)),
+	//! optional type: image uses mip-mapping, i.e. has multiple LODs
+	FLAG_MIPMAPPED			= (1u << (__FLAG_SHIFT + 7u)),
+	//! optional type: image uses anisotropic filtering
+	FLAG_ANISOTROPIC		= (1u << (__FLAG_SHIFT + 8u)),
+	//! optional type: image doesn't need a sampler (i.e. only point/nearest/pixel sampled)
+	FLAG_NO_SAMPLER			= (1u << (__FLAG_SHIFT + 9u)),
+	//! optional type: image uses gather sampling (aka tld4/fetch4)
+	FLAG_GATHER				= (1u << (__FLAG_SHIFT + 10u)),
+	//! optional type: when using integer storage formats, the data is normalized in [0, 1]
+	FLAG_NORMALIZED			= (1u << (__FLAG_SHIFT + 11u)),
+	//! optional type: image data is stored in (partial) reverse order (e.g. BGRA instead of RGBA)
+	FLAG_REVERSE			= (1u << (__FLAG_SHIFT + 12u)),
+	
+	//! bits 16-17: dimensionality
+	__DIM_MASK				= (0x00030000u),
+	__DIM_SHIFT				= (16u),
+	DIM_1D					= (1u << __DIM_SHIFT),
+	DIM_2D					= (2u << __DIM_SHIFT),
+	DIM_3D					= (3u << __DIM_SHIFT),
+	
+	//! bits 14-15: actual storage dimensionality (for arrays/layers: dim + 1, else: == dim)
+	__DIM_STORAGE_MASK		= (0x0000C000u),
+	__DIM_STORAGE_SHIFT		= (14u),
+	DIM_STORAGE_1D			= (1u << __DIM_STORAGE_SHIFT),
+	DIM_STORAGE_2D			= (2u << __DIM_STORAGE_SHIFT),
+	DIM_STORAGE_3D			= (3u << __DIM_STORAGE_SHIFT),
+	
+	//! bits 12-13: channel count
+	__CHANNELS_MASK			= (0x00003000u),
+	__CHANNELS_SHIFT		= (12u),
+	CHANNELS_1				= (0u << __CHANNELS_SHIFT),
+	CHANNELS_2				= (1u << __CHANNELS_SHIFT),
+	CHANNELS_3				= (2u << __CHANNELS_SHIFT),
+	CHANNELS_4				= (3u << __CHANNELS_SHIFT),
+	
+	//! bits 10-11: storage data type
+	__DATA_TYPE_MASK		= (0x00000C00u),
+	__DATA_TYPE_SHIFT		= (10u),
+	INT						= (1u << __DATA_TYPE_SHIFT),
+	UINT					= (2u << __DATA_TYPE_SHIFT),
+	FLOAT					= (3u << __DATA_TYPE_SHIFT),
+	
+	//! bits 8-9: access qualifier
+	__ACCESS_MASK			= (0x00000300u),
+	__ACCESS_SHIFT			= (8u),
+	//! image is read-only (exluding host operations)
+	READ					= (1u << __ACCESS_SHIFT),
+	//! image is write-only (exluding host operations)
+	WRITE					= (2u << __ACCESS_SHIFT),
+	//! image is read-write
+	//! NOTE: also applies if neither is set
+	READ_WRITE				= (READ | WRITE),
+	
+	//! bits 0-7: formats
+	__FORMAT_MASK			= (0x000000FFu),
+	//! 2 bits per channel
+	FORMAT_2				= (1u),
+	//! 3 channel format: 3-bit/3-bit/2-bit
+	FORMAT_3_3_2			= (2u),
+	//! 4 bits per channel
+	FORMAT_4				= (3u),
+	//! 3 channel format: 5-bit/5-bit/5-bit
+	FORMAT_5_5_5			= (4u),
+	//! 4 channel format: 5-bit/5-bit/5-bit/1-bit
+	FORMAT_5_5_5_1			= (5u),
+	//! 3 channel format: 5-bit/6-bit/5-bit
+	FORMAT_5_6_5			= (6u),
+	//! 8 bits per channel
+	FORMAT_8				= (7u),
+	//! 3 channel format: 9-bit/9-bit/9-bit (5-bit exp)
+	FORMAT_9_9_9_5			= (8u),
+	//! 3 channel format: 10-bit/10-bit/10-bit
+	FORMAT_10				= (9u),
+	//! 4 channel format: 10-bit/10-bit/10-bit/2-bit
+	FORMAT_10_10_10_2		= (10u),
+	//! 3 channel format: 11-bit/11-bit/10-bit
+	FORMAT_11_11_10			= (11u),
+	//! 3 channel format: 12-bit/12-bit/12-bit
+	FORMAT_12_12_12			= (12u),
+	//! 4 channel format: 12-bit/12-bit/12-bit/12-bit
+	FORMAT_12_12_12_12		= (13u),
+	//! 16 bits per channel
+	FORMAT_16				= (14u),
+	//! 1 channel format: 24-bit
+	FORMAT_24				= (15u),
+	//! 2 channel format: 24-bit/8-bit
+	FORMAT_24_8				= (16u),
+	//! 32 bits per channel
+	FORMAT_32				= (17u),
+	//! 2 channel format: 32-bit/8-bit
+	FORMAT_32_8				= (18u),
+	//! 64 bits per channel
+	FORMAT_64				= (19u),
+	__FORMAT_MAX			= FORMAT_64,
+	
+	//////////////////////////////////////////
+	// -> base image types
+	//! 1D image
+	IMAGE_1D				= DIM_1D | DIM_STORAGE_1D,
+	//! array of 1D images
+	IMAGE_1D_ARRAY			= DIM_1D | DIM_STORAGE_2D | FLAG_ARRAY,
+	//! 1D image buffer (special format on some platforms)
+	IMAGE_1D_BUFFER			= DIM_1D | DIM_STORAGE_1D | FLAG_BUFFER,
+	
+	//! 2D image
+	IMAGE_2D				= DIM_2D | DIM_STORAGE_2D,
+	//! array of 2D images
+	IMAGE_2D_ARRAY			= DIM_2D | DIM_STORAGE_3D | FLAG_ARRAY,
+	//! multi-sampled 2D image
+	IMAGE_2D_MSAA			= DIM_2D | DIM_STORAGE_2D | FLAG_MSAA,
+	//! array of multi-sampled 2D images
+	IMAGE_2D_MSAA_ARRAY		= DIM_2D | DIM_STORAGE_3D | FLAG_MSAA | FLAG_ARRAY,
+	
+	//! 3D image
+	IMAGE_3D				= DIM_3D | DIM_STORAGE_3D,
+	//! cube map image
+	IMAGE_CUBE				= DIM_2D | DIM_STORAGE_3D | FLAG_CUBE,
+	//! array of cube map images
+	IMAGE_CUBE_ARRAY		= DIM_2D | DIM_STORAGE_3D | FLAG_CUBE | FLAG_ARRAY,
+	
+	//! 2D depth image
+	IMAGE_DEPTH				= FLAG_DEPTH | IMAGE_2D,
+	//! combined 2D depth + stencil image
+	IMAGE_DEPTH_STENCIL		= FLAG_DEPTH | IMAGE_2D | FLAG_STENCIL,
+	//! array of 2D depth images
+	IMAGE_DEPTH_ARRAY		= FLAG_DEPTH | IMAGE_2D_ARRAY,
+	//! depth cube map image
+	IMAGE_DEPTH_CUBE		= FLAG_DEPTH | IMAGE_CUBE,
+	//! multi-sampled 2D depth image
+	IMAGE_DEPTH_MSAA		= FLAG_DEPTH | IMAGE_2D_MSAA,
+	//! array of multi-sampled 2D depth images
+	IMAGE_DEPTH_MSAA_ARRAY	= FLAG_DEPTH | IMAGE_2D_MSAA_ARRAY,
+	
+	//
+	BASE_TYPE_MASK			= (__DIM_MASK | __DIM_STORAGE_MASK |
+							   FLAG_ARRAY | FLAG_BUFFER | FLAG_CUBE | FLAG_DEPTH | FLAG_MSAA | FLAG_STENCIL),
+	
+};
+__attribute__((always_inline, used)) static constexpr COMPUTE_IMAGE_TYPE operator|(const COMPUTE_IMAGE_TYPE& e0,
+																				   const COMPUTE_IMAGE_TYPE& e1) {
+	return (COMPUTE_IMAGE_TYPE)((typename std::underlying_type<COMPUTE_IMAGE_TYPE>::type)e0 |
+								(typename std::underlying_type<COMPUTE_IMAGE_TYPE>::type)e1);
+}
+__attribute__((always_inline, used)) static constexpr COMPUTE_IMAGE_TYPE operator&(const COMPUTE_IMAGE_TYPE& e0,
+																			 const COMPUTE_IMAGE_TYPE& e1) {
+	return (COMPUTE_IMAGE_TYPE)((typename std::underlying_type<COMPUTE_IMAGE_TYPE>::type)e0 &
+								(typename std::underlying_type<COMPUTE_IMAGE_TYPE>::type)e1);
+}
+template <COMPUTE_IMAGE_TYPE flag, typename int_type = typename std::underlying_type<COMPUTE_IMAGE_TYPE>::type>
+__attribute__((always_inline, used)) static constexpr bool has_flag(const COMPUTE_IMAGE_TYPE& enum_object) {
+	return ((int_type(flag) & int_type(enum_object)) == int_type(flag));
+}
+
+namespace {
+	// CUDAFirst
+	struct CUDAFirst : public FunctionPass, InstVisitor<CUDAFirst> {
+		friend class InstVisitor<CUDAFirst>;
+		
+		static char ID; // Pass identification, replacement for typeid
+		
+		std::shared_ptr<llvm::IRBuilder<>> builder;
+		
+		Module* M { nullptr };
+		LLVMContext* ctx { nullptr };
+		Function* func { nullptr };
+		Instruction* alloca_insert { nullptr };
+		bool was_modified { false };
+		
+		CUDAFirst() : FunctionPass(ID) {
+			initializeCUDAFirstPass(*PassRegistry::getPassRegistry());
+		}
+		
+		bool runOnFunction(Function &F) override {
+			// exit if empty function
+			if(F.empty()) return false;
+			
+			// reset
+			M = F.getParent();
+			ctx = &M->getContext();
+			func = &F;
+			builder = std::make_shared<llvm::IRBuilder<>>(*ctx);
+			was_modified = false;
+			
+			// visit everything in this function
+			DBG(errs() << "in func: "; errs().write_escaped(F.getName()) << '\n';)
+			visit(F);
+			
+			return was_modified;
+		}
+		
+		// InstVisitor overrides...
+		using InstVisitor<CUDAFirst>::visit;
+		void visit(Instruction& I) {
+			InstVisitor<CUDAFirst>::visit(I);
+		}
+		
+		//
+		void visitCallInst(CallInst &I) {
+			const auto func = I.getCalledFunction();
+			if(!func) return;
+			
+			const auto func_name = func->getName();
+			if(func_name.startswith("floor.read_image.") ||
+			   func_name.startswith("floor.write_image.")) {
+				handle_image(I, func_name);
+			}
+		}
+		
+		void handle_image(CallInst& I, const StringRef& func_name) {
+			CallSite CS { &I };
+			builder->SetInsertPoint(&I);
+			
+			// check + get arguments
+			if(CS.arg_size() != 5) {
+				ctx->emitError(&I, func_name + ": invalid argument count (expected 5)");
+				return;
+			}
+			
+			// -> tex/surf handle
+			const auto img_handle_arg = CS.getArgument(0);
+			if(!img_handle_arg->getType()->isIntegerTy()) {
+				ctx->emitError(&I, "invalid image handle type (must be integer)");
+				return;
+			}
+			
+			// -> type enum
+			const auto image_type_arg = cast<ConstantInt>(CS.getArgument(1));
+			if(!image_type_arg) {
+				ctx->emitError(&I, "image type argument must be a constant value");
+				return;
+			}
+			if(!image_type_arg->getType()->isIntegerTy()) {
+				ctx->emitError(&I, "invalid image-type type (must be enum/integer)");
+				return;
+			}
+			const uint32_t image_channel_count = ((uint32_t(image_type_arg->getZExtValue()) &
+												   uint32_t(COMPUTE_IMAGE_TYPE::__CHANNELS_MASK)) >>
+												  uint32_t(COMPUTE_IMAGE_TYPE::__CHANNELS_SHIFT)) + 1u;
+			const auto full_image_type = COMPUTE_IMAGE_TYPE(image_type_arg->getZExtValue());
+			const COMPUTE_IMAGE_TYPE image_type = full_image_type & COMPUTE_IMAGE_TYPE::BASE_TYPE_MASK;
+			const COMPUTE_IMAGE_TYPE format_type = full_image_type & COMPUTE_IMAGE_TYPE::__FORMAT_MASK;
+			const bool is_normalized = has_flag<COMPUTE_IMAGE_TYPE::FLAG_NORMALIZED>(full_image_type);
+			
+			// check if format is supported
+			switch(format_type) {
+				case COMPUTE_IMAGE_TYPE::FORMAT_8:
+				case COMPUTE_IMAGE_TYPE::FORMAT_16:
+				case COMPUTE_IMAGE_TYPE::FORMAT_24: // as 32-bit
+				case COMPUTE_IMAGE_TYPE::FORMAT_32:
+				case COMPUTE_IMAGE_TYPE::FORMAT_32_8: // for depth+stencil
+					break;
+				default:
+					// all else: nope
+					ctx->emitError(&I, "unsupported image format (must be 8-bit, 16-bit, 24-bit or 32-bit per channel)");
+					return;
+			}
+			
+			// -> coord
+			const auto coord_arg = CS.getArgument(2);
+			const auto coord_arg_type = coord_arg->getType();
+			if(!(coord_arg_type->isVectorTy() && (coord_arg_type->getVectorElementType()->isFloatTy() ||
+												  coord_arg_type->getVectorElementType()->isIntegerTy()))) {
+				ctx->emitError(&I, "invalid image coordinate type");
+				return;
+			}
+			
+			// -> layer
+			const auto layer_arg = CS.getArgument(3);
+			if(!layer_arg->getType()->isIntegerTy()) {
+				ctx->emitError(&I, "invalid image layer index type (must be integer)");
+				return;
+			}
+			
+			if(func_name.startswith("floor.read_image.")) {
+				// -> sample
+				const auto sample_arg = CS.getArgument(4);
+				if(!sample_arg->getType()->isIntegerTy()) {
+					ctx->emitError(&I, "invalid image sample index type (must be integer)");
+					return;
+				}
+				handle_read_image(I, CS, func_name,
+								  img_handle_arg, image_type, coord_arg, coord_arg_type,
+								  layer_arg, sample_arg);
+			}
+			else {
+				// -> data
+				const auto data_arg = CS.getArgument(4);
+				const auto data_type = data_arg->getType();
+				if(!data_type->isVectorTy() ||
+				   data_type->getVectorNumElements() != 4) {
+					ctx->emitError(&I, "invalid image data type (must be 4-component vector)");
+					return;
+				}
+				if(!data_type->getVectorElementType()->isFloatTy() &&
+				   !data_type->getVectorElementType()->isIntegerTy()) {
+					ctx->emitError(&I, "invalid image data type (must be a float or integer vector)");
+					return;
+				}
+				handle_write_image(I, CS, func_name,
+								   img_handle_arg, image_type, format_type, is_normalized, image_channel_count,
+								   coord_arg, coord_arg_type,
+								   layer_arg, data_arg);
+			}
+		}
+		
+		void handle_read_image(CallInst& I, const CallSite& CS, const StringRef& func_name,
+							   llvm::Value* img_handle_arg,
+							   const COMPUTE_IMAGE_TYPE& image_type,
+							   llvm::Value* coord_arg,
+							   llvm::Type* coord_arg_type,
+							   llvm::Value* layer_arg,
+							   llvm::Value* sample_arg) {
+			SmallVector<llvm::Type*, 16> asm_arg_types;
+			SmallVector<llvm::Value*, 16> asm_args;
+			std::string constraints_str = "";
+			
+			// -> return data
+			std::string dtype;
+			llvm::Type* ret_type, *ret_vec_type;
+			if(func_name == "floor.read_image.float") {
+				dtype = "f32";
+				constraints_str = "=f,=f,=f,=f";
+				ret_type = llvm::StructType::get(*ctx, std::vector<llvm::Type*> {{
+					llvm::Type::getFloatTy(*ctx),
+					llvm::Type::getFloatTy(*ctx),
+					llvm::Type::getFloatTy(*ctx),
+					llvm::Type::getFloatTy(*ctx)
+				}});
+				ret_vec_type = llvm::VectorType::get(llvm::Type::getFloatTy(*ctx), 4);
+			}
+			else if(func_name == "floor.read_image.int") {
+				dtype = "s32";
+				constraints_str = "=r,=r,=r,=r";
+				ret_type = llvm::StructType::get(*ctx, std::vector<llvm::Type*> {{
+					llvm::Type::getInt32Ty(*ctx),
+					llvm::Type::getInt32Ty(*ctx),
+					llvm::Type::getInt32Ty(*ctx),
+					llvm::Type::getInt32Ty(*ctx)
+				}});
+				ret_vec_type = llvm::VectorType::get(llvm::Type::getInt32Ty(*ctx), 4);
+			}
+			else if(func_name == "floor.read_image.uint") {
+				dtype = "u32";
+				constraints_str = "=r,=r,=r,=r";
+				ret_type = llvm::StructType::get(*ctx, std::vector<llvm::Type*> {{
+					llvm::Type::getInt32Ty(*ctx),
+					llvm::Type::getInt32Ty(*ctx),
+					llvm::Type::getInt32Ty(*ctx),
+					llvm::Type::getInt32Ty(*ctx)
+				}});
+				ret_vec_type = llvm::VectorType::get(llvm::Type::getInt32Ty(*ctx), 4);
+			}
+			// unknown -> ignore
+			else return;
+			
+			constraints_str += ",l"; // u64 tex handle
+			asm_arg_types.push_back(llvm::Type::getInt64Ty(*ctx));
+			asm_args.push_back(img_handle_arg);
+			
+			// -> geom
+			std::string geom; // .1d, .2d, .3d, .a1d, .a2d, .cube, .acube, .2dms, .a2dms
+			bool is_array = false, is_msaa = false;
+			switch(image_type) {
+				case COMPUTE_IMAGE_TYPE::IMAGE_1D:					geom = "1d"; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_1D_ARRAY:			geom = "a1d"; is_array = true; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_1D_BUFFER:			geom = "1d"; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_DEPTH:
+				case COMPUTE_IMAGE_TYPE::IMAGE_DEPTH_STENCIL:
+				case COMPUTE_IMAGE_TYPE::IMAGE_2D:					geom = "2d"; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_DEPTH_ARRAY:
+				case COMPUTE_IMAGE_TYPE::IMAGE_2D_ARRAY:			geom = "a2d"; is_array = true; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_DEPTH_MSAA:
+				case COMPUTE_IMAGE_TYPE::IMAGE_2D_MSAA:				geom = "2dms"; is_msaa = true; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_DEPTH_MSAA_ARRAY:
+				case COMPUTE_IMAGE_TYPE::IMAGE_2D_MSAA_ARRAY:		geom = "a2dms"; is_array = true; is_msaa = true; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_3D:					geom = "3d"; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_DEPTH_CUBE:
+				case COMPUTE_IMAGE_TYPE::IMAGE_CUBE:				geom = "cube"; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_CUBE_ARRAY:			geom = "acube"; is_array = true; break;
+				default:
+					ctx->emitError(&I, "unknown or incorrect image type");
+					return;
+			}
+			
+			// -> coords
+			auto coord_vec_type = cast<VectorType>(coord_arg_type);
+			if(!coord_vec_type) {
+				ctx->emitError(&I, "invalid image coordinate argument (cast to vector failed)");
+				return;
+			}
+			
+			const auto coord_type = coord_vec_type->getElementType();
+			if(is_msaa && !coord_type->isIntegerTy()) {
+				ctx->emitError(&I, "coordinate type must be integer for msaa images");
+				return;
+			}
+			if((image_type == COMPUTE_IMAGE_TYPE::IMAGE_CUBE ||
+				image_type == COMPUTE_IMAGE_TYPE::IMAGE_CUBE_ARRAY ||
+				image_type == COMPUTE_IMAGE_TYPE::IMAGE_DEPTH_CUBE) && !coord_type->isFloatTy()) {
+				ctx->emitError(&I, "coordinate type must be float for cube images");
+				return;
+			}
+			
+			const auto vec_elems = coord_vec_type->getVectorNumElements();
+			std::string ctype = (coord_type->isFloatTy() ? "f32" : "s32");
+			std::string coords_placeholders;
+			const std::string coord_type_str = (coord_type->isFloatTy() ? "f" : "r");
+			uint32_t coord_start_idx = 5;
+			if(is_msaa) {
+				asm_arg_types.push_back(sample_arg->getType());
+				asm_args.push_back(sample_arg);
+				constraints_str += ",r";
+				coords_placeholders += " $";
+				coords_placeholders += std::to_string(coord_start_idx);
+				++coord_start_idx;
+			}
+			if(is_array) {
+				asm_arg_types.push_back(layer_arg->getType());
+				asm_args.push_back(layer_arg);
+				constraints_str += ",r";
+				coords_placeholders += (!is_msaa ? " $" : ", $");
+				coords_placeholders += std::to_string(coord_start_idx);
+				++coord_start_idx;
+			}
+			for(uint32_t i = 0; i < vec_elems; ++i) {
+				asm_arg_types.push_back(coord_type);
+				asm_args.push_back(builder->CreateExtractElement(coord_arg, builder->getInt32(i)));
+				constraints_str += "," + coord_type_str;
+				coords_placeholders += (i == 0 && coord_start_idx == 5 ? " $" : ", $");
+				coords_placeholders += std::to_string(coord_start_idx + i);
+			}
+			
+			if(vec_elems == 3) {
+				coords_placeholders += (coord_type->isFloatTy() ? ", 0.0" : ", 0"); // TODO: check this
+			}
+			
+			// -> build asm string
+			std::string asm_str = "tex." + geom + ".v4." + dtype + "." + ctype;
+			asm_str += " { $0, $1, $2, $3 },";
+			asm_str += " [$4, {" + coords_placeholders + " }];";
+			
+			const auto asm_func_type = FunctionType::get(ret_type, asm_arg_types, false);
+			auto asm_func = InlineAsm::get(asm_func_type, asm_str, constraints_str, false /* non-volatile */);
+			auto asm_call = builder->CreateCall(asm_func, asm_args);
+			asm_call->setDebugLoc(I.getDebugLoc()); // keep debug loc
+			
+			//
+			llvm::Value* dst_vec = UndefValue::get(ret_vec_type);
+			for(uint32_t i = 0; i < 4; ++i) {
+				auto scalar = builder->CreateExtractValue(asm_call, i);
+				dst_vec = builder->CreateInsertElement(dst_vec, scalar, builder->getInt32(i));
+			}
+			
+			//
+			was_modified = true;
+			I.replaceAllUsesWith(dst_vec);
+			I.eraseFromParent();
+		}
+		
+		void handle_write_image(CallInst& I, const CallSite& CS, const StringRef& func_name,
+								llvm::Value* img_handle_arg,
+								const COMPUTE_IMAGE_TYPE& image_type,
+								const COMPUTE_IMAGE_TYPE& format_type,
+								const bool& is_normalized,
+								const uint32_t& image_channel_count,
+								llvm::Value* coord_arg,
+								llvm::Type* coord_arg_type,
+								llvm::Value* layer_arg,
+								llvm::Value* data_arg) {
+			SmallVector<llvm::Type*, 16> asm_arg_types;
+			SmallVector<llvm::Value*, 16> asm_args;
+			
+			// more arg checking
+			auto coord_vec_type = cast<VectorType>(coord_arg_type);
+			if(!coord_vec_type) {
+				ctx->emitError(&I, "invalid image coordinate argument (cast to vector failed)");
+				return;
+			}
+			
+			const auto coord_type = coord_vec_type->getElementType();
+			if(!coord_type->isIntegerTy()) {
+				ctx->emitError(&I, "coordinate type must be integer");
+				return;
+			}
+			
+			if(func_name != "floor.write_image.float" &&
+			   func_name != "floor.write_image.int" &&
+			   func_name != "floor.write_image.uint") {
+				return; // unknown -> ignore
+			}
+			
+			//
+			std::string constraints_str = "l"; // u64 surf handle
+			asm_arg_types.push_back(llvm::Type::getInt64Ty(*ctx));
+			asm_args.push_back(img_handle_arg);
+			
+			// -> geom
+			std::string geom; // .1d, .2d, .3d, .a1d, .a2d
+			bool is_array = false;
+			switch(image_type) {
+				case COMPUTE_IMAGE_TYPE::IMAGE_1D:					geom = "1d"; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_1D_ARRAY:			geom = "a1d"; is_array = true; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_1D_BUFFER:			geom = "1d"; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_DEPTH:
+				case COMPUTE_IMAGE_TYPE::IMAGE_DEPTH_STENCIL:
+				case COMPUTE_IMAGE_TYPE::IMAGE_2D:					geom = "2d"; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_DEPTH_ARRAY:
+				case COMPUTE_IMAGE_TYPE::IMAGE_2D_ARRAY:			geom = "a2d"; is_array = true; break;
+				case COMPUTE_IMAGE_TYPE::IMAGE_3D:					geom = "3d"; break;
+				// cube and msaa formats are not writable by cuda/ptx
+				case COMPUTE_IMAGE_TYPE::IMAGE_DEPTH_MSAA:
+				case COMPUTE_IMAGE_TYPE::IMAGE_2D_MSAA:
+				case COMPUTE_IMAGE_TYPE::IMAGE_DEPTH_MSAA_ARRAY:
+				case COMPUTE_IMAGE_TYPE::IMAGE_2D_MSAA_ARRAY:
+				case COMPUTE_IMAGE_TYPE::IMAGE_DEPTH_CUBE:
+				case COMPUTE_IMAGE_TYPE::IMAGE_CUBE:
+				case COMPUTE_IMAGE_TYPE::IMAGE_CUBE_ARRAY:
+					ctx->emitError(&I, "invalid image type - type is not writable");
+					return;
+				default:
+					ctx->emitError(&I, "unknown or incorrect image type");
+					return;
+			}
+			
+			// -> coords
+			const auto vec_elems = coord_vec_type->getVectorNumElements();
+			std::string coords_placeholders;
+			static const uint32_t coord_start_idx = 1;
+			uint32_t coord_idx = 0;
+			size_t x_coord_idx = 0;
+			if(is_array) {
+				asm_arg_types.push_back(layer_arg->getType());
+				asm_args.push_back(layer_arg);
+				constraints_str += ",r";
+				coords_placeholders += " $";
+				coords_placeholders += std::to_string(coord_idx++);
+			}
+			for(uint32_t i = 0; i < vec_elems; ++i) {
+				asm_arg_types.push_back(coord_type);
+				auto coord_elem = builder->CreateExtractElement(coord_arg, builder->getInt32(i));
+				if(i == 0) {
+					x_coord_idx = asm_args.size();
+				}
+				asm_args.push_back(coord_elem);
+				constraints_str += ",r";
+				coords_placeholders += (coord_idx == 0 ? " $" : ", $");
+				coords_placeholders += std::to_string(coord_start_idx + coord_idx++);
+			}
+			
+			if(vec_elems == 3) {
+				coords_placeholders += ", 0"; // TODO: check this
+			}
+			
+			// -> data
+			const auto write_channel_count = (image_channel_count == 3 ? 4 : image_channel_count);
+			std::array<llvm::Value*, 4> data_args {{
+				builder->CreateExtractElement(data_arg, builder->getInt32(0)),
+				builder->CreateExtractElement(data_arg, builder->getInt32(1)),
+				builder->CreateExtractElement(data_arg, builder->getInt32(2)),
+				builder->CreateExtractElement(data_arg, builder->getInt32(3))
+			}};
+			
+			std::string dtype, rtype;
+			const bool is_signed_int = ((image_type & COMPUTE_IMAGE_TYPE::__DATA_TYPE_MASK) == COMPUTE_IMAGE_TYPE::INT);
+			const bool is_float = ((image_type & COMPUTE_IMAGE_TYPE::__DATA_TYPE_MASK) == COMPUTE_IMAGE_TYPE::FLOAT);
+			if(is_normalized) {
+				// need to normalize 32-bit float -> 8-bit or 16-bit unsigned/signed int
+				if(format_type != COMPUTE_IMAGE_TYPE::FORMAT_8 && format_type != COMPUTE_IMAGE_TYPE::FORMAT_16) {
+					ctx->emitError(&I, "invalid normalized write format (expected 8-bit or 16-bit dst format");
+					return;
+				}
+				
+				bool is_8_bit = true;
+				if(format_type == COMPUTE_IMAGE_TYPE::FORMAT_8) {
+					dtype = "b8";
+				}
+				else {
+					dtype = "b16";
+					is_8_bit = false;
+				}
+				rtype = "h"; // can't go lower than 16-bit
+				
+				for(uint32_t i = 0; i < write_channel_count; ++i) {
+					data_args[i] = builder->CreateFMul(data_args[i],
+													   ConstantFP::get(builder->getFloatTy(),
+																	   is_signed_int ?
+																	   (is_8_bit ? 127.0 : 32767.0) :
+																	   (is_8_bit ? 255.0 : 65535.0)));
+					data_args[i] = builder->CreateFPToUI(data_args[i],
+														 is_8_bit ? builder->getInt8Ty() : builder->getInt16Ty());
+				}
+			}
+			else {
+				switch(format_type) {
+					case COMPUTE_IMAGE_TYPE::FORMAT_8:
+						dtype = "b8";
+						rtype = "h"; // can't go lower than 16-bit
+						break;
+					case COMPUTE_IMAGE_TYPE::FORMAT_16:
+						dtype = "b16";
+						rtype = (is_float ? "f" : "h");
+						break;
+					case COMPUTE_IMAGE_TYPE::FORMAT_24:
+					case COMPUTE_IMAGE_TYPE::FORMAT_32_8:
+					case COMPUTE_IMAGE_TYPE::FORMAT_32:
+						dtype = "b32";
+						rtype = (is_float ? "f" : "r");
+						break;
+					default:
+						ctx->emitError(&I, "invalid write format");
+						return;
+				}
+				
+				// need to trunc 32-bit data to 16-bit (for 8-bit/16-bit int/uint writes)
+				if(rtype == "h") {
+					for(uint32_t i = 0; i < write_channel_count; ++i) {
+						builder->CreateTrunc(data_args[i], builder->getInt16Ty());
+					}
+				}
+			}
+			
+			// we know the written binary data size now -> update x coordinate offset
+			asm_args[x_coord_idx] = builder->CreateMul(asm_args[x_coord_idx],
+													   builder->getInt32(write_channel_count *
+																		 (dtype == "b16" ? 2 :
+																		  (dtype == "b32" ? 4 : 1 /* b8 */))));
+			
+			std::string data_placeholders;
+			uint32_t data_idx = coord_start_idx + coord_idx;
+			for(uint32_t i = 0; i < write_channel_count; ++i) {
+				asm_arg_types.push_back(data_args[i]->getType());
+				asm_args.push_back(data_args[i]);
+				constraints_str += "," + rtype;
+				data_placeholders += (i == 0 ? " $" : ", $");
+				data_placeholders += std::to_string(data_idx++);
+			}
+			
+			// -> build asm string
+			std::string asm_str = "sust.b." + geom + ".";
+			asm_str += (image_channel_count == 1 ? "" : (image_channel_count == 2 ? "v2." : "v4."));
+			asm_str += dtype + ".";
+			asm_str += "zero"; // ignore out-of-bounds writes (TODO: might want to trap in debug mode?)
+			
+			asm_str += " [$0, {" + coords_placeholders + " }],";
+			asm_str += " {" + data_placeholders + " };";
+			
+			const auto asm_func_type = FunctionType::get(builder->getVoidTy(), asm_arg_types, false);
+			auto asm_func = InlineAsm::get(asm_func_type, asm_str, constraints_str, true /* volatile */);
+			auto asm_call = builder->CreateCall(asm_func, asm_args);
+			asm_call->setDebugLoc(I.getDebugLoc()); // keep debug loc
+			
+			//
+			was_modified = true;
+			I.replaceAllUsesWith(asm_call);
+			I.eraseFromParent();
+		}
+		
+	};
+}
+
+char CUDAFirst::ID = 0;
+INITIALIZE_PASS_BEGIN(CUDAFirst, "CUDAFirst", "CUDAFirst Pass", false, false)
+INITIALIZE_PASS_END(CUDAFirst, "CUDAFirst", "CUDAFirst Pass", false, false)
+
+FunctionPass *llvm::createCUDAFirstPass() {
+	return new CUDAFirst();
+}
diff --git a/lib/Transforms/Scalar/MetalFinal.cpp b/lib/Transforms/Scalar/MetalFinal.cpp
new file mode 100644
index 0000000..0736e59
--- /dev/null
+++ b/lib/Transforms/Scalar/MetalFinal.cpp
@@ -0,0 +1,182 @@
+//===- MetalFinal.cpp - Metal final pass ----------------------------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file fixes certain post-codegen issues.
+//
+//===----------------------------------------------------------------------===//
+
+#include "llvm/ADT/Statistic.h"
+#include "llvm/ADT/STLExtras.h"
+#include "llvm/ADT/SetVector.h"
+#include "llvm/ADT/SmallPtrSet.h"
+#include "llvm/ADT/SmallVector.h"
+#include "llvm/ADT/StringExtras.h"
+#include "llvm/Analysis/AliasAnalysis.h"
+#include "llvm/IR/CFG.h"
+#include "llvm/IR/CallSite.h"
+#include "llvm/IR/CallingConv.h"
+#include "llvm/IR/ConstantRange.h"
+#include "llvm/IR/Constants.h"
+#include "llvm/IR/DataLayout.h"
+#include "llvm/IR/DebugInfo.h"
+#include "llvm/IR/DerivedTypes.h"
+#include "llvm/IR/Dominators.h"
+#include "llvm/IR/Function.h"
+#include "llvm/IR/InlineAsm.h"
+#include "llvm/IR/InstIterator.h"
+#include "llvm/IR/InstVisitor.h"
+#include "llvm/IR/IntrinsicInst.h"
+#include "llvm/IR/IRBuilder.h"
+#include "llvm/IR/LLVMContext.h"
+#include "llvm/IR/Metadata.h"
+#include "llvm/IR/Module.h"
+#include "llvm/IR/LegacyPassManager.h"
+#include "llvm/Pass.h"
+#include "llvm/Support/CommandLine.h"
+#include "llvm/Support/Debug.h"
+#include "llvm/Support/ErrorHandling.h"
+#include "llvm/Support/raw_ostream.h"
+#include "llvm/Transforms/IPO/PassManagerBuilder.h"
+#include "llvm/Transforms/IPO.h"
+#include "llvm/Transforms/Scalar.h"
+#include <algorithm>
+#include <cstdarg>
+#include <memory>
+#include <cxxabi.h>
+using namespace llvm;
+
+#define DEBUG_TYPE "MetalFinal"
+
+#if 1
+#define DBG(x)
+#else
+#define DBG(x) x
+#endif
+
+namespace {
+	// MetalFinal
+	struct MetalFinal : public FunctionPass, InstVisitor<MetalFinal> {
+		friend class InstVisitor<MetalFinal>;
+		
+		static char ID; // Pass identification, replacement for typeid
+		
+		std::shared_ptr<llvm::IRBuilder<>> builder;
+		
+		Module* M { nullptr };
+		LLVMContext* ctx { nullptr };
+		Function* func { nullptr };
+		Instruction* alloca_insert { nullptr };
+		
+		// added function args
+		Argument* global_id { nullptr };
+		Argument* global_size { nullptr };
+		Argument* local_id { nullptr };
+		Argument* local_size { nullptr };
+		Argument* group_id { nullptr };
+		Argument* group_size { nullptr };
+		
+		MetalFinal() : FunctionPass(ID) {
+			initializeMetalFinalPass(*PassRegistry::getPassRegistry());
+		}
+		
+		bool runOnFunction(Function &F) override {
+			// exit if empty function
+			if(F.empty()) return false;
+			
+			// if not a kernel function, return (for now)
+			if(!F.hasFnAttribute("compute_kernel")) return false;
+			
+			//
+			M = F.getParent();
+			ctx = &M->getContext();
+			func = &F;
+			builder = std::make_shared<llvm::IRBuilder<>>(*ctx);
+			
+			// add args
+			const auto vec_type = llvm::VectorType::get(llvm::Type::getInt32Ty(*ctx), 3);
+			global_id = new llvm::Argument(vec_type, "__metal__global_id__", &F);
+			global_size = new llvm::Argument(vec_type, "__metal__global_size__", &F);
+			local_id = new llvm::Argument(vec_type, "__metal__local_id__", &F);
+			local_size = new llvm::Argument(vec_type, "__metal__local_size__", &F);
+			group_id = new llvm::Argument(vec_type, "__metal__group_id__", &F);
+			group_size = new llvm::Argument(vec_type, "__metal__group_size__", &F);
+			
+			// visit everything in this function
+			DBG(errs() << "in func: "; errs().write_escaped(F.getName()) << '\n';)
+			visit(F);
+			
+			// always modified
+			return true;
+		}
+		
+		// InstVisitor overrides...
+		using InstVisitor<MetalFinal>::visit;
+		void visit(Instruction& I) {
+			InstVisitor<MetalFinal>::visit(I);
+		}
+		
+		//
+		void visitCallInst(CallInst &I) {
+			const auto func_name = I.getCalledFunction()->getName();
+			if(!func_name.startswith("floor.")) return;
+			
+			CallSite CS { &I };
+			builder->SetInsertPoint(&I);
+			
+			// figure out which one we need
+			Argument* id;
+			if(func_name == "floor.get_global_id.i32") {
+				id = global_id;
+			}
+			else if(func_name == "floor.get_global_size.i32") {
+				id = global_size;
+			}
+			else if(func_name == "floor.get_local_id.i32") {
+				id = local_id;
+			}
+			else if(func_name == "floor.get_local_size.i32") {
+				id = local_size;
+			}
+			else if(func_name == "floor.get_group_id.i32") {
+				id = group_id;
+			}
+			else if(func_name == "floor.get_group_size.i32") {
+				id = group_size;
+			}
+			else if(func_name == "floor.get_work_dim.i32") {
+				// special case
+				// => group_size.z == 1 ? (group_size.y == 1 ? 1 : 2) : 3
+				const auto size_z = builder->CreateExtractElement(group_size, builder->getInt32(2));
+				const auto size_y = builder->CreateExtractElement(group_size, builder->getInt32(1));
+				const auto cmp_z = builder->CreateICmp(ICmpInst::ICMP_EQ, size_z, builder->getInt32(1));
+				const auto cmp_y = builder->CreateICmp(ICmpInst::ICMP_EQ, size_y, builder->getInt32(1));
+				const auto sel_x_or_y = builder->CreateSelect(cmp_y, builder->getInt32(1), builder->getInt32(2));
+				const auto sel_xy_or_z = builder->CreateSelect(cmp_z, sel_x_or_y, builder->getInt32(3));
+				I.replaceAllUsesWith(sel_xy_or_z);
+				I.eraseFromParent();
+				return;
+			}
+			// unknown -> ignore for now
+			else return;
+			
+			// replace call with vector load / elem extraction from the appropriate vector
+			I.replaceAllUsesWith(builder->CreateExtractElement(id, CS.getArgument(0)));
+			I.eraseFromParent();
+		}
+		
+	};
+}
+
+char MetalFinal::ID = 0;
+INITIALIZE_PASS_BEGIN(MetalFinal, "MetalFinal", "MetalFinal Pass", false, false)
+INITIALIZE_PASS_END(MetalFinal, "MetalFinal", "MetalFinal Pass", false, false)
+
+FunctionPass *llvm::createMetalFinalPass() {
+	return new MetalFinal();
+}
diff --git a/lib/Transforms/Scalar/SPIRFinal.cpp b/lib/Transforms/Scalar/SPIRFinal.cpp
new file mode 100644
index 0000000..c1c8108
--- /dev/null
+++ b/lib/Transforms/Scalar/SPIRFinal.cpp
@@ -0,0 +1,248 @@
+//===- SPIRFinal.cpp - OpenCL/SPIR fixes ----------------------------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file tries to fix the LLVM IR so that it is SPIR-conformant.
+//
+//===----------------------------------------------------------------------===//
+
+#include "llvm/ADT/Statistic.h"
+#include "llvm/ADT/STLExtras.h"
+#include "llvm/ADT/SetVector.h"
+#include "llvm/ADT/SmallPtrSet.h"
+#include "llvm/ADT/SmallVector.h"
+#include "llvm/ADT/StringExtras.h"
+#include "llvm/Analysis/AliasAnalysis.h"
+#include "llvm/IR/CFG.h"
+#include "llvm/IR/CallSite.h"
+#include "llvm/IR/CallingConv.h"
+#include "llvm/IR/ConstantRange.h"
+#include "llvm/IR/Constants.h"
+#include "llvm/IR/DataLayout.h"
+#include "llvm/IR/DebugInfo.h"
+#include "llvm/IR/DerivedTypes.h"
+#include "llvm/IR/Dominators.h"
+#include "llvm/IR/Function.h"
+#include "llvm/IR/InlineAsm.h"
+#include "llvm/IR/InstIterator.h"
+#include "llvm/IR/InstVisitor.h"
+#include "llvm/IR/IntrinsicInst.h"
+#include "llvm/IR/IRBuilder.h"
+#include "llvm/IR/LLVMContext.h"
+#include "llvm/IR/Metadata.h"
+#include "llvm/IR/Module.h"
+#include "llvm/IR/LegacyPassManager.h"
+#include "llvm/Pass.h"
+#include "llvm/Support/CommandLine.h"
+#include "llvm/Support/Debug.h"
+#include "llvm/Support/ErrorHandling.h"
+#include "llvm/Support/raw_ostream.h"
+#include "llvm/Transforms/IPO/PassManagerBuilder.h"
+#include "llvm/Transforms/IPO.h"
+#include "llvm/Transforms/Scalar.h"
+#include <algorithm>
+#include <cstdarg>
+#include <memory>
+#include <cxxabi.h>
+using namespace llvm;
+
+#define DEBUG_TYPE "SPIRFinal"
+
+#if 1
+#define DBG(x)
+#else
+#define DBG(x) x
+#endif
+
+namespace {
+	// SPIRFinal
+	struct SPIRFinal : public FunctionPass, InstVisitor<SPIRFinal> {
+		friend class InstVisitor<SPIRFinal>;
+		
+		static char ID; // Pass identification, replacement for typeid
+		
+		std::shared_ptr<llvm::IRBuilder<>> builder;
+		
+		Module* M { nullptr };
+		LLVMContext* ctx { nullptr };
+		Function* func { nullptr };
+		Instruction* alloca_insert { nullptr };
+		bool was_modified { false };
+		
+		SPIRFinal() : FunctionPass(ID) {
+			initializeSPIRFinalPass(*PassRegistry::getPassRegistry());
+		}
+		
+		bool runOnFunction(Function &F) override {
+			// exit if empty function
+			if (F.empty()) return false;
+			
+			//
+			M = F.getParent();
+			ctx = &M->getContext();
+			func = &F;
+			builder = std::make_shared<llvm::IRBuilder<>>(*ctx);
+			
+			// visit everything in this function
+			was_modified = false; // reset every time
+			DBG(errs() << "in func: "; errs().write_escaped(F.getName()) << '\n';)
+			visit(F);
+			if(was_modified) {
+				DBG(errs() << "!! modified function: ";)
+				DBG(errs().write_escaped(F.getName()) << '\n';)
+			}
+			return was_modified;
+		}
+		
+		// InstVisitor overrides...
+		using InstVisitor<SPIRFinal>::visit;
+		void visit(Instruction& I) {
+			InstVisitor<SPIRFinal>::visit(I);
+		}
+		
+		// SPIR only supports scalar conversion ops ->
+		// * scalarize source vector
+		// * call conversion op for each scalar
+		// * reassemble a vector from the converted scalars
+		// * replace all uses of the original vector
+		template <Instruction::CastOps cast_op>
+		__attribute__((always_inline))
+		void vec_to_scalar_ops(CastInst& I) {
+			if(!I.getType()->isVectorTy()) return;
+			
+			// start insertion before instruction
+			builder->SetInsertPoint(&I);
+			
+			// setup
+			auto* src_vec = I.getOperand(0);
+			const auto dim = src_vec->getType()->getVectorNumElements();
+			const auto si_type = I.getDestTy();
+			const auto si_scalar_type = si_type->getScalarType();
+			llvm::Value* dst_vec = UndefValue::get(si_type);
+			
+			// iterate over all vector components, emit a scalar instruction and insert into a new vector
+			for(uint32_t i = 0; i < dim; ++i) {
+				auto scalar = builder->CreateExtractElement(src_vec, builder->getInt32(i));
+				dst_vec = builder->CreateInsertElement(dst_vec,
+													   builder->CreateCast(cast_op, scalar, si_scalar_type),
+													   builder->getInt32(i));
+			}
+			
+			// finally, replace all uses with the new vector and remove the old vec instruction
+			I.replaceAllUsesWith(dst_vec);
+			I.eraseFromParent();
+			was_modified = true;
+		}
+		
+		void visitTruncInst(TruncInst &I) {
+			vec_to_scalar_ops<Instruction::Trunc>(I);
+		}
+		void visitZExtInst(ZExtInst &I) {
+			vec_to_scalar_ops<Instruction::ZExt>(I);
+		}
+		void visitSExtInst(SExtInst &I) {
+			vec_to_scalar_ops<Instruction::SExt>(I);
+		}
+		void visitFPTruncInst(FPTruncInst &I) {
+			vec_to_scalar_ops<Instruction::FPTrunc>(I);
+		}
+		void visitFPExtInst(FPExtInst &I) {
+			vec_to_scalar_ops<Instruction::FPExt>(I);
+		}
+		void visitFPToUIInst(FPToUIInst &I) {
+			vec_to_scalar_ops<Instruction::FPToUI>(I);
+		}
+		void visitFPToSIInst(FPToSIInst &I) {
+			vec_to_scalar_ops<Instruction::FPToSI>(I);
+		}
+		void visitUIToFPInst(UIToFPInst &I) {
+			vec_to_scalar_ops<Instruction::UIToFP>(I);
+		}
+		void visitSIToFPInst(SIToFPInst &I) {
+			vec_to_scalar_ops<Instruction::SIToFP>(I);
+		}
+		
+		// SPIR doesn't support LLVM lifetime intrinsics
+		// -> simply remove them
+		// TODO: should probably kill the global decl as well
+		void visitIntrinsicInst(IntrinsicInst &I) {
+			if (I.getIntrinsicID() == Intrinsic::lifetime_start ||
+				I.getIntrinsicID() == Intrinsic::lifetime_end) {
+				I.eraseFromParent();
+				was_modified = true;
+			}
+		}
+		
+		// "ashr" instructions may not be "exact"
+		void visitAShr(BinaryOperator& O) {
+			auto* ashr = cast<PossiblyExactOperator>(&O);
+			if(ashr && ashr->isExact()) {
+				// -> replace with a non-exact version
+				builder->SetInsertPoint(&O);
+				auto* new_ashr = builder->CreateAShr(O.getOperand(0), O.getOperand(1));
+				O.replaceAllUsesWith(new_ashr);
+				O.eraseFromParent();
+				was_modified = true;
+			}
+		}
+		
+		// unsupported LLVM IR instructions - fail on these
+		void visitIndirectBrInst(IndirectBrInst &I) {
+			ctx->emitError(&I, "indirect-br instruction is not supported by SPIR");
+		}
+		void visitInvokeInst(InvokeInst &I) {
+			ctx->emitError(&I, "invoke instruction is not supported by SPIR");
+		}
+		// NOTE: unwind no longer exists
+		void visitResumeInst(ResumeInst &I) {
+			ctx->emitError(&I, "resume instruction is not supported by SPIR");
+		}
+		void visitFenceInst(FenceInst &I) {
+			ctx->emitError(&I, "fence instruction is not supported by SPIR");
+		}
+		void visitAtomicCmpXchgInst(AtomicCmpXchgInst &I) {
+			ctx->emitError(&I, "atomic-cmp-xchg instruction is not supported by SPIR - use atomic_* function calls instead!");
+		}
+		void visitAtomicRMWInst(AtomicRMWInst &I) {
+			ctx->emitError(&I, "atomic-rmv instruction is not supported by SPIR - use atomic_* function calls instead!");
+		}
+		void visitVAArgInst(VAArgInst &I) {
+			ctx->emitError(&I, "va-arg instruction is not supported by SPIR");
+		}
+		void visitLandingPadInst(LandingPadInst &I) {
+			ctx->emitError(&I, "landing-pad instruction is not supported by SPIR");
+		}
+		
+		// calls to function pointers are not allowed
+		void visitCallInst(CallInst &I) {
+			if(I.getCalledFunction() == nullptr) {
+				ctx->emitError(&I, "indirect function call / call to function pointer is not supported by SPIR");
+			}
+		}
+		
+		// atomic load/store instructions are not allowed
+		void visitLoadInst(LoadInst &I) {
+			if(I.isAtomic()) {
+				ctx->emitError(&I, "atomic-load instruction is not supported by SPIR - use atomic_* function calls instead!");
+			}
+		}
+		void visitStoreInst(StoreInst &I) {
+			if(I.isAtomic()) {
+				ctx->emitError(&I, "atomic-store instruction is not supported by SPIR - use atomic_* function calls instead!");
+			}
+		}
+	};
+}
+
+char SPIRFinal::ID = 0;
+INITIALIZE_PASS_BEGIN(SPIRFinal, "SPIRFinal", "SPIRFinal Pass", false, false)
+INITIALIZE_PASS_END(SPIRFinal, "SPIRFinal", "SPIRFinal Pass", false, false)
+
+FunctionPass *llvm::createSPIRFinalPass() {
+	return new SPIRFinal();
+}
diff --git a/lib/Transforms/Scalar/Scalar.cpp b/lib/Transforms/Scalar/Scalar.cpp
index de724d4..6cbfb40 100644
--- a/lib/Transforms/Scalar/Scalar.cpp
+++ b/lib/Transforms/Scalar/Scalar.cpp
@@ -73,6 +73,26 @@ void LLVMInitializeScalarOpts(LLVMPassRegistryRef R) {
   initializeScalarOpts(*unwrap(R));
 }
 
+void LLVMAddAddressSpaceFixPass(LLVMPassManagerRef PM) {
+  unwrap(PM)->add(createAddressSpaceFixPass());
+}
+
+void LLVMAddCUDAFirstPass(LLVMPassManagerRef PM) {
+  unwrap(PM)->add(createCUDAFirstPass());
+}
+
+void LLVMAddCUDAFinalPass(LLVMPassManagerRef PM) {
+  unwrap(PM)->add(createCUDAFinalPass());
+}
+
+void LLVMAddMetalFinalPass(LLVMPassManagerRef PM) {
+  unwrap(PM)->add(createMetalFinalPass());
+}
+
+void LLVMAddSPIRFinalPass(LLVMPassManagerRef PM) {
+  unwrap(PM)->add(createSPIRFinalPass());
+}
+
 void LLVMAddAggressiveDCEPass(LLVMPassManagerRef PM) {
   unwrap(PM)->add(createAggressiveDCEPass());
 }
diff --git a/tools/clang/include/clang-c/Index.h b/tools/clang/include/clang-c/Index.h
index f69f567..e01cb6d 100644
--- a/tools/clang/include/clang-c/Index.h
+++ b/tools/clang/include/clang-c/Index.h
@@ -2822,6 +2822,9 @@ enum CXCallingConv {
   CXCallingConv_IntelOclBicc = 9,
   CXCallingConv_X86_64Win64 = 10,
   CXCallingConv_X86_64SysV = 11,
+  // 12 is CXCallingConv_X86VectorCall in later clang/llvm
+  CXCallingConv_SpirFunction = 13,
+  CXCallingConv_SpirKernel = 14,
 
   CXCallingConv_Invalid = 100,
   CXCallingConv_Unexposed = 200
diff --git a/tools/clang/include/clang/AST/ASTContext.h b/tools/clang/include/clang/AST/ASTContext.h
index 8134f6b..bfcd916 100644
--- a/tools/clang/include/clang/AST/ASTContext.h
+++ b/tools/clang/include/clang/AST/ASTContext.h
@@ -789,7 +789,8 @@ public:
   CanQualType ObjCBuiltinIdTy, ObjCBuiltinClassTy, ObjCBuiltinSelTy;
   CanQualType ObjCBuiltinBoolTy;
   CanQualType OCLImage1dTy, OCLImage1dArrayTy, OCLImage1dBufferTy;
-  CanQualType OCLImage2dTy, OCLImage2dArrayTy;
+  CanQualType OCLImage2dTy, OCLImage2dArrayTy, OCLImage2dDepthTy, OCLImage2dArrayDepthTy, OCLImage2dMSAATy, OCLImage2dArrayMSAATy, OCLImage2dMSAADepthTy, OCLImage2dArrayMSAADepthTy;
+  CanQualType OCLImageCubeTy, OCLImageCubeArrayTy, OCLImageCubeDepthTy, OCLImageCubeArrayDepthTy;
   CanQualType OCLImage3dTy;
   CanQualType OCLSamplerTy, OCLEventTy;
 
diff --git a/tools/clang/include/clang/AST/BuiltinTypes.def b/tools/clang/include/clang/AST/BuiltinTypes.def
index 488cace..a815eae 100644
--- a/tools/clang/include/clang/AST/BuiltinTypes.def
+++ b/tools/clang/include/clang/AST/BuiltinTypes.def
@@ -160,6 +160,16 @@ BUILTIN_TYPE(OCLImage1dArray, OCLImage1dArrayTy)
 BUILTIN_TYPE(OCLImage1dBuffer, OCLImage1dBufferTy)
 BUILTIN_TYPE(OCLImage2d, OCLImage2dTy)
 BUILTIN_TYPE(OCLImage2dArray, OCLImage2dArrayTy)
+BUILTIN_TYPE(OCLImage2dDepth, OCLImage2dDepthTy)
+BUILTIN_TYPE(OCLImage2dArrayDepth, OCLImage2dArrayDepthTy)
+BUILTIN_TYPE(OCLImage2dMSAA, OCLImage2dMSAATy)
+BUILTIN_TYPE(OCLImage2dArrayMSAA, OCLImage2dArrayMSAATy)
+BUILTIN_TYPE(OCLImage2dMSAADepth, OCLImage2dMSAADepthTy)
+BUILTIN_TYPE(OCLImage2dArrayMSAADepth, OCLImage2dArrayMSAADepthTy)
+BUILTIN_TYPE(OCLImageCube, OCLImageCubeTy)
+BUILTIN_TYPE(OCLImageCubeArray, OCLImageCubeArrayTy)
+BUILTIN_TYPE(OCLImageCubeDepth, OCLImageCubeDepthTy)
+BUILTIN_TYPE(OCLImageCubeArrayDepth, OCLImageCubeArrayDepthTy)
 BUILTIN_TYPE(OCLImage3d, OCLImage3dTy)
 
 // OpenCL sampler_t.
diff --git a/tools/clang/include/clang/AST/Type.h b/tools/clang/include/clang/AST/Type.h
index 09862e4..eed14f2 100644
--- a/tools/clang/include/clang/AST/Type.h
+++ b/tools/clang/include/clang/AST/Type.h
@@ -403,10 +403,10 @@ public:
   /// \brief Determines if these qualifiers compatibly include another set.
   /// Generally this answers the question of whether an object with the other
   /// qualifiers can be safely used as an object with these qualifiers.
-  bool compatiblyIncludes(Qualifiers other) const {
+  bool compatiblyIncludes(Qualifiers other, bool check_as = true) const {
     return
       // Address spaces must match exactly.
-      getAddressSpace() == other.getAddressSpace() &&
+      ((check_as && getAddressSpace() == other.getAddressSpace()) || !check_as) &&
       // ObjC GC qualifiers can match, be added, or be removed, but can't be
       // changed.
       (getObjCGCAttr() == other.getObjCGCAttr() ||
@@ -1575,10 +1575,22 @@ public:
   bool isImage1dBufferT() const;                // OpenCL image1d_buffer_t
   bool isImage2dT() const;                      // OpenCL image2d_t
   bool isImage2dArrayT() const;                 // OpenCL image2d_array_t
+  bool isImage2dDepthT() const;                 // OpenCL image2d_depth_t
+  bool isImage2dArrayDepthT() const;            // OpenCL image2d_array_depth_t
+  bool isImage2dMSAAT() const;                  // OpenCL image2d_msaa_t
+  bool isImage2dArrayMSAAT() const;             // OpenCL image2d_array_msaa_t
+  bool isImage2dMSAADepthT() const;             // OpenCL image2d_msaa_depth_t
+  bool isImage2dArrayMSAADepthT() const;        // OpenCL image2d_array_msaa_depth_t
+  bool isImageCubeT() const;                    // (not) OpenCL imagecube_t
+  bool isImageCubeArrayT() const;               // (not) OpenCL imagecube_array_t
+  bool isImageCubeDepthT() const;               // (not) OpenCL imagecube_depth_t
+  bool isImageCubeArrayDepthT() const;          // (not) OpenCL imagecube_array_depth_t
   bool isImage3dT() const;                      // OpenCL image3d_t
 
   bool isImageType() const;                     // Any OpenCL image type
 
+  bool isAggregateImageType() const;            // struct/class containing only image*_t members
+
   bool isSamplerT() const;                      // OpenCL sampler_t
   bool isEventT() const;                        // OpenCL event_t
 
@@ -4803,7 +4815,7 @@ inline FunctionType::ExtInfo getFunctionExtInfo(QualType t) {
 inline bool QualType::isMoreQualifiedThan(QualType other) const {
   Qualifiers myQuals = getQualifiers();
   Qualifiers otherQuals = other.getQualifiers();
-  return (myQuals != otherQuals && myQuals.compatiblyIncludes(otherQuals));
+  return (myQuals != otherQuals && myQuals.compatiblyIncludes(otherQuals, false));
 }
 
 /// isAtLeastAsQualifiedAs - Determine whether this type is at last
@@ -4811,7 +4823,7 @@ inline bool QualType::isMoreQualifiedThan(QualType other) const {
 /// int" is at least as qualified as "const int", "volatile int",
 /// "int", and "const volatile int".
 inline bool QualType::isAtLeastAsQualifiedAs(QualType other) const {
-  return getQualifiers().compatiblyIncludes(other.getQualifiers());
+  return getQualifiers().compatiblyIncludes(other.getQualifiers(), false);
 }
 
 /// getNonReferenceType - If Type is a reference type (e.g., const
@@ -5008,6 +5020,46 @@ inline bool Type::isImage2dArrayT() const {
   return isSpecificBuiltinType(BuiltinType::OCLImage2dArray);
 }
 
+inline bool Type::isImage2dDepthT() const {
+  return isSpecificBuiltinType(BuiltinType::OCLImage2dDepth);
+}
+
+inline bool Type::isImage2dArrayDepthT() const {
+  return isSpecificBuiltinType(BuiltinType::OCLImage2dArrayDepth);
+}
+
+inline bool Type::isImage2dMSAAT() const {
+  return isSpecificBuiltinType(BuiltinType::OCLImage2dMSAA);
+}
+
+inline bool Type::isImage2dArrayMSAAT() const {
+  return isSpecificBuiltinType(BuiltinType::OCLImage2dArrayMSAA);
+}
+
+inline bool Type::isImage2dMSAADepthT() const {
+  return isSpecificBuiltinType(BuiltinType::OCLImage2dMSAADepth);
+}
+
+inline bool Type::isImage2dArrayMSAADepthT() const {
+  return isSpecificBuiltinType(BuiltinType::OCLImage2dArrayMSAADepth);
+}
+
+inline bool Type::isImageCubeT() const {
+  return isSpecificBuiltinType(BuiltinType::OCLImageCube);
+}
+
+inline bool Type::isImageCubeArrayT() const {
+  return isSpecificBuiltinType(BuiltinType::OCLImageCubeArray);
+}
+
+inline bool Type::isImageCubeDepthT() const {
+  return isSpecificBuiltinType(BuiltinType::OCLImageCubeDepth);
+}
+
+inline bool Type::isImageCubeArrayDepthT() const {
+  return isSpecificBuiltinType(BuiltinType::OCLImageCubeArrayDepth);
+}
+
 inline bool Type::isImage3dT() const {
   return isSpecificBuiltinType(BuiltinType::OCLImage3d);
 }
@@ -5023,11 +5075,16 @@ inline bool Type::isEventT() const {
 inline bool Type::isImageType() const {
   return isImage3dT() ||
          isImage2dT() || isImage2dArrayT() ||
+         isImage2dDepthT() || isImage2dArrayDepthT() ||
+         isImage2dMSAAT() || isImage2dArrayMSAAT() ||
+         isImage2dMSAADepthT() || isImage2dArrayMSAADepthT() ||
+         isImageCubeT() || isImageCubeArrayT() ||
+         isImageCubeDepthT() || isImageCubeArrayDepthT() ||
          isImage1dT() || isImage1dArrayT() || isImage1dBufferT();
 }
 
 inline bool Type::isOpenCLSpecificType() const {
-  return isSamplerT() || isEventT() || isImageType();
+  return isSamplerT() || isEventT() || isImageType() || isAggregateImageType();
 }
 
 inline bool Type::isTemplateTypeParmType() const {
diff --git a/tools/clang/include/clang/Basic/Attr.td b/tools/clang/include/clang/Basic/Attr.td
index 704a375..0942477 100644
--- a/tools/clang/include/clang/Basic/Attr.td
+++ b/tools/clang/include/clang/Basic/Attr.td
@@ -354,6 +354,25 @@ def Aligned : InheritableAttr {
   let Documentation = [Undocumented];
 }
 
+def AlignValue : Attr {
+  let Spellings = [
+    // Unfortunately, this is semantically an assertion, not a
+    // directive (something else must ensure the alignment), so
+    // aligned_value is a probably a better name. We might want
+    // to add an aligned_value spelling in the future (and a
+    // corresponding C++ attribute), but this can be done later
+    // once we decide if we also want them to have
+    // slightly-different semantics than Intel's align_value.
+    GNU<"align_value">
+    // Intel's compiler on Windows also supports:
+    // , Declspec<"align_value">
+  ];
+  let Args = [ExprArgument<"Alignment">];
+  let Subjects = SubjectList<[Var, TypedefName], WarnDiag,
+                             "ExpectedVariableOrTypedef">;
+  let Documentation = [AlignValueDocs];
+}
+
 def AlignMac68k : InheritableAttr {
   // This attribute has no spellings as it is only ever created implicitly.
   let Spellings = [];
@@ -514,7 +533,7 @@ def Constructor : InheritableAttr {
 }
 
 def CUDAConstant : InheritableAttr {
-  let Spellings = [GNU<"constant">];
+  let Spellings = [GNU<"constant">, GNU<"cuda_constant">];
   let Subjects = SubjectList<[Var]>;
   let LangOpts = [CUDA];
   let Documentation = [Undocumented];
@@ -528,7 +547,7 @@ def CUDADevice : InheritableAttr {
 }
 
 def CUDAGlobal : InheritableAttr {
-  let Spellings = [GNU<"global">];
+  let Spellings = [GNU<"global">, GNU<"cuda_kernel">];
   let Subjects = SubjectList<[Function]>;
   let LangOpts = [CUDA];
   let Documentation = [Undocumented];
@@ -554,7 +573,7 @@ def CUDALaunchBounds : InheritableAttr {
 }
 
 def CUDAShared : InheritableAttr {
-  let Spellings = [GNU<"shared">];
+  let Spellings = [GNU<"shared">, GNU<"cuda_local">];
   let Subjects = SubjectList<[Var]>;
   let LangOpts = [CUDA];
   let Documentation = [Undocumented];
@@ -574,7 +593,7 @@ def CXX11NoReturn : InheritableAttr {
 }
 
 def OpenCLKernel : InheritableAttr {
-  let Spellings = [Keyword<"__kernel">, Keyword<"kernel">];
+  let Spellings = [Keyword<"__kernel">, GNU<"opencl_kernel">];
   let Subjects = SubjectList<[Function], ErrorDiag>;
   let Documentation = [Undocumented];
 }
@@ -582,36 +601,47 @@ def OpenCLKernel : InheritableAttr {
 // This attribute is both a type attribute, and a declaration attribute (for
 // parameter variables).
 def OpenCLImageAccess : Attr {
-  let Spellings = [Keyword<"__read_only">, Keyword<"read_only">,
-                   Keyword<"__write_only">, Keyword<"write_only">,
-                   Keyword<"__read_write">, Keyword<"read_write">];
-  let Subjects = SubjectList<[ParmVar], ErrorDiag>;
+  let Spellings = [Keyword<"__read_only">, GNU<"image_read_only">, CXX11<"","image_read_only">,
+                   Keyword<"__write_only">, GNU<"image_write_only">, CXX11<"","image_write_only">,
+                   Keyword<"__read_write">, GNU<"image_read_write">, CXX11<"","image_read_write">];
+  //let Subjects = SubjectList<[ParmVar], ErrorDiag>;
   let Accessors = [Accessor<"isReadOnly", [Keyword<"__read_only">,
-                                           Keyword<"read_only">]>,
+										   GNU<"image_read_only">,
+										   CXX11<"","image_read_only">]>,
                    Accessor<"isReadWrite", [Keyword<"__read_write">,
-                                            Keyword<"read_write">]>,
+											GNU<"image_read_write">,
+											CXX11<"","image_read_write">]>,
                    Accessor<"isWriteOnly", [Keyword<"__write_only">,
-                                            Keyword<"write_only">]>];
+											GNU<"image_write_only">,
+											CXX11<"","image_write_only">]>];
   let Documentation = [Undocumented];
 }
 
 def OpenCLPrivateAddressSpace : TypeAttr {
-  let Spellings = [Keyword<"__private">, Keyword<"private">];
+  let Spellings = [Keyword<"__private">, GNU<"opencl_private">];
   let Documentation = [Undocumented];
 }
 
 def OpenCLGlobalAddressSpace : TypeAttr {
-  let Spellings = [Keyword<"__global">, Keyword<"global">];
+  let Spellings = [Keyword<"__global">, GNU<"opencl_global">];
   let Documentation = [Undocumented];
 }
 
 def OpenCLLocalAddressSpace : TypeAttr {
-  let Spellings = [Keyword<"__local">, Keyword<"local">];
+  let Spellings = [Keyword<"__local">, GNU<"opencl_local">];
   let Documentation = [Undocumented];
 }
 
 def OpenCLConstantAddressSpace : TypeAttr {
-  let Spellings = [Keyword<"__constant">, Keyword<"constant">];
+  let Spellings = [Keyword<"__constant">, GNU<"opencl_constant">];
+  let Documentation = [Undocumented];
+}
+
+def FloorImageSampleType : Attr {
+  let Spellings = [GNU<"floor_image_float">, GNU<"floor_image_int">, GNU<"floor_image_uint">];
+  let Accessors = [Accessor<"isFloat", [GNU<"floor_image_float">]>,
+                   Accessor<"isInt", [GNU<"floor_image_int">]>,
+                   Accessor<"isUint", [GNU<"floor_image_uint">]>];
   let Documentation = [Undocumented];
 }
 
diff --git a/tools/clang/include/clang/Basic/AttrDocs.td b/tools/clang/include/clang/Basic/AttrDocs.td
index e6d6a33..3e7bdc1 100644
--- a/tools/clang/include/clang/Basic/AttrDocs.td
+++ b/tools/clang/include/clang/Basic/AttrDocs.td
@@ -987,6 +987,26 @@ Clang implements two kinds of checks with this attribute.
   }];
 }
 
+def AlignValueDocs : Documentation {
+  let Category = DocCatType;
+  let Content = [{
+The align_value attribute can be added to the typedef of a pointer type or the
+declaration of a variable of pointer or reference type. It specifies that the
+pointer will point to, or the reference will bind to, only objects with at
+least the provided alignment. This alignment value must be some positive power
+of 2.
+
+   .. code-block:: c
+
+     typedef double * aligned_double_ptr __attribute__((align_value(64)));
+     void foo(double & x  __attribute__((align_value(128)),
+              aligned_double_ptr y) { ... }
+
+If the pointer value does not have the specified alignment at runtime, the
+behavior of the program is undefined.
+  }];
+}
+
 def MSInheritanceDocs : Documentation {
   let Category = DocCatType;
   let Heading = "__single_inhertiance, __multiple_inheritance, __virtual_inheritance";
diff --git a/tools/clang/include/clang/Basic/DiagnosticSemaKinds.td b/tools/clang/include/clang/Basic/DiagnosticSemaKinds.td
index 1665a45..3778e80 100644
--- a/tools/clang/include/clang/Basic/DiagnosticSemaKinds.td
+++ b/tools/clang/include/clang/Basic/DiagnosticSemaKinds.td
@@ -1897,8 +1897,12 @@ def err_attribute_bad_neon_vector_size : Error<
   "Neon vector size must be 64 or 128 bits">;
 def err_attribute_unsupported : Error<
   "%0 attribute is not supported for this target">;
+// The err_*_attribute_argument_not_int are seperate because they're used by
+// VerifyIntegerConstantExpression.
 def err_aligned_attribute_argument_not_int : Error<
   "'aligned' attribute requires integer constant">;
+def err_align_value_attribute_argument_not_int : Error<
+  "'align_value' attribute requires integer constant">;
 def err_alignas_attribute_wrong_decl_type : Error<
   "%0 attribute cannot be applied to a %select{function parameter|"
   "variable with 'register' storage class|'catch' variable|bit-field}1">;
@@ -1934,6 +1938,9 @@ def err_attribute_pointers_only : Error<warn_attribute_pointers_only.Text>;
 def warn_attribute_return_pointers_only : Warning<
   "%0 attribute only applies to return values that are pointers">,
   InGroup<IgnoredAttributes>;
+def warn_attribute_pointer_or_reference_only : Warning<
+  "%0 attribute only applies to a pointer or reference (%1 is invalid)">,
+  InGroup<IgnoredAttributes>;
 def err_attribute_no_member_pointers : Error<
   "%0 attribute cannot be used with pointers to members">;
 def err_attribute_invalid_implicit_this_argument : Error<
@@ -2054,6 +2061,9 @@ def err_no_accessor_for_property : Error<
 def error_cannot_find_suitable_accessor : Error<
   "cannot find suitable %select{getter|setter}0 for property %1">;
 
+def err_alignment_not_power_of_two : Error<
+  "requested alignment is not a power of 2">;
+
 def err_attribute_aligned_not_power_of_two : Error<
   "requested alignment is not a power of 2">;
 def err_attribute_aligned_too_great : Error<
@@ -2166,7 +2176,7 @@ def warn_attribute_wrong_decl_type : Warning<
   "functions, methods and blocks|functions, methods, and classes|"
   "functions, methods, and parameters|classes|variables|methods|"
   "variables, functions and labels|fields and global variables|structs|"
-  "variables, functions and tag types|thread-local variables|"
+  "variables and typedefs|thread-local variables|"
   "variables and fields|variables, data members and tag types|"
   "types and namespaces|Objective-C interfaces|methods and properties|"
   "struct or union|struct, union or class|types|"
diff --git a/tools/clang/include/clang/Basic/LangOptions.h b/tools/clang/include/clang/Basic/LangOptions.h
index 9bffc7c..8fbc316 100644
--- a/tools/clang/include/clang/Basic/LangOptions.h
+++ b/tools/clang/include/clang/Basic/LangOptions.h
@@ -20,6 +20,7 @@
 #include "clang/Basic/ObjCRuntime.h"
 #include "clang/Basic/Visibility.h"
 #include <string>
+#include <array>
 
 namespace clang {
 
@@ -74,6 +75,9 @@ public:
 
   enum AddrSpaceMapMangling { ASMM_Target, ASMM_On, ASMM_Off };
 
+  std::array<uint32_t, 3> metal_version {{ 1, 6, 0 }};
+  std::array<uint32_t, 3> metal_language_version {{ 1, 0, 0 }};
+
 public:
   clang::ObjCRuntime ObjCRuntime;
 
diff --git a/tools/clang/include/clang/Basic/Specifiers.h b/tools/clang/include/clang/Basic/Specifiers.h
index f895673..78084dc 100644
--- a/tools/clang/include/clang/Basic/Specifiers.h
+++ b/tools/clang/include/clang/Basic/Specifiers.h
@@ -209,7 +209,9 @@ namespace clang {
     CC_AAPCS,       // __attribute__((pcs("aapcs")))
     CC_AAPCS_VFP,   // __attribute__((pcs("aapcs-vfp")))
     CC_PnaclCall,   // __attribute__((pnaclcall))
-    CC_IntelOclBicc // __attribute__((intel_ocl_bicc))
+    CC_IntelOclBicc,// __attribute__((intel_ocl_bicc))
+    CC_SpirFunction,// default for OpenCL functions on SPIR target
+    CC_SpirKernel   // inferred for OpenCL kernels on SPIR target
   };
 
   /// \brief Checks whether the given calling convention is callee-cleanup.
@@ -219,6 +221,8 @@ namespace clang {
     case CC_X86FastCall:
     case CC_X86ThisCall:
     case CC_X86Pascal:
+    case CC_SpirFunction:
+    case CC_SpirKernel:
       return true;
     default:
       return false;
diff --git a/tools/clang/include/clang/Basic/TokenKinds.def b/tools/clang/include/clang/Basic/TokenKinds.def
index 5d08833..52d3d3e 100644
--- a/tools/clang/include/clang/Basic/TokenKinds.def
+++ b/tools/clang/include/clang/Basic/TokenKinds.def
@@ -461,27 +461,19 @@ KEYWORD(__forceinline               , KEYMS)
 KEYWORD(__unaligned                 , KEYMS)
 
 // OpenCL address space qualifiers
-KEYWORD(__global                    , KEYOPENCL)
-KEYWORD(__local                     , KEYOPENCL)
-KEYWORD(__constant                  , KEYOPENCL)
-KEYWORD(__private                   , KEYOPENCL)
-ALIAS("global", __global            , KEYOPENCL)
-ALIAS("local", __local              , KEYOPENCL)
-ALIAS("constant", __constant        , KEYOPENCL)
-ALIAS("private", __private          , KEYOPENCL)
+KEYWORD(__global                    , KEYCXX|KEYOPENCL)
+KEYWORD(__local                     , KEYCXX|KEYOPENCL)
+KEYWORD(__constant                  , KEYCXX|KEYOPENCL)
+KEYWORD(__private                   , KEYCXX|KEYOPENCL)
 // OpenCL function qualifiers
-KEYWORD(__kernel                    , KEYOPENCL)
-ALIAS("kernel", __kernel            , KEYOPENCL)
+KEYWORD(__kernel                    , KEYCXX|KEYOPENCL)
 // OpenCL access qualifiers
-KEYWORD(__read_only                 , KEYOPENCL)
-KEYWORD(__write_only                , KEYOPENCL)
-KEYWORD(__read_write                , KEYOPENCL)
-ALIAS("read_only", __read_only      , KEYOPENCL)
-ALIAS("write_only", __write_only    , KEYOPENCL)
-ALIAS("read_write", __read_write    , KEYOPENCL)
+KEYWORD(__read_only                 , KEYCXX|KEYOPENCL)
+KEYWORD(__write_only                , KEYCXX|KEYOPENCL)
+KEYWORD(__read_write                , KEYCXX|KEYOPENCL)
 // OpenCL builtins
-KEYWORD(__builtin_astype            , KEYOPENCL)
-KEYWORD(vec_step                    , KEYOPENCL|KEYALTIVEC)
+KEYWORD(__builtin_astype            , KEYCXX|KEYOPENCL)
+KEYWORD(vec_step                    , KEYCXX|KEYOPENCL|KEYALTIVEC)
 
 // Borland Extensions.
 KEYWORD(__pascal                    , KEYALL)
diff --git a/tools/clang/include/clang/Driver/CC1Options.td b/tools/clang/include/clang/Driver/CC1Options.td
index d25560c..2e7317e 100644
--- a/tools/clang/include/clang/Driver/CC1Options.td
+++ b/tools/clang/include/clang/Driver/CC1Options.td
@@ -577,6 +577,18 @@ def cl_std_EQ : Joined<["-"], "cl-std=">,
 def fcuda_is_device : Flag<["-"], "fcuda-is-device">,
   HelpText<"Generate code for CUDA device">;
 
+//===----------------------------------------------------------------------===//
+// AIR/Metal Options
+//===----------------------------------------------------------------------===//
+def metal_air : Joined<["-"], "metal-air=">,
+  HelpText<"AIR/Metal only. Generate general air/metal and kernel argument metadata.">;
+
+//===----------------------------------------------------------------------===//
+// AIR/Metal Options
+//===----------------------------------------------------------------------===//
+def applecl_kernel_info : Flag<["-"], "applecl-kernel-info">,
+  HelpText<"AppleCL/OpenCL only. Generate general AppleCL and kernel argument metadata.">;
+
 } // let Flags = [CC1Option]
 
 
diff --git a/tools/clang/include/clang/Frontend/CodeGenOptions.def b/tools/clang/include/clang/Frontend/CodeGenOptions.def
index 1d92efe..d66c494 100644
--- a/tools/clang/include/clang/Frontend/CodeGenOptions.def
+++ b/tools/clang/include/clang/Frontend/CodeGenOptions.def
@@ -56,6 +56,8 @@ CODEGENOPT(EmitDeclMetadata  , 1, 0) ///< Emit special metadata indicating what
 CODEGENOPT(EmitGcovArcs      , 1, 0) ///< Emit coverage data files, aka. GCDA.
 CODEGENOPT(EmitGcovNotes     , 1, 0) ///< Emit coverage "notes" files, aka GCNO.
 CODEGENOPT(EmitOpenCLArgMetadata , 1, 0) ///< Emit OpenCL kernel arg metadata.
+CODEGENOPT(EmitAIRMetadata , 1, 0) ///< Emit AIR/Metal kernel info and arg metadata.
+CODEGENOPT(EmitAppleCLMetadata , 1, 0) ///< Emit AppleCL kernel info and arg metadata.
 /// \brief FP_CONTRACT mode (on/off/fast).
 ENUM_CODEGENOPT(FPContractMode, FPContractModeKind, 2, FPC_On)
 CODEGENOPT(ForbidGuardVariables , 1, 0) ///< Issue errors if C++ guard variables
diff --git a/tools/clang/include/clang/Frontend/LangStandards.def b/tools/clang/include/clang/Frontend/LangStandards.def
index 90a27b5..f014a08 100644
--- a/tools/clang/include/clang/Frontend/LangStandards.def
+++ b/tools/clang/include/clang/Frontend/LangStandards.def
@@ -134,17 +134,21 @@ LANGSTANDARD(gnucxx1z, "gnu++1z",
 // OpenCL
 LANGSTANDARD(opencl, "cl",
              "OpenCL 1.0",
-             LineComment | C99 | Digraphs | HexFloat)
+             LineComment | CPlusPlus | CPlusPlus11 | CPlusPlus1y |
+             Digraphs | GNUMode)
 LANGSTANDARD(opencl11, "CL1.1",
              "OpenCL 1.1",
-             LineComment | C99 | Digraphs | HexFloat)
+             LineComment | CPlusPlus | CPlusPlus11 | CPlusPlus1y |
+             Digraphs | GNUMode)
 LANGSTANDARD(opencl12, "CL1.2",
              "OpenCL 1.2",
-             LineComment | C99 | Digraphs | HexFloat)
+             LineComment | CPlusPlus | CPlusPlus11 | CPlusPlus1y |
+             Digraphs | GNUMode)
 
 // CUDA
 LANGSTANDARD(cuda, "cuda",
              "NVIDIA CUDA(tm)",
-             LineComment | CPlusPlus | Digraphs)
+             LineComment | CPlusPlus | CPlusPlus11 | CPlusPlus1y |
+             Digraphs | GNUMode)
 
 #undef LANGSTANDARD
diff --git a/tools/clang/include/clang/Sema/AttributeList.h b/tools/clang/include/clang/Sema/AttributeList.h
index c21c19f..a37f138 100644
--- a/tools/clang/include/clang/Sema/AttributeList.h
+++ b/tools/clang/include/clang/Sema/AttributeList.h
@@ -826,7 +826,7 @@ enum AttributeDeclKind {
   ExpectedVariableFunctionOrLabel,
   ExpectedFieldOrGlobalVar,
   ExpectedStruct,
-  ExpectedVariableFunctionOrTag,
+  ExpectedVariableOrTypedef,
   ExpectedTLSVar,
   ExpectedVariableOrField,
   ExpectedVariableFieldOrTag,
diff --git a/tools/clang/include/clang/Sema/Sema.h b/tools/clang/include/clang/Sema/Sema.h
index e254afd..1f05b24 100644
--- a/tools/clang/include/clang/Sema/Sema.h
+++ b/tools/clang/include/clang/Sema/Sema.h
@@ -7283,6 +7283,11 @@ public:
   void AddAlignedAttr(SourceRange AttrRange, Decl *D, TypeSourceInfo *T,
                       unsigned SpellingListIndex, bool IsPackExpansion);
 
+  /// AddAlignValueAttr - Adds an align_value attribute to a particular
+  /// declaration.
+  void AddAlignValueAttr(SourceRange AttrRange, Decl *D, Expr *E,
+                         unsigned SpellingListIndex);
+
   // OpenMP directives and clauses.
 private:
   void *VarDataSharingAttributesStack;
diff --git a/tools/clang/include/clang/Serialization/ASTBitCodes.h b/tools/clang/include/clang/Serialization/ASTBitCodes.h
index 7ae1977..a5ced4e 100644
--- a/tools/clang/include/clang/Serialization/ASTBitCodes.h
+++ b/tools/clang/include/clang/Serialization/ASTBitCodes.h
@@ -744,6 +744,17 @@ namespace clang {
       PREDEF_TYPE_IMAGE2D_ID    = 41,
       /// \brief OpenCL 2d image array type.
       PREDEF_TYPE_IMAGE2D_ARR_ID = 42,
+      PREDEF_TYPE_IMAGE2D_DEPTH_ID = 46,
+      PREDEF_TYPE_IMAGE2D_ARR_DEPTH_ID = 47,
+      PREDEF_TYPE_IMAGE2D_MSAA_ID = 48,
+      PREDEF_TYPE_IMAGE2D_ARR_MSAA_ID = 49,
+      PREDEF_TYPE_IMAGE2D_MSAA_DEPTH_ID = 50,
+      PREDEF_TYPE_IMAGE2D_ARR_MSAA_DEPTH_ID = 51,
+      /// \brief not currently supported by OpenCL, but by other backends
+      PREDEF_TYPE_IMAGECUBE_ID = 52,
+      PREDEF_TYPE_IMAGECUBE_ARR_ID = 53,
+      PREDEF_TYPE_IMAGECUBE_DEPTH_ID = 54,
+      PREDEF_TYPE_IMAGECUBE_ARR_DEPTH_ID = 55,
       /// \brief OpenCL 3d image type.
       PREDEF_TYPE_IMAGE3D_ID    = 43,
       /// \brief OpenCL event type.
diff --git a/tools/clang/lib/AST/ASTContext.cpp b/tools/clang/lib/AST/ASTContext.cpp
index bccdae9..80a9618 100644
--- a/tools/clang/lib/AST/ASTContext.cpp
+++ b/tools/clang/lib/AST/ASTContext.cpp
@@ -1030,6 +1030,16 @@ void ASTContext::InitBuiltinTypes(const TargetInfo &Target) {
     InitBuiltinType(OCLImage1dBufferTy, BuiltinType::OCLImage1dBuffer);
     InitBuiltinType(OCLImage2dTy, BuiltinType::OCLImage2d);
     InitBuiltinType(OCLImage2dArrayTy, BuiltinType::OCLImage2dArray);
+    InitBuiltinType(OCLImage2dDepthTy, BuiltinType::OCLImage2dDepth);
+    InitBuiltinType(OCLImage2dArrayDepthTy, BuiltinType::OCLImage2dArrayDepth);
+    InitBuiltinType(OCLImage2dMSAATy, BuiltinType::OCLImage2dMSAA);
+    InitBuiltinType(OCLImage2dArrayMSAATy, BuiltinType::OCLImage2dArrayMSAA);
+    InitBuiltinType(OCLImage2dMSAADepthTy, BuiltinType::OCLImage2dMSAADepth);
+    InitBuiltinType(OCLImage2dArrayMSAADepthTy, BuiltinType::OCLImage2dArrayMSAADepth);
+    InitBuiltinType(OCLImageCubeTy, BuiltinType::OCLImageCube);
+    InitBuiltinType(OCLImageCubeArrayTy, BuiltinType::OCLImageCubeArray);
+    InitBuiltinType(OCLImageCubeDepthTy, BuiltinType::OCLImageCubeDepth);
+    InitBuiltinType(OCLImageCubeArrayDepthTy, BuiltinType::OCLImageCubeArrayDepth);
     InitBuiltinType(OCLImage3dTy, BuiltinType::OCLImage3d);
 
     InitBuiltinType(OCLSamplerTy, BuiltinType::OCLSampler);
@@ -1596,6 +1606,16 @@ ASTContext::getTypeInfoImpl(const Type *T) const {
     case BuiltinType::OCLImage1dBuffer:
     case BuiltinType::OCLImage2d:
     case BuiltinType::OCLImage2dArray:
+    case BuiltinType::OCLImage2dDepth:
+    case BuiltinType::OCLImage2dArrayDepth:
+    case BuiltinType::OCLImage2dMSAA:
+    case BuiltinType::OCLImage2dArrayMSAA:
+    case BuiltinType::OCLImage2dMSAADepth:
+    case BuiltinType::OCLImage2dArrayMSAADepth:
+    case BuiltinType::OCLImageCube:
+    case BuiltinType::OCLImageCubeArray:
+    case BuiltinType::OCLImageCubeDepth:
+    case BuiltinType::OCLImageCubeArrayDepth:
     case BuiltinType::OCLImage3d:
       // Currently these types are pointers to opaque types.
       Width = Target->getPointerWidth(0);
@@ -5154,6 +5174,16 @@ static char getObjCEncodingForPrimitiveKind(const ASTContext *C,
     case BuiltinType::OCLImage1dBuffer:
     case BuiltinType::OCLImage2d:
     case BuiltinType::OCLImage2dArray:
+    case BuiltinType::OCLImage2dDepth:
+    case BuiltinType::OCLImage2dArrayDepth:
+    case BuiltinType::OCLImage2dMSAA:
+    case BuiltinType::OCLImage2dArrayMSAA:
+    case BuiltinType::OCLImage2dMSAADepth:
+    case BuiltinType::OCLImage2dArrayMSAADepth:
+    case BuiltinType::OCLImageCube:
+    case BuiltinType::OCLImageCubeArray:
+    case BuiltinType::OCLImageCubeDepth:
+    case BuiltinType::OCLImageCubeArrayDepth:
     case BuiltinType::OCLImage3d:
     case BuiltinType::OCLEvent:
     case BuiltinType::OCLSampler:
@@ -7973,7 +8003,9 @@ CallingConv ASTContext::getDefaultCallingConvention(bool IsVariadic,
   if (IsCXXMethod)
     return ABI->getDefaultMethodCallConv(IsVariadic);
 
-  return (LangOpts.MRTD && !IsVariadic) ? CC_X86StdCall : CC_C;
+  if (LangOpts.MRTD && !IsVariadic) return CC_X86StdCall;
+
+  return Target->getDefaultCallingConv(TargetInfo::CCMT_Unknown);
 }
 
 bool ASTContext::isNearlyEmpty(const CXXRecordDecl *RD) const {
diff --git a/tools/clang/lib/AST/ExprConstant.cpp b/tools/clang/lib/AST/ExprConstant.cpp
index 7d7ca99..88f46dd 100644
--- a/tools/clang/lib/AST/ExprConstant.cpp
+++ b/tools/clang/lib/AST/ExprConstant.cpp
@@ -835,7 +835,8 @@ CallStackFrame::~CallStackFrame() {
 APValue &CallStackFrame::createTemporary(const void *Key,
                                          bool IsLifetimeExtended) {
   APValue &Result = Temporaries[Key];
-  assert(Result.isUninit() && "temporary created multiple times");
+  // TODO: fix this!
+  //assert(Result.isUninit() && "temporary created multiple times");
   Info.CleanupStack.push_back(Cleanup(&Result, IsLifetimeExtended));
   return Result;
 }
@@ -3588,6 +3589,22 @@ static bool CheckConstexprFunction(EvalInfo &Info, SourceLocation CallLoc,
   return false;
 }
 
+/// Determine if a class has any fields that might need to be copied by a
+/// trivial copy or move operation.
+static bool hasFields(const CXXRecordDecl *RD) {
+  if (!RD || RD->isEmpty())
+    return false;
+  for (auto *FD : RD->fields()) {
+    if (FD->isUnnamedBitfield())
+      continue;
+    return true;
+  }
+  for (auto &Base : RD->bases())
+    if (hasFields(Base.getType()->getAsCXXRecordDecl()))
+      return true;
+  return false;
+}
+
 namespace {
 typedef SmallVector<APValue, 8> ArgVector;
 }
@@ -3626,8 +3643,13 @@ static bool HandleFunctionCall(SourceLocation CallLoc,
   // For a trivial copy or move assignment, perform an APValue copy. This is
   // essential for unions, where the operations performed by the assignment
   // operator cannot be represented as statements.
+  //
+  // Skip this for non-union classes with no fields; in that case, the defaulted
+  // copy/move does not actually read the object.
   const CXXMethodDecl *MD = dyn_cast<CXXMethodDecl>(Callee);
-  if (MD && MD->isDefaulted() && MD->isTrivial()) {
+  if (MD && MD->isDefaulted() &&
+      (MD->getParent()->isUnion() ||
+       (MD->isTrivial() && hasFields(MD->getParent())))) {
     assert(This &&
            (MD->isCopyAssignmentOperator() || MD->isMoveAssignmentOperator()));
     LValue RHS;
@@ -3684,11 +3706,16 @@ static bool HandleConstructorCall(SourceLocation CallLoc, const LValue &This,
   }
 
   // For a trivial copy or move constructor, perform an APValue copy. This is
-  // essential for unions, where the operations performed by the constructor
-  // cannot be represented by ctor-initializers.
-  if (Definition->isDefaulted() &&
-      ((Definition->isCopyConstructor() && Definition->isTrivial()) ||
-       (Definition->isMoveConstructor() && Definition->isTrivial()))) {
+  // essential for unions (or classes with anonymous union members), where the
+  // operations performed by the constructor cannot be represented by
+  // ctor-initializers.
+  //
+  // Skip this for empty non-union classes; we should not perform an
+  // lvalue-to-rvalue conversion on them because their copy constructor does not
+  // actually read them.
+  if (Definition->isDefaulted() && Definition->isCopyOrMoveConstructor() &&
+      (Definition->getParent()->isUnion() ||
+       (Definition->isTrivial() && hasFields(Definition->getParent())))) {
     LValue RHS;
     RHS.setFrom(Info.Ctx, ArgValues[0]);
     return handleLValueToRValueConversion(Info, Args[0], Args[0]->getType(),
@@ -4733,6 +4760,7 @@ bool PointerExprEvaluator::VisitCastExpr(const CastExpr* E) {
   case CK_CPointerToObjCPointerCast:
   case CK_BlockPointerToObjCPointerCast:
   case CK_AnyPointerToBlockPointerCast:
+  case CK_AddressSpaceConversion:
     if (!Visit(SubExpr))
       return false;
     // Bitcasts to cv void* are static_casts, not reinterpret_casts, so are
diff --git a/tools/clang/lib/AST/ItaniumMangle.cpp b/tools/clang/lib/AST/ItaniumMangle.cpp
index 977d6fc..30f70da 100644
--- a/tools/clang/lib/AST/ItaniumMangle.cpp
+++ b/tools/clang/lib/AST/ItaniumMangle.cpp
@@ -1920,6 +1920,14 @@ void CXXNameMangler::mangleNameOrStandardSubstitution(const NamedDecl *ND) {
 }
 
 void CXXNameMangler::mangleType(const BuiltinType *T) {
+  // helper function to discern between spir and applecl name mangling depending on the triple vendor
+  static const auto mangle_opencl_name = [](const ASTContext& ast_ctx, const char* spir_name, const char* applecl_name) {
+    if(ast_ctx.getTargetInfo().getTriple().getVendorName().str() == "applecl") {
+      return applecl_name;
+    }
+    return spir_name;
+  };
+
   //  <type>         ::= <builtin-type>
   //  <builtin-type> ::= v  # void
   //                 ::= w  # wchar_t
@@ -1984,14 +1992,24 @@ void CXXNameMangler::mangleType(const BuiltinType *T) {
   case BuiltinType::ObjCId: Out << "11objc_object"; break;
   case BuiltinType::ObjCClass: Out << "10objc_class"; break;
   case BuiltinType::ObjCSel: Out << "13objc_selector"; break;
-  case BuiltinType::OCLImage1d: Out << "11ocl_image1d"; break;
-  case BuiltinType::OCLImage1dArray: Out << "16ocl_image1darray"; break;
-  case BuiltinType::OCLImage1dBuffer: Out << "17ocl_image1dbuffer"; break;
-  case BuiltinType::OCLImage2d: Out << "11ocl_image2d"; break;
-  case BuiltinType::OCLImage2dArray: Out << "16ocl_image2darray"; break;
-  case BuiltinType::OCLImage3d: Out << "11ocl_image3d"; break;
-  case BuiltinType::OCLSampler: Out << "11ocl_sampler"; break;
-  case BuiltinType::OCLEvent: Out << "9ocl_event"; break;
+  case BuiltinType::OCLImage1d: Out << mangle_opencl_name(getASTContext(), "11ocl_image1d", "PU3AS110_image1d_t"); break;
+  case BuiltinType::OCLImage1dArray: Out << mangle_opencl_name(getASTContext(), "16ocl_image1darray", "PU3AS116_image1d_array_t"); break;
+  case BuiltinType::OCLImage1dBuffer: Out << mangle_opencl_name(getASTContext(), "17ocl_image1dbuffer", "PU3AS117_image1d_buffer_t"); break;
+  case BuiltinType::OCLImage2d: Out << mangle_opencl_name(getASTContext(), "11ocl_image2d", "PU3AS110_image2d_t"); break;
+  case BuiltinType::OCLImage2dArray: Out << mangle_opencl_name(getASTContext(), "16ocl_image2darray", "PU3AS116_image2d_array_t"); break;
+  case BuiltinType::OCLImage2dDepth: Out << mangle_opencl_name(getASTContext(), "16ocl_image2ddepth", "PU3AS116_image2d_depth_t"); break;
+  case BuiltinType::OCLImage2dArrayDepth: Out << mangle_opencl_name(getASTContext(), "21ocl_image2darraydepth", "PU3AS122_image2d_array_depth_t"); break;
+  case BuiltinType::OCLImage2dMSAA: Out << mangle_opencl_name(getASTContext(), "15ocl_image2dmsaa", "PU3AS115_image2d_msaa_t"); break;
+  case BuiltinType::OCLImage2dArrayMSAA: Out << mangle_opencl_name(getASTContext(), "20ocl_image2darraymsaa", "PU3AS121_image2d_array_msaa_t"); break;
+  case BuiltinType::OCLImage2dMSAADepth: Out << mangle_opencl_name(getASTContext(), "20ocl_image2dmsaadepth", "PU3AS121_image2d_msaa_depth_t"); break;
+  case BuiltinType::OCLImage2dArrayMSAADepth: Out << mangle_opencl_name(getASTContext(), "25ocl_image2darraymsaadepth", "PU3AS127_image2d_array_msaa_depth_t"); break;
+  case BuiltinType::OCLImageCube: Out << mangle_opencl_name(getASTContext(), "13ocl_imagecube", "PU3AS112_imagecube_t"); break;
+  case BuiltinType::OCLImageCubeArray: Out << mangle_opencl_name(getASTContext(), "18ocl_imagecubearray", "PU3AS117_imagecubearray_t"); break;
+  case BuiltinType::OCLImageCubeDepth: Out << mangle_opencl_name(getASTContext(), "18ocl_imagecubedepth", "PU3AS117_imagecubedepth_t"); break;
+  case BuiltinType::OCLImageCubeArrayDepth: Out << mangle_opencl_name(getASTContext(), "23ocl_imagecubearraydepth", "PU3AS122_imagecubearraydepth_t"); break;
+  case BuiltinType::OCLImage3d: Out << mangle_opencl_name(getASTContext(), "11ocl_image3d", "PU3AS110_image3d_t"); break;
+  case BuiltinType::OCLSampler: Out << mangle_opencl_name(getASTContext(), "11ocl_sampler", "uSampler"); break;
+  case BuiltinType::OCLEvent: Out << mangle_opencl_name(getASTContext(), "9ocl_event", "i"); break;
   }
 }
 
diff --git a/tools/clang/lib/AST/MicrosoftMangle.cpp b/tools/clang/lib/AST/MicrosoftMangle.cpp
index e6a6d09..267b1c0 100644
--- a/tools/clang/lib/AST/MicrosoftMangle.cpp
+++ b/tools/clang/lib/AST/MicrosoftMangle.cpp
@@ -1492,6 +1492,16 @@ void MicrosoftCXXNameMangler::mangleType(const BuiltinType *T,
   case BuiltinType::OCLImage1dBuffer: Out << "PAUocl_image1dbuffer@@"; break;
   case BuiltinType::OCLImage2d: Out << "PAUocl_image2d@@"; break;
   case BuiltinType::OCLImage2dArray: Out << "PAUocl_image2darray@@"; break;
+  case BuiltinType::OCLImage2dDepth: Out << "PAUocl_image2ddepth@@"; break;
+  case BuiltinType::OCLImage2dArrayDepth: Out << "PAUocl_image2darraydepth@@"; break;
+  case BuiltinType::OCLImage2dMSAA: Out << "PAUocl_image2dmsaa@@"; break;
+  case BuiltinType::OCLImage2dArrayMSAA: Out << "PAUocl_image2darraymsaa@@"; break;
+  case BuiltinType::OCLImage2dMSAADepth: Out << "PAUocl_image2dmsaadepth@@"; break;
+  case BuiltinType::OCLImage2dArrayMSAADepth: Out << "PAUocl_image2darraymsaadepth@@"; break;
+  case BuiltinType::OCLImageCube: Out << "PAUocl_imagecube@@"; break;
+  case BuiltinType::OCLImageCubeArray: Out << "PAUocl_imagecubearray@@"; break;
+  case BuiltinType::OCLImageCubeDepth: Out << "PAUocl_imagecubedepth@@"; break;
+  case BuiltinType::OCLImageCubeArrayDepth: Out << "PAUocl_imagecubearraydepth@@"; break;
   case BuiltinType::OCLImage3d: Out << "PAUocl_image3d@@"; break;
   case BuiltinType::OCLSampler: Out << "PAUocl_sampler@@"; break;
   case BuiltinType::OCLEvent: Out << "PAUocl_event@@"; break;
diff --git a/tools/clang/lib/AST/NSAPI.cpp b/tools/clang/lib/AST/NSAPI.cpp
index 986b3b5..3f8aad8 100644
--- a/tools/clang/lib/AST/NSAPI.cpp
+++ b/tools/clang/lib/AST/NSAPI.cpp
@@ -349,6 +349,16 @@ NSAPI::getNSNumberFactoryMethodKind(QualType T) const {
   case BuiltinType::OCLImage1dBuffer:
   case BuiltinType::OCLImage2d:
   case BuiltinType::OCLImage2dArray:
+  case BuiltinType::OCLImage2dDepth:
+  case BuiltinType::OCLImage2dArrayDepth:
+  case BuiltinType::OCLImage2dMSAA:
+  case BuiltinType::OCLImage2dArrayMSAA:
+  case BuiltinType::OCLImage2dMSAADepth:
+  case BuiltinType::OCLImage2dArrayMSAADepth:
+  case BuiltinType::OCLImageCube:
+  case BuiltinType::OCLImageCubeArray:
+  case BuiltinType::OCLImageCubeDepth:
+  case BuiltinType::OCLImageCubeArrayDepth:
   case BuiltinType::OCLImage3d:
   case BuiltinType::OCLSampler:
   case BuiltinType::OCLEvent:
diff --git a/tools/clang/lib/AST/Type.cpp b/tools/clang/lib/AST/Type.cpp
index 1677874..ce1adcc 100644
--- a/tools/clang/lib/AST/Type.cpp
+++ b/tools/clang/lib/AST/Type.cpp
@@ -1546,6 +1546,16 @@ StringRef BuiltinType::getName(const PrintingPolicy &Policy) const {
   case OCLImage1dBuffer:  return "image1d_buffer_t";
   case OCLImage2d:        return "image2d_t";
   case OCLImage2dArray:   return "image2d_array_t";
+  case OCLImage2dDepth:   return "image2d_depth_t";
+  case OCLImage2dArrayDepth: return "image2d_array_depth_t";
+  case OCLImage2dMSAA:    return "image2d_msaa_t";
+  case OCLImage2dArrayMSAA: return "image2d_array_msaa_t";
+  case OCLImage2dMSAADepth: return "image2d_msaa_depth_t";
+  case OCLImage2dArrayMSAADepth: return "image2d_array_msaa_depth_t";
+  case OCLImageCube:      return "imagecube_t";
+  case OCLImageCubeArray: return "imagecube_array_t";
+  case OCLImageCubeDepth: return "imagecube_depth_t";
+  case OCLImageCubeArrayDepth: return "imagecube_array_depth_t";
   case OCLImage3d:        return "image3d_t";
   case OCLSampler:        return "sampler_t";
   case OCLEvent:          return "event_t";
@@ -1583,6 +1593,8 @@ StringRef FunctionType::getNameForCallConv(CallingConv CC) {
   case CC_AAPCS_VFP: return "aapcs-vfp";
   case CC_PnaclCall: return "pnaclcall";
   case CC_IntelOclBicc: return "intel_ocl_bicc";
+  case CC_SpirFunction: return "spir_function";
+  case CC_SpirKernel: return "spir_kernel";
   }
 
   llvm_unreachable("Invalid calling convention.");
@@ -2469,3 +2481,22 @@ QualType::DestructionKind QualType::isDestructedTypeImpl(QualType type) {
 CXXRecordDecl *MemberPointerType::getMostRecentCXXRecordDecl() const {
   return getClass()->getAsCXXRecordDecl()->getMostRecentDecl();
 }
+
+bool Type::isAggregateImageType() const {
+  // must be struct or class, union is not allowed
+  if(!isStructureOrClassType()) return false;
+
+  // must have a decl of course
+  const RecordDecl* decl = (isStructureType() ? getAsStructureType()->getDecl() : getAsCXXRecordDecl());
+  if(!decl || decl->field_empty()) return false;
+
+  // iterate of all fields/members and check if all are image types
+  bool all_image = true;
+  for(const auto& field : decl->fields()) {
+    if(!field->getType()->isImageType()) {
+      all_image = false;
+      break;
+    }
+  }
+  return all_image;
+}
diff --git a/tools/clang/lib/AST/TypeLoc.cpp b/tools/clang/lib/AST/TypeLoc.cpp
index 208d695..3fca2c9 100644
--- a/tools/clang/lib/AST/TypeLoc.cpp
+++ b/tools/clang/lib/AST/TypeLoc.cpp
@@ -296,6 +296,16 @@ TypeSpecifierType BuiltinTypeLoc::getWrittenTypeSpec() const {
   case BuiltinType::OCLImage1dBuffer:
   case BuiltinType::OCLImage2d:
   case BuiltinType::OCLImage2dArray:
+  case BuiltinType::OCLImage2dDepth:
+  case BuiltinType::OCLImage2dArrayDepth:
+  case BuiltinType::OCLImage2dMSAA:
+  case BuiltinType::OCLImage2dArrayMSAA:
+  case BuiltinType::OCLImage2dMSAADepth:
+  case BuiltinType::OCLImage2dArrayMSAADepth:
+  case BuiltinType::OCLImageCube:
+  case BuiltinType::OCLImageCubeArray:
+  case BuiltinType::OCLImageCubeDepth:
+  case BuiltinType::OCLImageCubeArrayDepth:
   case BuiltinType::OCLImage3d:
   case BuiltinType::OCLSampler:
   case BuiltinType::OCLEvent:
diff --git a/tools/clang/lib/AST/TypePrinter.cpp b/tools/clang/lib/AST/TypePrinter.cpp
index 061473e..9de3dad 100644
--- a/tools/clang/lib/AST/TypePrinter.cpp
+++ b/tools/clang/lib/AST/TypePrinter.cpp
@@ -694,6 +694,12 @@ void TypePrinter::printFunctionProtoAfter(const FunctionProtoType *T,
     case CC_X86_64SysV:
       OS << " __attribute__((sysv_abi))";
       break;
+    case CC_SpirFunction:
+      OS << "spir_function";
+      break;
+    case CC_SpirKernel:
+      OS << "spir_kernel";
+      break;
     }
   }
 
diff --git a/tools/clang/lib/Basic/Targets.cpp b/tools/clang/lib/Basic/Targets.cpp
index 075f905..c581972 100644
--- a/tools/clang/lib/Basic/Targets.cpp
+++ b/tools/clang/lib/Basic/Targets.cpp
@@ -1361,6 +1361,7 @@ namespace {
       // Define available target features
       // These must be defined in sorted order!
       NoAsmVariants = true;
+      UserLabelPrefix = "";
     }
     void getTargetDefines(const LangOptions &Opts,
                           MacroBuilder &Builder) const override {
@@ -1411,7 +1412,12 @@ namespace {
         .Case("sm_20", true)
         .Case("sm_21", true)
         .Case("sm_30", true)
+        .Case("sm_32", true)
         .Case("sm_35", true)
+        .Case("sm_37", true)
+        .Case("sm_50", true)
+        .Case("sm_52", true)
+        .Case("sm_53", true)
         .Default(false);
 
       return Valid;
@@ -5872,12 +5878,11 @@ namespace {
     0     // cuda_shared
   };
   class SPIRTargetInfo : public TargetInfo {
+  private:
+    // true for spir-unknown-* and spir64-unknown-* (-> false for AppleCL and Metal)
+    const bool is_pure_spir;
   public:
-    SPIRTargetInfo(const llvm::Triple &Triple) : TargetInfo(Triple) {
-      assert(getTriple().getOS() == llvm::Triple::UnknownOS &&
-        "SPIR target must use unknown OS");
-      assert(getTriple().getEnvironment() == llvm::Triple::UnknownEnvironment &&
-        "SPIR target must use unknown environment type");
+    SPIRTargetInfo(const llvm::Triple &Triple) : TargetInfo(Triple), is_pure_spir(Triple.getVendorName().str() == "unknown") {
       BigEndian = false;
       TLSSupported = false;
       LongWidth = LongAlign = 64;
@@ -5886,6 +5891,7 @@ namespace {
       // Define available target features
       // These must be defined in sorted order!
       NoAsmVariants = true;
+      UserLabelPrefix = "";
     }
     void getTargetDefines(const LangOptions &Opts,
                           MacroBuilder &Builder) const override {
@@ -5911,6 +5917,16 @@ namespace {
     BuiltinVaListKind getBuiltinVaListKind() const override {
       return TargetInfo::VoidPtrBuiltinVaList;
     }
+
+    CallingConvCheckResult checkCallingConvention(CallingConv CC) const override {
+      if (!is_pure_spir) return CCCR_OK;
+      return (CC == CC_SpirFunction ||
+              CC == CC_SpirKernel) ? CCCR_OK : CCCR_Warning;
+    }
+
+    CallingConv getDefaultCallingConv(CallingConvMethodType MT) const override {
+      return (is_pure_spir ? CC_SpirFunction : CC_C);
+    }
   };
 
 
diff --git a/tools/clang/lib/CodeGen/BackendUtil.cpp b/tools/clang/lib/CodeGen/BackendUtil.cpp
index cec48f3..8304e13 100644
--- a/tools/clang/lib/CodeGen/BackendUtil.cpp
+++ b/tools/clang/lib/CodeGen/BackendUtil.cpp
@@ -240,6 +240,23 @@ void EmitAssemblyHelper::CreatePasses() {
   PMBuilder.DisableUnrollLoops = !CodeGenOpts.UnrollLoops;
   PMBuilder.RerollLoops = CodeGenOpts.RerollLoops;
 
+  PMBuilder.EnableAddressSpaceFix = LangOpts.OpenCL;
+  if(PMBuilder.EnableAddressSpaceFix && OptLevel == 0) {
+    unsigned DiagID = Diags.getCustomDiagID(DiagnosticsEngine::Error, "compiling OpenCL or Metal with"
+											" -O0 is not possible!");
+    Diags.Report(DiagID);
+    return;
+  }
+
+  // only enable this for CUDA
+  PMBuilder.EnableCUDAPasses = LangOpts.CUDA;
+
+  // only enable this for Metal/AIR
+  PMBuilder.EnableMetalPasses = LangOpts.OpenCL && Triple(TheModule->getTargetTriple()).getVendorName().str() == "metal";
+
+  // only enable this for OpenCL/SPIR
+  PMBuilder.EnableSPIRPasses = LangOpts.OpenCL && Triple(TheModule->getTargetTriple()).getVendorName().str() == "unknown";
+
   PMBuilder.addExtension(PassManagerBuilder::EP_EarlyAsPossible,
                          addAddDiscriminatorsPass);
 
@@ -326,6 +343,10 @@ void EmitAssemblyHelper::CreatePasses() {
   if (CodeGenOpts.VerifyModule)
     MPM->add(createDebugInfoVerifierPass());
 
+  if (LangOpts.OpenCL || LangOpts.CUDA) {
+    MPM->add(createInternalizePass());
+  }
+
   if (!CodeGenOpts.DisableGCov &&
       (CodeGenOpts.EmitGcovArcs || CodeGenOpts.EmitGcovNotes)) {
     // Not using 'GCOVOptions::getDefault' allows us to avoid exiting if
diff --git a/tools/clang/lib/CodeGen/CGCall.cpp b/tools/clang/lib/CodeGen/CGCall.cpp
index 17c3354..ec29564 100644
--- a/tools/clang/lib/CodeGen/CGCall.cpp
+++ b/tools/clang/lib/CodeGen/CGCall.cpp
@@ -47,6 +47,8 @@ static unsigned ClangCallConvToLLVMCallConv(CallingConv CC) {
   case CC_AAPCS: return llvm::CallingConv::ARM_AAPCS;
   case CC_AAPCS_VFP: return llvm::CallingConv::ARM_AAPCS_VFP;
   case CC_IntelOclBicc: return llvm::CallingConv::Intel_OCL_BI;
+  case CC_SpirFunction: return llvm::CallingConv::SPIR_FUNC;
+  case CC_SpirKernel: return llvm::CallingConv::SPIR_KERNEL;
   // TODO: add support for CC_X86Pascal to llvm
   }
 }
@@ -1526,6 +1528,25 @@ void CodeGenFunction::EmitFunctionProlog(const CGFunctionInfo &FI,
               AI->addAttr(llvm::AttributeSet::get(getLLVMContext(),
                                                   AI->getArgNo() + 1,
                                                   llvm::Attribute::NonNull));
+		  }
+
+          const auto *AVAttr = PVD->getAttr<AlignValueAttr>();
+          if (!AVAttr)
+            if (const auto *TOTy = dyn_cast<TypedefType>(OTy))
+              AVAttr = TOTy->getDecl()->getAttr<AlignValueAttr>();
+          if (AVAttr) {
+            llvm::Value *AlignmentValue =
+              EmitScalarExpr(AVAttr->getAlignment());
+            llvm::ConstantInt *AlignmentCI =
+              cast<llvm::ConstantInt>(AlignmentValue);
+            unsigned Alignment =
+              std::min((unsigned) AlignmentCI->getZExtValue(),
+                       +llvm::Value::MaximumAlignment);
+
+            llvm::AttrBuilder Attrs;
+            Attrs.addAlignmentAttr(Alignment);
+            AI->addAttr(llvm::AttributeSet::get(getLLVMContext(),
+                                                AI->getArgNo() + 1, Attrs));
           }
         }
 
@@ -2573,9 +2594,12 @@ CodeGenFunction::EmitCallOrInvoke(llvm::Value *Callee,
 }
 
 static void checkArgMatches(llvm::Value *Elt, unsigned &ArgNo,
-                            llvm::FunctionType *FTy) {
-  if (ArgNo < FTy->getNumParams())
-    assert(Elt->getType() == FTy->getParamType(ArgNo));
+                            llvm::FunctionType *FTy, bool ignore_type = false) {
+  if (ArgNo < FTy->getNumParams()) {
+    if(!ignore_type) {
+      assert(Elt->getType() == FTy->getParamType(ArgNo));
+    }
+  }
   else
     assert(FTy->isVarArg());
   ++ArgNo;
@@ -2832,12 +2856,20 @@ RValue CodeGenFunction::EmitCall(const CGFunctionInfo &CallInfo,
         
         // If the argument doesn't match, perform a bitcast to coerce it.  This
         // can happen due to trivial type mismatches.
+		bool ignore_type_check = false;
         if (IRArgNo < IRFuncTy->getNumParams() &&
-            V->getType() != IRFuncTy->getParamType(IRArgNo))
-          V = Builder.CreateBitCast(V, IRFuncTy->getParamType(IRArgNo));
+			V->getType() != IRFuncTy->getParamType(IRArgNo)) {
+			const auto src_as = V->getType()->getPointerAddressSpace();
+			auto param_type = IRFuncTy->getParamType(IRArgNo);
+			if(src_as > 0 && src_as != param_type->getPointerAddressSpace()) {
+				param_type = llvm::PointerType::get(cast<llvm::PointerType>(param_type->getScalarType())->getElementType(), src_as);
+				ignore_type_check = true;
+			}
+			V = Builder.CreateBitCast(V, param_type);
+		}
         Args.push_back(V);
         
-        checkArgMatches(V, IRArgNo, IRFuncTy);
+        checkArgMatches(V, IRArgNo, IRFuncTy, ignore_type_check);
         break;
       }
 
diff --git a/tools/clang/lib/CodeGen/CGClass.cpp b/tools/clang/lib/CodeGen/CGClass.cpp
index 9427de1..cd0626d 100644
--- a/tools/clang/lib/CodeGen/CGClass.cpp
+++ b/tools/clang/lib/CodeGen/CGClass.cpp
@@ -172,9 +172,16 @@ CodeGenFunction::GetAddressOfBaseClass(llvm::Value *Value,
     VBase = nullptr; // we no longer have a virtual step
   }
 
-  // Get the base pointer type.
-  llvm::Type *BasePtrTy = 
-    ConvertType((PathEnd[-1])->getType())->getPointerTo();
+  // Get the base pointer type, and keep the Values address space if it has one
+  const auto val_type = Value->getType();
+  unsigned val_as = 0;
+  if(val_type != nullptr &&
+     val_type->isPointerTy() &&
+     val_type->getPointerAddressSpace() != 0) {
+      val_as = val_type->getPointerAddressSpace();
+  }
+  llvm::Type *BasePtrTy =
+    ConvertType((PathEnd[-1])->getType())->getPointerTo(val_as);
 
   // If the static offset is zero and we don't have a virtual step,
   // just do a bitcast; null checks are unnecessary.
diff --git a/tools/clang/lib/CodeGen/CGDebugInfo.cpp b/tools/clang/lib/CodeGen/CGDebugInfo.cpp
index 048c8f8..0766a28 100644
--- a/tools/clang/lib/CodeGen/CGDebugInfo.cpp
+++ b/tools/clang/lib/CodeGen/CGDebugInfo.cpp
@@ -452,6 +452,36 @@ llvm::DIType CGDebugInfo::CreateType(const BuiltinType *BT) {
   case BuiltinType::OCLImage2dArray:
     return getOrCreateStructPtrType("opencl_image2d_array_t",
                                     OCLImage2dArrayDITy);
+  case BuiltinType::OCLImage2dDepth:
+    return getOrCreateStructPtrType("opencl_image2d_depth_t",
+                                    OCLImage2dDepthDITy);
+  case BuiltinType::OCLImage2dArrayDepth:
+    return getOrCreateStructPtrType("opencl_image2d_array_depth_t",
+                                    OCLImage2dArrayDepthDITy);
+  case BuiltinType::OCLImage2dMSAA:
+    return getOrCreateStructPtrType("opencl_image2d_msaa_t",
+                                    OCLImage2dMSAADITy);
+  case BuiltinType::OCLImage2dArrayMSAA:
+    return getOrCreateStructPtrType("opencl_image2d_array_msaa_t",
+                                    OCLImage2dArrayMSAADITy);
+  case BuiltinType::OCLImage2dMSAADepth:
+    return getOrCreateStructPtrType("opencl_image2d_msaa_depth_t",
+                                    OCLImage2dMSAADepthDITy);
+  case BuiltinType::OCLImage2dArrayMSAADepth:
+    return getOrCreateStructPtrType("opencl_image2d_array_msaa_depth_t",
+                                    OCLImage2dArrayMSAADepthDITy);
+  case BuiltinType::OCLImageCube:
+    return getOrCreateStructPtrType("opencl_imagecube_t",
+                                    OCLImageCubeDITy);
+  case BuiltinType::OCLImageCubeArray:
+    return getOrCreateStructPtrType("opencl_imagecube_array_t",
+                                    OCLImageCubeDITy);
+  case BuiltinType::OCLImageCubeDepth:
+    return getOrCreateStructPtrType("opencl_imagecube_depth_t",
+                                    OCLImageCubeDITy);
+  case BuiltinType::OCLImageCubeArrayDepth:
+    return getOrCreateStructPtrType("opencl_imagecube_array_deptht",
+                                    OCLImageCubeDITy);
   case BuiltinType::OCLImage3d:
     return getOrCreateStructPtrType("opencl_image3d_t",
                                     OCLImage3dDITy);
diff --git a/tools/clang/lib/CodeGen/CGDebugInfo.h b/tools/clang/lib/CodeGen/CGDebugInfo.h
index fc3f434..217f1d4 100644
--- a/tools/clang/lib/CodeGen/CGDebugInfo.h
+++ b/tools/clang/lib/CodeGen/CGDebugInfo.h
@@ -59,7 +59,8 @@ class CGDebugInfo {
   llvm::DICompositeType ObjTy;
   llvm::DIType SelTy;
   llvm::DIType OCLImage1dDITy, OCLImage1dArrayDITy, OCLImage1dBufferDITy;
-  llvm::DIType OCLImage2dDITy, OCLImage2dArrayDITy;
+  llvm::DIType OCLImage2dDITy, OCLImage2dArrayDITy, OCLImage2dDepthDITy, OCLImage2dArrayDepthDITy, OCLImage2dMSAADITy, OCLImage2dArrayMSAADITy, OCLImage2dMSAADepthDITy, OCLImage2dArrayMSAADepthDITy;
+  llvm::DIType OCLImageCubeDITy, OCLImageCubeArrayDITy, OCLImageCubeDepthDITy, OCLImageCubeArrayDepthDITy;
   llvm::DIType OCLImage3dDITy;
   llvm::DIType OCLEventDITy;
   llvm::DIType BlockLiteralGeneric;
diff --git a/tools/clang/lib/CodeGen/CGDecl.cpp b/tools/clang/lib/CodeGen/CGDecl.cpp
index 91f8041..2b1634b 100644
--- a/tools/clang/lib/CodeGen/CGDecl.cpp
+++ b/tools/clang/lib/CodeGen/CGDecl.cpp
@@ -150,8 +150,13 @@ static std::string GetStaticDeclName(CodeGenFunction &CGF, const VarDecl &D,
                                      const char *Separator) {
   CodeGenModule &CGM = CGF.CGM;
 
-  if (CGF.getLangOpts().CPlusPlus)
+  // don't cxx mangle OpenCL "local" variables (affects SPIR and AppleCL - Metal use cxx mangling)
+  if (CGF.getLangOpts().CPlusPlus &&
+      !(D.getStorageClass() == SC_OpenCLWorkGroupLocal &&
+        CGM.getContext().getLangOpts().OpenCL &&
+        CGM.getContext().getTargetInfo().getTriple().getVendorName().str() != "metal")) {
     return CGM.getMangledName(&D).str();
+  }
 
   StringRef ContextName;
   if (!CGF.CurFuncDecl) {
diff --git a/tools/clang/lib/CodeGen/CGExprAgg.cpp b/tools/clang/lib/CodeGen/CGExprAgg.cpp
index 4cf94c0..53f4bb5 100644
--- a/tools/clang/lib/CodeGen/CGExprAgg.cpp
+++ b/tools/clang/lib/CodeGen/CGExprAgg.cpp
@@ -1405,12 +1405,13 @@ void CodeGenFunction::EmitAggregateCopy(llvm::Value *DestPtr,
   if (getLangOpts().CPlusPlus) {
     if (const RecordType *RT = Ty->getAs<RecordType>()) {
       CXXRecordDecl *Record = cast<CXXRecordDecl>(RT->getDecl());
-      assert((Record->hasTrivialCopyConstructor() || 
+	  // TODO: fix this!
+      /*assert((Record->hasTrivialCopyConstructor() ||
               Record->hasTrivialCopyAssignment() ||
               Record->hasTrivialMoveConstructor() ||
               Record->hasTrivialMoveAssignment()) &&
              "Trying to aggregate-copy a type without a trivial copy/move "
-             "constructor or assignment operator");
+             "constructor or assignment operator");*/
       // Ignore empty classes in C++.
       if (Record->isEmpty())
         return;
diff --git a/tools/clang/lib/CodeGen/CGExprCXX.cpp b/tools/clang/lib/CodeGen/CGExprCXX.cpp
index 7aacee4..5c002e0 100644
--- a/tools/clang/lib/CodeGen/CGExprCXX.cpp
+++ b/tools/clang/lib/CodeGen/CGExprCXX.cpp
@@ -24,6 +24,8 @@
 using namespace clang;
 using namespace CodeGen;
 
+// TODO: fix other This uses?
+
 RValue CodeGenFunction::EmitCXXMemberCall(const CXXMethodDecl *MD,
                                           SourceLocation CallLoc,
                                           llvm::Value *Callee,
@@ -46,7 +48,8 @@ RValue CodeGenFunction::EmitCXXMemberCall(const CXXMethodDecl *MD,
   CallArgList Args;
 
   // Push the this ptr.
-  Args.add(RValue::get(This), MD->getThisType(getContext()));
+  auto this_type = getContext().getAddrSpaceQualType(MD->getThisType(getContext()), This->getType()->getPointerAddressSpace());
+  Args.add(RValue::get(This), this_type);
 
   // If there is an implicit parameter (e.g. VTT), emit it.
   if (ImplicitParam) {
diff --git a/tools/clang/lib/CodeGen/CGOpenCLRuntime.cpp b/tools/clang/lib/CodeGen/CGOpenCLRuntime.cpp
index 079ef72..d31a3cb 100644
--- a/tools/clang/lib/CodeGen/CGOpenCLRuntime.cpp
+++ b/tools/clang/lib/CodeGen/CGOpenCLRuntime.cpp
@@ -36,32 +36,137 @@ llvm::Type *CGOpenCLRuntime::convertOpenCLSpecificType(const Type *T) {
   llvm::LLVMContext& Ctx = CGM.getLLVMContext();
   uint32_t ImgAddrSpc =
     CGM.getContext().getTargetAddressSpace(LangAS::opencl_global);
-  switch (cast<BuiltinType>(T)->getKind()) {
-  default: 
-    llvm_unreachable("Unexpected opencl builtin type!");
-    return nullptr;
-  case BuiltinType::OCLImage1d:
-    return llvm::PointerType::get(llvm::StructType::create(
-                           Ctx, "opencl.image1d_t"), ImgAddrSpc);
-  case BuiltinType::OCLImage1dArray:
-    return llvm::PointerType::get(llvm::StructType::create(
-                           Ctx, "opencl.image1d_array_t"), ImgAddrSpc);
-  case BuiltinType::OCLImage1dBuffer:
-    return llvm::PointerType::get(llvm::StructType::create(
-                           Ctx, "opencl.image1d_buffer_t"), ImgAddrSpc);
-  case BuiltinType::OCLImage2d:
-    return llvm::PointerType::get(llvm::StructType::create(
-                           Ctx, "opencl.image2d_t"), ImgAddrSpc);
-  case BuiltinType::OCLImage2dArray:
-    return llvm::PointerType::get(llvm::StructType::create(
-                           Ctx, "opencl.image2d_array_t"), ImgAddrSpc);
-  case BuiltinType::OCLImage3d:
-    return llvm::PointerType::get(llvm::StructType::create(
-                           Ctx, "opencl.image3d_t"), ImgAddrSpc);
-  case BuiltinType::OCLSampler:
-    return llvm::IntegerType::get(Ctx, 32);
-  case BuiltinType::OCLEvent:
-    return llvm::PointerType::get(llvm::StructType::create(
-                           Ctx, "opencl.event_t"), 0);
+
+  if(!CGM.getCodeGenOpts().EmitAppleCLMetadata && !CGM.getCodeGenOpts().EmitAIRMetadata) {
+    switch (cast<BuiltinType>(T)->getKind()) {
+      default:
+        llvm_unreachable("Unexpected opencl builtin type!");
+        return nullptr;
+      case BuiltinType::OCLImage1d:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.image1d_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage1dArray:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.image1d_array_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage1dBuffer:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.image1d_buffer_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2d:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.image2d_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dArray:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.image2d_array_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dDepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.image2d_depth_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dArrayDepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.image2d_array_depth_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dMSAA:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.image2d_msaa_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dArrayMSAA:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.image2d_array_msaa_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dMSAADepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.image2d_msaa_depth_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dArrayMSAADepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.image2d_array_msaa_depth_t"), ImgAddrSpc);
+      case BuiltinType::OCLImageCube:
+      case BuiltinType::OCLImageCubeArray:
+      case BuiltinType::OCLImageCubeDepth:
+      case BuiltinType::OCLImageCubeArrayDepth:
+        // NOTE: cube map types not handled/implemented yet
+        llvm_unreachable("Unsupported image type (cube maps are not supported by opencl)!");
+        return nullptr;
+      case BuiltinType::OCLImage3d:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.image3d_t"), ImgAddrSpc);
+      case BuiltinType::OCLSampler:
+        return llvm::IntegerType::get(Ctx, 32);
+      case BuiltinType::OCLEvent:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "opencl.event_t"), 0);
+    }
+  }
+  else if(CGM.getCodeGenOpts().EmitAppleCLMetadata) {
+    switch (cast<BuiltinType>(T)->getKind()) {
+      default:
+        llvm_unreachable("Unexpected opencl builtin type!");
+        return nullptr;
+      case BuiltinType::OCLImage1d:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._image1d_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage1dArray:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._image1d_array_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage1dBuffer:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._image1d_buffer_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2d:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._image2d_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dArray:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._image2d_array_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dDepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._image2d_depth_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dArrayDepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._image2d_array_depth_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dMSAA:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._image2d_msaa_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dArrayMSAA:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._image2d_array_msaa_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dMSAADepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._image2d_msaa_depth_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dArrayMSAADepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._image2d_array_msaa_depth_t"), ImgAddrSpc);
+      case BuiltinType::OCLImageCube:
+      case BuiltinType::OCLImageCubeArray:
+      case BuiltinType::OCLImageCubeDepth:
+      case BuiltinType::OCLImageCubeArrayDepth:
+        // NOTE: cube map types not handled/implemented yet
+        llvm_unreachable("Unsupported image type (cube maps are not supported by opencl)!");
+        return nullptr;
+      case BuiltinType::OCLImage3d:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._image3d_t"), ImgAddrSpc);
+      case BuiltinType::OCLSampler:
+        return llvm::IntegerType::get(Ctx, 32);
+      case BuiltinType::OCLEvent:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._event_t"), 0);
+    }
+  }
+  else if(CGM.getCodeGenOpts().EmitAIRMetadata) {
+    switch (cast<BuiltinType>(T)->getKind()) {
+      default:
+        llvm_unreachable("Unexpected metal builtin type!");
+        return nullptr;
+      case BuiltinType::OCLImage1d:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._texture_1d_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage1dArray:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._texture_1d_array_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage1dBuffer:
+        llvm_unreachable("Unsupported image type (1D-buffer is not supported by metal)!");
+        return nullptr;
+      case BuiltinType::OCLImage2d:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._texture_2d_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dArray:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._texture_2d_array_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dDepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._depth_2d_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dArrayDepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._depth_2d_array_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dMSAA:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._texture_2d_ms_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dArrayMSAA:
+        llvm_unreachable("Unsupported image type (2D-Array-MSAA is not supported by metal)!");
+        return nullptr;
+      case BuiltinType::OCLImage2dMSAADepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._depth_2d_ms_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage2dArrayMSAADepth:
+        llvm_unreachable("Unsupported image type (2D-Array-MSAA-Depth is not supported by metal)!");
+        return nullptr;
+      case BuiltinType::OCLImageCube:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._texture_cube_t"), ImgAddrSpc);
+      case BuiltinType::OCLImageCubeArray:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._texture_cube_array_t"), ImgAddrSpc);
+      case BuiltinType::OCLImageCubeDepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._depth_cube_t"), ImgAddrSpc);
+      case BuiltinType::OCLImageCubeArrayDepth:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._depth_cube_array_t"), ImgAddrSpc);
+      case BuiltinType::OCLImage3d:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._texture_3d_t"), ImgAddrSpc);
+      case BuiltinType::OCLSampler:
+        return llvm::IntegerType::get(Ctx, 32);
+      case BuiltinType::OCLEvent:
+        return llvm::PointerType::get(llvm::StructType::create(Ctx, "struct._event_t"), 0);
+    }
   }
+  llvm_unreachable("Unexpected builtin type!");
+  return nullptr;
 }
diff --git a/tools/clang/lib/CodeGen/CodeGenFunction.cpp b/tools/clang/lib/CodeGen/CodeGenFunction.cpp
index 5ca3a78..8b8024f 100644
--- a/tools/clang/lib/CodeGen/CodeGenFunction.cpp
+++ b/tools/clang/lib/CodeGen/CodeGenFunction.cpp
@@ -30,6 +30,7 @@
 #include "llvm/IR/Intrinsics.h"
 #include "llvm/IR/MDBuilder.h"
 #include "llvm/IR/Operator.h"
+#include <sstream>
 using namespace clang;
 using namespace CodeGen;
 
@@ -340,110 +341,796 @@ static void GenOpenCLArgMetadata(const FunctionDecl *FD, llvm::Function *Fn,
                                  CodeGenModule &CGM,llvm::LLVMContext &Context,
                                  SmallVector <llvm::Value*, 5> &kernelMDArgs,
                                  CGBuilderTy& Builder, ASTContext &ASTCtx) {
-  // Create MDNodes that represent the kernel arg metadata.
-  // Each MDNode is a list in the form of "key", N number of values which is
-  // the same number of values as their are kernel arguments.
-
-  const PrintingPolicy &Policy = ASTCtx.getPrintingPolicy();
-
-  // MDNode for the kernel argument address space qualifiers.
-  SmallVector<llvm::Value*, 8> addressQuals;
-  addressQuals.push_back(llvm::MDString::get(Context, "kernel_arg_addr_space"));
-
-  // MDNode for the kernel argument access qualifiers (images only).
-  SmallVector<llvm::Value*, 8> accessQuals;
-  accessQuals.push_back(llvm::MDString::get(Context, "kernel_arg_access_qual"));
-
-  // MDNode for the kernel argument type names.
-  SmallVector<llvm::Value*, 8> argTypeNames;
-  argTypeNames.push_back(llvm::MDString::get(Context, "kernel_arg_type"));
-
-  // MDNode for the kernel argument type qualifiers.
-  SmallVector<llvm::Value*, 8> argTypeQuals;
-  argTypeQuals.push_back(llvm::MDString::get(Context, "kernel_arg_type_qual"));
-
-  // MDNode for the kernel argument names.
-  SmallVector<llvm::Value*, 8> argNames;
-  argNames.push_back(llvm::MDString::get(Context, "kernel_arg_name"));
-
-  for (unsigned i = 0, e = FD->getNumParams(); i != e; ++i) {
-    const ParmVarDecl *parm = FD->getParamDecl(i);
-    QualType ty = parm->getType();
-    std::string typeQuals;
-
-    if (ty->isPointerType()) {
-      QualType pointeeTy = ty->getPointeeType();
-
-      // Get address qualifier.
-      addressQuals.push_back(Builder.getInt32(ASTCtx.getTargetAddressSpace(
-        pointeeTy.getAddressSpace())));
-
-      // Get argument type name.
-      std::string typeName =
-          pointeeTy.getUnqualifiedType().getAsString(Policy) + "*";
-
-      // Turn "unsigned type" to "utype"
-      std::string::size_type pos = typeName.find("unsigned");
-      if (pos != std::string::npos)
-        typeName.erase(pos+1, 8);
-
-      argTypeNames.push_back(llvm::MDString::get(Context, typeName));
-
-      // Get argument type qualifiers:
-      if (ty.isRestrictQualified())
-        typeQuals = "restrict";
-      if (pointeeTy.isConstQualified() ||
-          (pointeeTy.getAddressSpace() == LangAS::opencl_constant))
-        typeQuals += typeQuals.empty() ? "const" : " const";
-      if (pointeeTy.isVolatileQualified())
-        typeQuals += typeQuals.empty() ? "volatile" : " volatile";
-    } else {
-      uint32_t AddrSpc = 0;
-      if (ty->isImageType())
-        AddrSpc =
-          CGM.getContext().getTargetAddressSpace(LangAS::opencl_global);
-
-      addressQuals.push_back(Builder.getInt32(AddrSpc));
-
-      // Get argument type name.
-      std::string typeName = ty.getUnqualifiedType().getAsString(Policy);
-
-      // Turn "unsigned type" to "utype"
-      std::string::size_type pos = typeName.find("unsigned");
-      if (pos != std::string::npos)
-        typeName.erase(pos+1, 8);
-
-      argTypeNames.push_back(llvm::MDString::get(Context, typeName));
-
-      // Get argument type qualifiers:
-      if (ty.isConstQualified())
-        typeQuals = "const";
-      if (ty.isVolatileQualified())
-        typeQuals += typeQuals.empty() ? "volatile" : " volatile";
-    }
-
-    argTypeQuals.push_back(llvm::MDString::get(Context, typeQuals));
+	// Create MDNodes that represent the kernel arg metadata.
+	// Each MDNode is a list in the form of "key", N number of values which is
+	// the same number of values as their are kernel arguments.
+	
+	// MDNode for the kernel argument address space qualifiers.
+	SmallVector<llvm::Value*, 8> addressQuals;
+	addressQuals.push_back(llvm::MDString::get(Context, "kernel_arg_addr_space"));
+	
+	// MDNode for the kernel argument access qualifiers (images only).
+	SmallVector<llvm::Value*, 8> accessQuals;
+	accessQuals.push_back(llvm::MDString::get(Context, "kernel_arg_access_qual"));
+	
+	// MDNode for the kernel argument type names.
+	SmallVector<llvm::Value*, 8> argTypeNames;
+	argTypeNames.push_back(llvm::MDString::get(Context, "kernel_arg_type"));
+	
+	// MDNode for the kernel argument base type names.
+	SmallVector<llvm::Value*, 8> argBaseTypeNames;
+	argBaseTypeNames.push_back(llvm::MDString::get(Context, "kernel_arg_base_type"));
+	
+	// MDNode for the kernel argument type qualifiers.
+	SmallVector<llvm::Value*, 8> argTypeQuals;
+	argTypeQuals.push_back(llvm::MDString::get(Context, "kernel_arg_type_qual"));
+	
+	// MDNode for the kernel argument names.
+	SmallVector<llvm::Value*, 8> argNames;
+	argNames.push_back(llvm::MDString::get(Context, "kernel_arg_name"));
+	
+	// Metadata values extractors.
+	static const auto getScalarMetadataValue = [](const clang::Type *Ty) {
+		if (!Ty->isUnsignedIntegerType()) {
+			return QualType(Ty, 0).getAsString();
+		}
+		
+		std::string TyName = QualType(Ty, 0).getAsString();
+		if (llvm::StringRef(TyName).startswith("unsigned")) {
+			// Replace unsigned <ty> with u<ty>
+			TyName.erase(1, 8);
+		}
+		
+		return TyName;
+	};
+	
+	// Creates a canonical name for complex types. In case of anonymous types, the
+	// function appends the meta-type name as prefix: e.g., in case the type is
+	// defined as: typedef struct {...} S, the method returns struct S.
+	static const auto canonicalName = [](const std::string &TyName,
+										 const std::string &MetaTyName) {
+		if (StringRef(TyName).startswith(MetaTyName)) {
+			return TyName;
+		}
+		
+		return std::string(MetaTyName) + " __" + TyName;
+	};
+	
+	static const auto getComplexMetadataValue = [](const clang::Type *Ty) {
+		std::string TyName = QualType(Ty, 0).getCanonicalType().getAsString();
+		
+		if (Ty->isStructureOrClassType()) {
+			return canonicalName(TyName, "struct");
+		}
+		
+		if (Ty->isUnionType()) {
+			return canonicalName(TyName, "union");
+		}
+		
+		if (Ty->isEnumeralType()) {
+			return canonicalName(TyName, "enum");
+		}
+		
+		return getScalarMetadataValue(Ty);
+	};
+	
+	static const auto getVectorMetadataValue = [](const clang::ExtVectorType *Ty) {
+		const clang::VectorType *VTy = llvm::dyn_cast<clang::VectorType>(Ty);
+		assert(VTy && "Cast to vector failed");
+		
+		std::stringstream Ret;
+		Ret << getScalarMetadataValue(VTy->getElementType().getTypePtr());
+		Ret << VTy->getNumElements();
+		
+		return Ret.str();
+	};
+	
+	static const auto getPointerOrRefMetadataValue = [](const clang::Type *PTy, bool CanTy) {
+		std::string Ret;
+		
+		if (const ExtVectorType *VTy = llvm::dyn_cast<ExtVectorType>(PTy)) {
+			Ret = getVectorMetadataValue(VTy);
+		}
+		else {
+			Ret = CanTy ? getComplexMetadataValue(PTy) : getScalarMetadataValue(PTy);
+		}
+		
+		return Ret + "*";
+	};
+	
+	static const auto add_image_arg = [&Builder, &Context, &CGM,
+									   &addressQuals, &accessQuals, &argTypeNames, &argBaseTypeNames,
+									   &argNames, &argTypeQuals](const clang::QualType& type,
+																 const OpenCLImageAccessAttr* access_attr,
+																 const std::string& name) {
+		// image is always in global address space
+		addressQuals.push_back(Builder.getInt32(CGM.getContext().getTargetAddressSpace(LangAS::opencl_global)));
+		
+		// set access qualifier
+		if (access_attr && access_attr->isWriteOnly()) {
+			accessQuals.push_back(llvm::MDString::get(Context, "write_only"));
+		}
+		else if (access_attr && access_attr->isReadWrite()) {
+			accessQuals.push_back(llvm::MDString::get(Context, "read_write"));
+		}
+		else {
+			accessQuals.push_back(llvm::MDString::get(Context, "read_only"));
+		}
+		
+		// image type / base type
+		// NOTE: always set base type, because types in image aggregates might be "weird", but should be considered normal
+		const QualType baseTy = type.isCanonical() ? type : type.getCanonicalType();
+		const auto type_name = getComplexMetadataValue(baseTy.getTypePtr());
+		argTypeNames.push_back(llvm::MDString::get(Context, type_name));
+		argBaseTypeNames.push_back(llvm::MDString::get(Context, type_name));
+		
+		// set arg name
+		argNames.push_back(llvm::MDString::get(Context, name));
+		
+		// type quals is always empty for images
+		argTypeQuals.push_back(llvm::MDString::get(Context, ""));
+	};
+	
+	for(const auto& parm : FD->params()) {
+		const auto clang_type = parm->getType();
+		const bool IsCanonical = clang_type.isCanonical();
+		
+		// pointer / buffer
+		if (clang_type->isPointerType() || clang_type->isReferenceType()) {
+			// Get argument type name.
+			std::string tyName;
+			if (const PointerType *PTy = dyn_cast<PointerType>(clang_type.getTypePtr())) {
+				tyName = getPointerOrRefMetadataValue(PTy->getPointeeType().getTypePtr(), false);
+			}
+			else if (const ReferenceType *RTy = dyn_cast<ReferenceType>(clang_type.getTypePtr())) {
+				tyName = getPointerOrRefMetadataValue(RTy->getPointeeType().getTypePtr(), false);
+			}
+			else {
+				tyName = getScalarMetadataValue(clang_type.getTypePtr());
+			}
+			argTypeNames.push_back(llvm::MDString::get(Context, tyName));
+			
+			// Acquiring the base type of the parameter.
+			std::string baseTyName;
+			if (IsCanonical) baseTyName = tyName;
+			else {
+				baseTyName = getPointerOrRefMetadataValue(clang_type.getCanonicalType()->getAs<PointerType>()->getPointeeType().getTypePtr(), true);
+			}
+			argBaseTypeNames.push_back(llvm::MDString::get(Context, baseTyName));
+			
+			// Get address qualifier.
+			QualType pointeeTy = clang_type->getPointeeType();
+			addressQuals.push_back(Builder.getInt32(ASTCtx.getTargetAddressSpace(pointeeTy.getAddressSpace())));
+			
+			// Get argument type qualifiers:
+			std::string typeQuals;
+			if (clang_type.isRestrictQualified()) {
+				typeQuals = "restrict";
+			}
+			if (pointeeTy.isConstQualified() ||
+				(pointeeTy.getAddressSpace() == LangAS::opencl_constant)) {
+				typeQuals += typeQuals.empty() ? "const" : " const";
+			}
+			if (pointeeTy.isVolatileQualified()) {
+				typeQuals += typeQuals.empty() ? "volatile" : " volatile";
+			}
+			argTypeQuals.push_back(llvm::MDString::get(Context, typeQuals));
+			
+			accessQuals.push_back(llvm::MDString::get(Context, "none"));
+			argNames.push_back(llvm::MDString::get(Context, parm->getName()));
+		}
+		// normal image
+		else if(clang_type->isImageType()) {
+			add_image_arg(clang_type, parm->getAttr<OpenCLImageAccessAttr>(),
+						  parm->getName().str());
+		}
+		// aggregate image
+		else if(clang_type->isAggregateImageType()) {
+			const auto decl = (clang_type->isStructureType() ?
+							   clang_type->getAsStructureType()->getDecl() :
+							   clang_type->getAsCXXRecordDecl());
+			const std::string base_name = parm->getName().str() + ".";
+			unsigned field_idx = 0;
+			for(const auto& field : decl->fields()) {
+				const auto field_type = field->getType();
+				
+				add_image_arg(field_type, field->getAttr<OpenCLImageAccessAttr>(),
+							  base_name + std::to_string(field_idx));
+				++field_idx;
+			}
+		}
+		// kernel parameter
+		else {
+			addressQuals.push_back(Builder.getInt32(0 /* private address space*/));
+			
+			// Get argument type name.
+			std::string tyName = getScalarMetadataValue(clang_type.getTypePtr());
+			argTypeNames.push_back(llvm::MDString::get(Context, tyName));
+			
+			// Acquiring the base type of the parameter.
+			QualType baseTy = IsCanonical ? clang_type : clang_type.getCanonicalType();
+			std::string baseTyName;
+			if (clang_type->isVectorType()) {
+				baseTyName = getVectorMetadataValue(llvm::dyn_cast<clang::ExtVectorType>(baseTy.getTypePtr()));
+			}
+			else {
+				baseTyName = getComplexMetadataValue(baseTy.getTypePtr());
+			}
+			argBaseTypeNames.push_back(llvm::MDString::get(Context, baseTyName));
+			
+			// Get argument type qualifiers:
+			std::string typeQuals;
+			if (clang_type.isConstQualified()) {
+				typeQuals = "const";
+			}
+			if (clang_type.isVolatileQualified()) {
+				typeQuals += typeQuals.empty() ? "volatile" : " volatile";
+			}
+			argTypeQuals.push_back(llvm::MDString::get(Context, typeQuals));
+			
+			accessQuals.push_back(llvm::MDString::get(Context, "none"));
+			argNames.push_back(llvm::MDString::get(Context, parm->getName()));
+		}
+	}
+	
+	kernelMDArgs.push_back(llvm::MDNode::get(Context, addressQuals));
+	kernelMDArgs.push_back(llvm::MDNode::get(Context, accessQuals));
+	kernelMDArgs.push_back(llvm::MDNode::get(Context, argTypeNames));
+	kernelMDArgs.push_back(llvm::MDNode::get(Context, argBaseTypeNames));
+	kernelMDArgs.push_back(llvm::MDNode::get(Context, argTypeQuals));
+	kernelMDArgs.push_back(llvm::MDNode::get(Context, argNames));
+}
 
-    // Get image access qualifier:
-    if (ty->isImageType()) {
-      const OpenCLImageAccessAttr *A = parm->getAttr<OpenCLImageAccessAttr>();
-      if (A && A->isWriteOnly())
-        accessQuals.push_back(llvm::MDString::get(Context, "write_only"));
-      else
-        accessQuals.push_back(llvm::MDString::get(Context, "read_only"));
-      // FIXME: what about read_write?
-    } else
-      accessQuals.push_back(llvm::MDString::get(Context, "none"));
+static void GenAIRMetadata(const FunctionDecl *FD, llvm::Function *Fn,
+						   CodeGenModule &CGM,llvm::LLVMContext &Context,
+						   SmallVector <llvm::Value*, 5> &kernelMDArgs,
+						   CGBuilderTy& Builder, ASTContext &ASTCtx) {
+	//
+	SmallVector<llvm::Value*, 1> empty_set; // no idea why this is needed or used for
+	SmallVector<llvm::Value*, 8> arg_infos;
+	
+	//
+	const PrintingPolicy &Policy = ASTCtx.getPrintingPolicy();
+	
+	//
+	unsigned int arg_idx = 0, buffer_idx = 0, tex_idx = 0;
+	for(const auto& parm : FD->params()) {
+		const auto clang_type = parm->getType();
+		const auto llvm_type = next(Fn->getArgumentList().begin(), arg_idx)->getType();
+
+		static const auto add_image_arg = [&Builder, &tex_idx, &arg_infos,
+										   &arg_idx, &Context](const clang::QualType& type,
+															   const OpenCLImageAccessAttr* access_attr,
+															   const FloorImageSampleTypeAttr* sample_type,
+															   const std::string& name) {
+			SmallVector<llvm::Value*, 16> arg_info;
+			
+			// #0: param index
+			arg_info.push_back(Builder.getInt32(arg_idx));
+			// #1: storage type
+			arg_info.push_back(llvm::MDString::get(Context, "air.texture"));
+			// #2/#3: location_index (note: separate for buffers and textures)
+			arg_info.push_back(llvm::MDString::get(Context, "air.location_index"));
+			arg_info.push_back(Builder.getInt32(tex_idx));
+			++tex_idx;
+			// #4: unknown? always 1
+			arg_info.push_back(Builder.getInt32(1));
+			// #5: access type (sample = 0, read = 1 or write = 2)
+			// note that "read" is essentially a subset of "sample" -> use "sample" for r/o
+			if(access_attr && access_attr->isWriteOnly()) {
+				arg_info.push_back(llvm::MDString::get(Context, "air.write"));
+			}
+			else if(access_attr && access_attr->isReadWrite()) {
+				// TODO: this isn't really supported
+				arg_info.push_back(llvm::MDString::get(Context, "air.write"));
+			}
+			else {
+				arg_info.push_back(llvm::MDString::get(Context, "air.sample"));
+			}
+			
+			// #6/#7: texture type
+			arg_info.push_back(llvm::MDString::get(Context, "air.arg_type_name"));
+			// proper type is necessary for metal debugging purposes
+			std::string tex_type_name;
+			if(type->isImage1dT()) tex_type_name = "texture1d";
+			else if(type->isImage1dArrayT()) tex_type_name = "texture1d_array";
+			//else if(type->isImage1dBufferT()) tex_type_name = ""; // not supported
+			else if(type->isImage2dT()) tex_type_name = "texture2d";
+			else if(type->isImage2dArrayT()) tex_type_name = "texture2d_array";
+			else if(type->isImage2dDepthT()) tex_type_name = "depth2d";
+			else if(type->isImage2dArrayDepthT()) tex_type_name = "depth2d_array";
+			else if(type->isImage2dMSAAT()) tex_type_name = "texture2d_ms";
+			//else if(type->isImage2dArrayMSAAT()) tex_type_name = ""; // not supported
+			else if(type->isImage2dMSAADepthT()) tex_type_name = "depth2d_ms";
+			//else if(type->isImage2dArrayMSAADepthT()) tex_type_name = ""; // not supported
+			else if(type->isImage3dT()) tex_type_name = "texture3d";
+			else if(type->isImageCubeT()) tex_type_name = "texturecube";
+			else if(type->isImageCubeArrayT()) tex_type_name = "texturecube_array";
+			else if(type->isImageCubeDepthT()) tex_type_name = "depthcube";
+			else if(type->isImageCubeArrayDepthT()) tex_type_name = "depthcube_array";
+			else tex_type_name = "texture";
+			
+			tex_type_name += "<";
+			std::string sample_type_str = "float";
+			if(sample_type) {
+				if(sample_type->isInt()) sample_type_str = "int";
+				else if(sample_type->isUint()) sample_type_str = "uint";
+				// else: float
+			}
+			// else: just assume float
+			tex_type_name += sample_type_str;
+			tex_type_name += ", ";
+			if(access_attr && access_attr->isReadOnly()) {
+				tex_type_name += "sample";
+			}
+			else tex_type_name += "write";
+			tex_type_name += ">";
+			
+			arg_info.push_back(llvm::MDString::get(Context, tex_type_name));
+			
+			// #8/#9: arg name
+			arg_info.push_back(llvm::MDString::get(Context, "air.arg_name"));
+			arg_info.push_back(llvm::MDString::get(Context, StringRef(name)));
+			arg_infos.push_back(llvm::MDNode::get(Context, arg_info));
+		};
+		
+		// pointer / buffer
+		if(clang_type->isPointerType() || clang_type->isReferenceType()) {
+			const auto pointee_type = llvm_type->getPointerElementType();
+			const auto clang_unq_ty = clang_type->getPointeeType().getTypePtr()->getBaseElementTypeUnsafe();
+			
+			SmallVector<llvm::Value*, 16> arg_info;
+			
+			// #0: param index
+			arg_info.push_back(Builder.getInt32(arg_idx));
+			// #1: storage type
+			arg_info.push_back(llvm::MDString::get(Context, "air.buffer"));
+			// #2/#3: location_index (note: separate for buffers and textures)
+			arg_info.push_back(llvm::MDString::get(Context, "air.location_index"));
+			arg_info.push_back(Builder.getInt32(buffer_idx));
+			++buffer_idx;
+			// #4: unknown? always 1
+			arg_info.push_back(Builder.getInt32(1));
+			// #5: access (read/read_write, TODO: write?)
+			const auto clang_pointee_type = clang_type->getPointeeType();
+			if(clang_pointee_type.isConstQualified() ||
+			   (clang_pointee_type.getAddressSpace() == LangAS::opencl_constant)) {
+				arg_info.push_back(llvm::MDString::get(Context, "air.read"));
+			}
+			else {
+				arg_info.push_back(llvm::MDString::get(Context, "air.read_write"));
+			}
+			
+			// TODO: #6/#7: struct info
+			
+			// #8/#9: type size
+			arg_info.push_back(llvm::MDString::get(Context, "air.arg_type_size"));
+			arg_info.push_back(Builder.getInt32(CGM.getDataLayout().getTypeStoreSize(pointee_type)));
+			// #10/#11: type alignment
+			arg_info.push_back(llvm::MDString::get(Context, "air.arg_type_align_size"));
+			arg_info.push_back(Builder.getInt32(CGM.getDataLayout().getTypeAllocSize(pointee_type)));
+			//getPrimitiveSizeInBits
+			// #12/#13: type name, note: air wants the pointed-to/pointee type here, w/o qualifiers
+			auto unqualified_type = clang_unq_ty->getCanonicalTypeInternal();
+			auto type_name = unqualified_type.getAsString(Policy);
+			// Turn "unsigned type" to "utype"
+			const auto pos = type_name.find("unsigned");
+			if(pos != std::string::npos) type_name.erase(pos + 1, 8);
+			arg_info.push_back(llvm::MDString::get(Context, "air.arg_type_name"));
+			arg_info.push_back(llvm::MDString::get(Context, type_name));
+			// #14/#15: arg name
+			arg_info.push_back(llvm::MDString::get(Context, "air.arg_name"));
+			arg_info.push_back(llvm::MDString::get(Context, parm->getName()));
+			arg_infos.push_back(llvm::MDNode::get(Context, arg_info));
+		}
+		// image
+		else if(clang_type->isImageType()) {
+			add_image_arg(clang_type, parm->getAttr<OpenCLImageAccessAttr>(),
+						  parm->getAttr<FloorImageSampleTypeAttr>(), parm->getName().str());
+		}
+		// aggregate image
+		else if(clang_type->isAggregateImageType()) {
+			const auto decl = (clang_type->isStructureType() ?
+							   clang_type->getAsStructureType()->getDecl() :
+							   clang_type->getAsCXXRecordDecl());
+			const std::string base_name = parm->getName().str() + ".";
+			unsigned field_idx = 0;
+			for(const auto& field : decl->fields()) {
+				const auto field_type = field->getType();
+				
+				add_image_arg(field_type, field->getAttr<OpenCLImageAccessAttr>(),
+							  field->getAttr<FloorImageSampleTypeAttr>(), base_name + std::to_string(field_idx));
+				++field_idx;
+				
+				// next llvm arg
+				++arg_idx;
+			}
+			// fix up llvm arg count (will inc again after this)
+			--arg_idx;
+		}
+		// unsupported simple kernel parameter
+		else {
+			CGM.Error(parm->getSourceRange().getBegin(),
+					  StringRef("metal kernel parameter must be a pointer or an image type!"));
+			return;
+		}
+		
+		// next llvm arg
+		++arg_idx;
+	}
+	
+	// add id handling arg metadata
+	// NOTE: the actual args are later added by MetalFinal + the order in here must match the order in MetalFinal
+	static const auto add_id_arg = [&arg_idx, &arg_infos, &Builder, &Context](const char* name, const char* air_name) {
+		SmallVector<llvm::Value*, 6> arg_info;
+		arg_info.push_back(Builder.getInt32(arg_idx));
+		arg_info.push_back(llvm::MDString::get(Context, air_name));
+		arg_info.push_back(llvm::MDString::get(Context, "air.arg_type_name"));
+		arg_info.push_back(llvm::MDString::get(Context, "uint3"));
+		arg_info.push_back(llvm::MDString::get(Context, "air.arg_name"));
+		arg_info.push_back(llvm::MDString::get(Context, name));
+		arg_infos.push_back(llvm::MDNode::get(Context, arg_info));
+		
+		// next llvm arg
+		++arg_idx;
+	};
+	add_id_arg("__metal__global_id__", "air.thread_position_in_grid");
+	add_id_arg("__metal__global_size__", "air.threads_per_grid");
+	add_id_arg("__metal__local_id__", "air.thread_position_in_threadgroup");
+	add_id_arg("__metal__local_size__", "air.threads_per_threadgroup");
+	add_id_arg("__metal__group_id__", "air.threadgroup_position_in_grid");
+	add_id_arg("__metal__group_size__", "air.threadgroups_per_grid");
+
+	// insert into kernel metadata
+	kernelMDArgs.push_back(llvm::MDNode::get(Context, empty_set));
+	kernelMDArgs.push_back(llvm::MDNode::get(Context, arg_infos));
+}
 
-    // Get argument name.
-    argNames.push_back(llvm::MDString::get(Context, parm->getName()));
-  }
+static void GenAppleCLMetadata(const FunctionDecl *FD, llvm::Function *Fn,
+							   CodeGenModule &CGM,llvm::LLVMContext &Context,
+							   SmallVector <llvm::Value*, 5> &kernelMDArgs,
+							   CGBuilderTy& Builder, ASTContext &ASTCtx) {
+	//
+	SmallVector<llvm::Value*, 8> arg_infos;
+	
+	// always starts with apple.cl.arg_metadata
+	arg_infos.push_back(llvm::MDString::get(Context, "apple.cl.arg_metadata"));
+	
+	//
+	for(const auto& parm : FD->params()) {
+		const auto clang_type = parm->getType();
+		
+		static const auto add_image_arg = [&arg_infos, &Context](const OpenCLImageAccessAttr* access_attr) {
+			SmallVector<llvm::Value*, 2> arg_info;
+			
+			arg_info.push_back(llvm::MDString::get(Context, "image"));
+			
+			// access qualifier
+			if(access_attr && access_attr->isWriteOnly()) {
+				arg_info.push_back(llvm::MDString::get(Context, "write"));
+			}
+			else if(access_attr && access_attr->isReadWrite()) {
+				arg_info.push_back(llvm::MDString::get(Context, "read/write"));
+			}
+			else {
+				arg_info.push_back(llvm::MDString::get(Context, "read"));
+			}
+			
+			arg_infos.push_back(llvm::MDNode::get(Context, arg_info));
+		};
+		
+		// #0: storage type (stream or image)
+		if(clang_type->isPointerType() || clang_type->isReferenceType()) {
+			SmallVector<llvm::Value*, 3> arg_info;
+			arg_info.push_back(llvm::MDString::get(Context, "stream"));
+			
+			// #1: access qualifier
+			const auto clang_pointee_type = clang_type->getPointeeType();
+			if(clang_pointee_type.isConstQualified() ||
+			   (clang_pointee_type.getAddressSpace() == LangAS::opencl_constant)) {
+				arg_info.push_back(llvm::MDString::get(Context, "read"));
+			}
+			else {
+				arg_info.push_back(llvm::MDString::get(Context, "write"));
+			}
+			
+			// #2: address space
+			switch(clang_pointee_type.getAddressSpace()) {
+				case LangAS::opencl_global:
+					arg_info.push_back(llvm::MDString::get(Context, "global"));
+					break;
+				case LangAS::opencl_local:
+					arg_info.push_back(llvm::MDString::get(Context, "local"));
+					break;
+				case LangAS::opencl_constant:
+					arg_info.push_back(llvm::MDString::get(Context, "constant"));
+					break;
+			}
+			
+			arg_infos.push_back(llvm::MDNode::get(Context, arg_info));
+		}
+		else if(clang_type->isImageType()) {
+			add_image_arg(parm->getAttr<OpenCLImageAccessAttr>());
+		}
+		else if(clang_type->isAggregateImageType()) {
+			const auto decl = (clang_type->isStructureType() ?
+							   clang_type->getAsStructureType()->getDecl() :
+							   clang_type->getAsCXXRecordDecl());
+			for(const auto& field : decl->fields()) {
+				add_image_arg(field->getAttr<OpenCLImageAccessAttr>());
+			}
+		}
+		else {
+			// simple kernel parameter (not a buffer) -> don't write anything
+			arg_infos.push_back(llvm::MDNode::get(Context, {}));
+		}
+	}
+	
+	// insert into kernel metadata
+	kernelMDArgs.push_back(llvm::MDNode::get(Context, arg_infos));
+}
 
-  kernelMDArgs.push_back(llvm::MDNode::get(Context, addressQuals));
-  kernelMDArgs.push_back(llvm::MDNode::get(Context, accessQuals));
-  kernelMDArgs.push_back(llvm::MDNode::get(Context, argTypeNames));
-  kernelMDArgs.push_back(llvm::MDNode::get(Context, argTypeQuals));
-  kernelMDArgs.push_back(llvm::MDNode::get(Context, argNames));
+void CodeGenFunction::EmitFloorKernelMetadata(const FunctionDecl *FD,
+											  llvm::Function *Fn,
+											  const FunctionArgList &Args) {
+	if (!FD->hasAttr<OpenCLKernelAttr>() && !FD->hasAttr<CUDAGlobalAttr>()) {
+		return;
+	}
+	
+	llvm::LLVMContext &Context = getLLVMContext();
+	
+	//
+	SmallVector<llvm::Value*, 16> arg_infos;
+	
+	// #0: info version
+	arg_infos.push_back(Builder.getInt32(1));
+	// #1: kernel name
+	arg_infos.push_back(llvm::MDString::get(Context, Fn->getName()));
+	
+	// iterate over clang function decl parameters
+	// NOTE: in case of struct expansion, this doesn't match the llvm parameters
+	// (which is why it iterates over the original clang list!)
+	unsigned int arg_idx = 0;
+	for(const auto& parm : FD->params()) {
+		const auto clang_type = parm->getType();
+		const auto llvm_type = next(Fn->getArgumentList().begin(), arg_idx)->getType();
+		
+		enum class FLOOR_ARG_INFO : uint64_t {
+			// 0 == invalid!
+			NONE						= (0ull),
+			
+			// sets: 00000000 000000-- -------- 00000xxx 00000000 00000000 00000000 00000000
+			__AS_SHIFT					= (32ull),
+			__AS_MASK					= (0x0000000700000000ull),
+			AS_NONE						= NONE,
+			AS_GLOBAL					= (1ull << __AS_SHIFT),
+			AS_LOCAL					= (2ull << __AS_SHIFT),
+			AS_CONSTANT					= (3ull << __AS_SHIFT),
+			AS_IMAGE					= (4ull << __AS_SHIFT),
+			
+			// sets: 00000000 000000-- xxxxxxxx 00000--- 00000000 00000000 00000000 00000000
+			__IMG_TYPE_SHIFT			= (40ull),
+			__IMG_TYPE_MASK				= (0x0000FF0000000000ull),
+			IMG_1D						= (1ull << __IMG_TYPE_SHIFT),
+			IMG_1D_ARRAY				= (2ull << __IMG_TYPE_SHIFT),
+			IMG_1D_BUFFER				= (3ull << __IMG_TYPE_SHIFT),
+			IMG_2D						= (4ull << __IMG_TYPE_SHIFT),
+			IMG_2D_ARRAY				= (5ull << __IMG_TYPE_SHIFT),
+			IMG_2D_DEPTH				= (6ull << __IMG_TYPE_SHIFT),
+			IMG_2D_ARRAY_DEPTH			= (7ull << __IMG_TYPE_SHIFT),
+			IMG_2D_MSAA					= (8ull << __IMG_TYPE_SHIFT),
+			IMG_2D_ARRAY_MSAA			= (9ull << __IMG_TYPE_SHIFT),
+			IMG_2D_MSAA_DEPTH			= (10ull << __IMG_TYPE_SHIFT),
+			IMG_2D_ARRAY_MSAA_DEPTH		= (11ull << __IMG_TYPE_SHIFT),
+			IMG_3D						= (12ull << __IMG_TYPE_SHIFT),
+			IMG_CUBE					= (13ull << __IMG_TYPE_SHIFT),
+			IMG_CUBE_ARRAY				= (14ull << __IMG_TYPE_SHIFT),
+			IMG_CUBE_DEPTH				= (15ull << __IMG_TYPE_SHIFT),
+			IMG_CUBE_ARRAY_DEPTH		= (16ull << __IMG_TYPE_SHIFT),
+			
+			// sets: 00000000 000000xx -------- 00000--- 00000000 00000000 00000000 00000000
+			__IMG_ACCESS_SHIFT			= (48ull),
+			__IMG_ACCESS_MASK			= (0x0003000000000000ull),
+			IMG_ACCESS_READ				= (1ull << __IMG_ACCESS_SHIFT),
+			IMG_ACCESS_WRITE			= (2ull << __IMG_ACCESS_SHIFT),
+			IMG_ACCESS_READ_WRITE		= (IMG_ACCESS_READ | IMG_ACCESS_WRITE),
+		};
+		
+		static const auto to_fas = [](const unsigned& addr_space) {
+			if(addr_space == LangAS::opencl_global) {
+				return FLOOR_ARG_INFO::AS_GLOBAL;
+			}
+			else if(addr_space == LangAS::opencl_local) {
+				return FLOOR_ARG_INFO::AS_LOCAL;
+			}
+			else if(addr_space == LangAS::opencl_constant) {
+				return FLOOR_ARG_INFO::AS_CONSTANT;
+			}
+			return FLOOR_ARG_INFO::AS_NONE;
+		};
+		static const auto get_image_access = [](const OpenCLImageAccessAttr* access_attr) {
+			if(access_attr != nullptr) {
+				if(access_attr->isWriteOnly()) {
+					return FLOOR_ARG_INFO::IMG_ACCESS_WRITE;
+				}
+				else if(access_attr->isReadWrite()) {
+					return FLOOR_ARG_INFO::IMG_ACCESS_READ_WRITE;
+				}
+			}
+			return FLOOR_ARG_INFO::IMG_ACCESS_READ;
+		};
+		static const auto img_type_to_floor_type = [](const clang::Type* type) {
+			if(type->isImage1dT()) return FLOOR_ARG_INFO::IMG_1D;
+			else if(type->isImage1dArrayT()) return FLOOR_ARG_INFO::IMG_1D_ARRAY;
+			else if(type->isImage1dBufferT()) return FLOOR_ARG_INFO::IMG_1D_BUFFER;
+			else if(type->isImage2dT()) return FLOOR_ARG_INFO::IMG_2D;
+			else if(type->isImage2dArrayT()) return FLOOR_ARG_INFO::IMG_2D_ARRAY;
+			else if(type->isImage2dDepthT()) return FLOOR_ARG_INFO::IMG_2D_DEPTH;
+			else if(type->isImage2dArrayDepthT()) return FLOOR_ARG_INFO::IMG_2D_ARRAY_DEPTH;
+			else if(type->isImage2dMSAAT()) return FLOOR_ARG_INFO::IMG_2D_MSAA;
+			else if(type->isImage2dArrayMSAAT()) return FLOOR_ARG_INFO::IMG_2D_ARRAY_MSAA;
+			else if(type->isImage2dMSAADepthT()) return FLOOR_ARG_INFO::IMG_2D_MSAA_DEPTH;
+			else if(type->isImage2dArrayMSAADepthT()) return FLOOR_ARG_INFO::IMG_2D_ARRAY_MSAA_DEPTH;
+			else if(type->isImage3dT()) return FLOOR_ARG_INFO::IMG_3D;
+			else if(type->isImageCubeT()) return FLOOR_ARG_INFO::IMG_CUBE;
+			else if(type->isImageCubeArrayT()) return FLOOR_ARG_INFO::IMG_CUBE_ARRAY;
+			else if(type->isImageCubeDepthT()) return FLOOR_ARG_INFO::IMG_CUBE_DEPTH;
+			else if(type->isImageCubeArrayDepthT()) return FLOOR_ARG_INFO::IMG_CUBE_ARRAY_DEPTH;
+			return (FLOOR_ARG_INFO)~0ull;
+		};
+		static const auto add_image_arg = [this, &arg_infos](const FLOOR_ARG_INFO& floor_img_type,
+															 const FLOOR_ARG_INFO& access) {
+			uint64_t arg_info = uint64_t(FLOOR_ARG_INFO::AS_IMAGE);
+			arg_info |= uint64_t(floor_img_type);
+			arg_info |= uint64_t(access);
+			arg_infos.push_back(Builder.getInt64(arg_info));
+		};
+		
+		// #2+: argument sizes + types
+		if(clang_type->isPointerType() || clang_type->isReferenceType()) {
+			const auto clang_pointee_type = clang_type->getPointeeType();
+			const auto pointee_type = llvm_type->getPointerElementType();
+			
+			uint64_t arg_info = CGM.getDataLayout().getTypeStoreSize(pointee_type);
+			if(getLangOpts().OpenCL) {
+				// else: should be an error
+				arg_info |= (uint64_t)to_fas(clang_pointee_type.getAddressSpace());
+			}
+			else if(getLangOpts().CUDA) {
+				// always pretend this is global
+				arg_info |= (uint64_t)FLOOR_ARG_INFO::AS_GLOBAL;
+			}
+			arg_infos.push_back(Builder.getInt64(arg_info));
+		}
+		// handle image types
+		else if(clang_type->isImageType()) {
+			add_image_arg(img_type_to_floor_type(clang_type.getTypePtr()),
+						  get_image_access(parm->getAttr<OpenCLImageAccessAttr>()));
+		}
+		// aggregate of image types (used with opencl and metal)
+		else if(clang_type->isAggregateImageType()) {
+			const auto decl = (clang_type->isStructureType() ?
+							   clang_type->getAsStructureType()->getDecl() :
+							   clang_type->getAsCXXRecordDecl());
+			
+			// field count must either be 1 (for single read or write images) or 2 (one read, one write image)
+			const auto field_count = std::distance(decl->field_begin(), decl->field_end());
+			if(field_count == 0) {
+				CGM.Error(decl->getSourceRange().getBegin(),
+						  StringRef("no fields in aggregate-image"));
+				return;
+			}
+			else if(field_count > 2) {
+				CGM.Error(decl->getSourceRange().getBegin(),
+						  StringRef("too many fields in aggregate-image"));
+				return;
+			}
+			
+			// sanity check that all field types are actually images, have proper access attributes and image types match
+			// (should probably put this somewhere else, since it is sema-checking, but then I'd need to duplicate code)
+			FLOOR_ARG_INFO floor_img_type = FLOOR_ARG_INFO::NONE;
+			uint64_t floor_img_access = 0;
+			for(const auto& field : decl->fields()) {
+				const auto field_type = field->getType();
+				if(!field_type->isImageType() || field_type->isAggregateImageType()) {
+					CGM.Error(field->getSourceRange().getBegin(),
+							  StringRef("non-image type in an aggregate-image"));
+					return;
+				}
+				
+				const auto access_attr = field->getAttr<OpenCLImageAccessAttr>();
+				if(access_attr == nullptr) {
+					CGM.Error(field->getSourceRange().getBegin(),
+							  StringRef("image type in an aggregate-image must have an access qualifier"));
+					return;
+				}
+				if(access_attr->isReadWrite()) {
+					CGM.Error(field->getSourceRange().getBegin(),
+							  StringRef("read-write access qualifier not allowed for images inside an aggregate-image"));
+					return;
+				}
+				floor_img_access |= uint64_t(get_image_access(access_attr));
+				
+				// first field initializes this
+				if(floor_img_type == FLOOR_ARG_INFO::NONE) {
+					floor_img_type = img_type_to_floor_type(field_type.getTypePtr());
+				}
+				else {
+					// second field must have the same type!
+					if(floor_img_type != img_type_to_floor_type(field_type.getTypePtr())) {
+						CGM.Error(field->getSourceRange().getBegin(),
+								  StringRef("second image in aggregate-image does not have the same type as the first"));
+						return;
+					}
+				}
+			}
+			
+			// if the aggregate has two image objects, one must be read, one must be write -> read/write
+			if(field_count == 2 && floor_img_access != uint64_t(FLOOR_ARG_INFO::IMG_ACCESS_READ_WRITE)) {
+				CGM.Error(decl->getSourceRange().getBegin(),
+						  StringRef("aggregate-image has 2 image fields, but joint access is not read-write"));
+				return;
+			}
+			
+			// everything works out, add this as a single kernel argument (floor backends will handle r/w images as necessary)
+			add_image_arg(floor_img_type, (FLOOR_ARG_INFO)floor_img_access);
+			
+			// 1 clang aggregate-image == 2 llvm image types -> inc index once more
+			if(field_count == 2) ++arg_idx;
+		}
+		// handle non-pointer parameters
+		else if(getLangOpts().CUDA) {
+			// store the parameter size
+			uint64_t arg_info = CGM.getDataLayout().getTypeStoreSize(llvm_type);
+			
+			// check if parameter has image access qualifiers,
+			// if so, it must be an image
+			const OpenCLImageAccessAttr* access_attr = parm->getAttr<OpenCLImageAccessAttr>();
+			if(access_attr != nullptr) {
+				arg_info |= uint64_t(get_image_access(access_attr));
+				arg_info |= (uint64_t)FLOOR_ARG_INFO::AS_IMAGE;
+			}
+			// if not, pretend it is constant
+			else {
+				arg_info |= (uint64_t)FLOOR_ARG_INFO::AS_CONSTANT;
+			}
+			
+			arg_infos.push_back(Builder.getInt64(arg_info));
+		}
+		else {
+			// for now: just use the direct type size + no address space
+			uint64_t arg_info = 0;
+			// handle some llvm weirdness? why can this be a pointer still?
+			if(llvm_type->isPointerTy()) {
+				arg_info = CGM.getDataLayout().getTypeStoreSize(llvm_type->getPointerElementType());
+			}
+			else {
+				arg_info = CGM.getDataLayout().getTypeStoreSize(llvm_type);
+			}
+			arg_info |= (uint64_t)to_fas(clang_type.getAddressSpace());
+			arg_infos.push_back(Builder.getInt64(arg_info));
+		}
+		
+		// next llvm arg
+		++arg_idx;
+	}
+	
+	// if this is wrong, the kernel will almost certainly not be usable
+	if(arg_idx != Fn->arg_size()) {
+		// signal that this is _very_ bad
+		const std::string err_str {
+			"kernel function parameter count mismatch: " +
+			std::to_string(arg_idx) + " (clang), " +
+			std::to_string(Fn->arg_size()) + " (llvm)"
+		};
+		CGM.Error(FD->getSourceRange().getBegin(), StringRef(err_str));
+		return;
+	}
+	
+	//
+	llvm::MDNode *kernelMDNode = llvm::MDNode::get(Context, arg_infos);
+	llvm::NamedMDNode *FloorKernelMetadata = CGM.getModule().getOrInsertNamedMetadata("floor.kernels");
+	FloorKernelMetadata->addOperand(kernelMDNode);
 }
 
 void CodeGenFunction::EmitOpenCLKernelMetadata(const FunctionDecl *FD,
@@ -455,12 +1142,34 @@ void CodeGenFunction::EmitOpenCLKernelMetadata(const FunctionDecl *FD,
   llvm::LLVMContext &Context = getLLVMContext();
 
   SmallVector <llvm::Value*, 5> kernelMDArgs;
-  kernelMDArgs.push_back(Fn);
+  if (!CGM.getCodeGenOpts().EmitAIRMetadata) {
+    kernelMDArgs.push_back(Fn);
+  }
+  else { // -> need to id/size handling args to the kernel function type
+	  // add original arg types
+	  SmallVector<llvm::Type*, 16> arg_types;
+	  for(const auto& arg : Fn->args()) {
+		  arg_types.push_back(arg.getType());
+	  }
+	  // add id types
+	  const auto id_vec_type = llvm::VectorType::get(llvm::Type::getInt32Ty(Context), 3);
+	  for(int i = 0; i < 6; ++i) arg_types.push_back(id_vec_type);
+	  
+	  // create + add new function type
+	  const auto func_type_with_ids = llvm::FunctionType::get(Fn->getReturnType(), arg_types, false);
+	  kernelMDArgs.push_back(llvm::Function::Create(func_type_with_ids, Fn->getLinkage(), Fn->getName()));
+  }
 
-  if (CGM.getCodeGenOpts().EmitOpenCLArgMetadata)
+  if (CGM.getCodeGenOpts().EmitOpenCLArgMetadata && !CGM.getCodeGenOpts().EmitAppleCLMetadata)
     GenOpenCLArgMetadata(FD, Fn, CGM, Context, kernelMDArgs,
                          Builder, getContext());
 
+  if (CGM.getCodeGenOpts().EmitAIRMetadata)
+    GenAIRMetadata(FD, Fn, CGM, Context, kernelMDArgs, Builder, getContext());
+
+  if (CGM.getCodeGenOpts().EmitAppleCLMetadata)
+    GenAppleCLMetadata(FD, Fn, CGM, Context, kernelMDArgs, Builder, getContext());
+
   if (const VecTypeHintAttr *A = FD->getAttr<VecTypeHintAttr>()) {
     QualType hintQTy = A->getTypeHint();
     const ExtVectorType *hintEltQTy = hintQTy->getAs<ExtVectorType>();
@@ -499,8 +1208,74 @@ void CodeGenFunction::EmitOpenCLKernelMetadata(const FunctionDecl *FD,
 
   llvm::MDNode *kernelMDNode = llvm::MDNode::get(Context, kernelMDArgs);
   llvm::NamedMDNode *OpenCLKernelMetadata =
-    CGM.getModule().getOrInsertNamedMetadata("opencl.kernels");
+	CGM.getModule().getOrInsertNamedMetadata(CGM.getCodeGenOpts().EmitAIRMetadata ?
+											 "air.kernel" : "opencl.kernels");
   OpenCLKernelMetadata->addOperand(kernelMDNode);
+
+  // additional air info
+  if(CGM.getCodeGenOpts().EmitAIRMetadata) {
+	  // only do this once
+	  llvm::NamedMDNode *AIRVersion = CGM.getModule().getOrInsertNamedMetadata("air.version");
+	  if(AIRVersion->getNumOperands() > 0) return;
+	  
+	  SmallVector <llvm::Value*, 3> air_version;
+	  air_version.push_back(Builder.getInt32(CGM.getLangOpts().metal_version[0]));
+	  air_version.push_back(Builder.getInt32(CGM.getLangOpts().metal_version[1]));
+	  air_version.push_back(Builder.getInt32(CGM.getLangOpts().metal_version[2]));
+	  AIRVersion->addOperand(llvm::MDNode::get(Context, air_version));
+	  
+	  llvm::NamedMDNode *AIRLangVersion = CGM.getModule().getOrInsertNamedMetadata("air.language_version");
+	  SmallVector <llvm::Value*, 4> air_lang_version;
+	  air_lang_version.push_back(llvm::MDString::get(Context, "METAL"));
+	  air_lang_version.push_back(Builder.getInt32(CGM.getLangOpts().metal_language_version[0]));
+	  air_lang_version.push_back(Builder.getInt32(CGM.getLangOpts().metal_language_version[1]));
+	  air_lang_version.push_back(Builder.getInt32(CGM.getLangOpts().metal_language_version[2]));
+	  AIRLangVersion->addOperand(llvm::MDNode::get(Context, air_lang_version));
+	  
+	  llvm::NamedMDNode *AIRCompOpts = CGM.getModule().getOrInsertNamedMetadata("air.compile_options");
+	  AIRCompOpts->addOperand(llvm::MDNode::get(Context,
+												llvm::MDString::get(Context, "air.compile.denorms_disable")));
+	  AIRCompOpts->addOperand(llvm::MDNode::get(Context,
+												llvm::MDString::get(Context, "air.compile.fast_math_enable")));
+	  AIRCompOpts->addOperand(llvm::MDNode::get(Context,
+												llvm::MDString::get(Context, "air.compile.framebuffer_fetch_disable")));
+	  AIRCompOpts->addOperand(llvm::MDNode::get(Context,
+												llvm::MDString::get(Context, "air.compile.native_double_disable")));
+  }
+  // additional opencl info
+  else if(CGM.getCodeGenOpts().EmitOpenCLArgMetadata && !CGM.getCodeGenOpts().EmitAppleCLMetadata) {
+	  // only do this once
+	  llvm::NamedMDNode *CLVersion = CGM.getModule().getOrInsertNamedMetadata("opencl.ocl.version");
+	  if(CLVersion->getNumOperands() > 0) return;
+	  
+	  llvm::NamedMDNode *SPIRVersion = CGM.getModule().getOrInsertNamedMetadata("opencl.spir.version");
+	  SmallVector <llvm::Value*, 3> cl_spir_version; // set both to 1.2
+	  cl_spir_version.push_back(Builder.getInt32(1));
+	  cl_spir_version.push_back(Builder.getInt32(2));
+	  CLVersion->addOperand(llvm::MDNode::get(Context, cl_spir_version));
+	  SPIRVersion->addOperand(llvm::MDNode::get(Context, cl_spir_version));
+	  
+	  llvm::NamedMDNode *CLCompOpts = CGM.getModule().getOrInsertNamedMetadata("opencl.compiler.options");
+	  SmallVector <llvm::Value*, 4> cl_comp_options;
+	  cl_comp_options.push_back(llvm::MDString::get(Context, "-cl-kernel-arg-info"));
+	  cl_comp_options.push_back(llvm::MDString::get(Context, "-cl-mad-enable"));
+	  cl_comp_options.push_back(llvm::MDString::get(Context, "-cl-denorms-are-zero"));
+	  cl_comp_options.push_back(llvm::MDString::get(Context, "-cl-unsafe-math-optimizations"));
+	  CLCompOpts->addOperand(llvm::MDNode::get(Context, cl_comp_options));
+	  
+	  llvm::NamedMDNode *CLOptFeatures = CGM.getModule().getOrInsertNamedMetadata("opencl.used.optional.core.features");
+	  SmallVector <llvm::Value*, 2> cl_opt_features;
+	  cl_opt_features.push_back(llvm::MDString::get(Context, "cl_images")); // always use images
+	  //cl_opt_features.push_back(llvm::MDString::get(Context, "cl_doubles")); // TODO: flag for this?
+	  CLOptFeatures->addOperand(llvm::MDNode::get(Context, cl_opt_features));
+	  
+	  // TODO: proper command line option for this
+	  llvm::NamedMDNode *CLExts = CGM.getModule().getOrInsertNamedMetadata("opencl.used.extensions");
+	  SmallVector <llvm::Value*, 8> cl_exts;
+	  cl_exts.push_back(llvm::MDString::get(Context, "cl_khr_global_int32_base_atomics"));
+	  cl_exts.push_back(llvm::MDString::get(Context, "cl_khr_local_int32_base_atomics"));
+	  CLExts->addOperand(llvm::MDNode::get(Context, cl_exts));
+  }
 }
 
 /// Determine whether the function F ends with a return stmt.
@@ -553,6 +1328,19 @@ void CodeGenFunction::StartFunction(GlobalDecl GD,
       Fn->addFnAttr(llvm::Attribute::NoInline);
   }
 
+  if (getLangOpts().OpenCL || getLangOpts().CUDA) {
+    if(const FunctionDecl *FD = dyn_cast_or_null<FunctionDecl>(D)) {
+      // add floor specific metadata for kernel functions
+      if (const FunctionDecl *FD = dyn_cast_or_null<FunctionDecl>(D)) {
+        EmitFloorKernelMetadata(FD, Fn, Args);
+      }
+
+      // add "compute_kernel" llvm function attribute if this is a kernel function
+      if (FD->hasAttr<OpenCLKernelAttr>() || FD->hasAttr<CUDAGlobalAttr>()) {
+        Fn->addFnAttr("compute_kernel");
+      }
+    }
+  }
   if (getLangOpts().OpenCL) {
     // Add metadata for a kernel function.
     if (const FunctionDecl *FD = dyn_cast_or_null<FunctionDecl>(D))
@@ -755,6 +1543,92 @@ static void EmitSizedDeallocationFunction(CodeGenFunction &CGF,
   CGF.Builder.CreateCall(Unsized, &*CGF.CurFn->arg_begin());
 }
 
+void CodeGenFunction::EmitAppleCLKernelAnnotation(GlobalDecl& GD, llvm::Function* Fn) {
+	if(!getLangOpts().OpenCL) return;
+	
+	if(const FunctionDecl *FD = dyn_cast_or_null<FunctionDecl>(GD.getDecl())) {
+		// Add global applecl kernel annotations.
+		if(CGM.getCodeGenOpts().EmitAppleCLMetadata && FD->hasAttr<OpenCLKernelAttr>()) {
+			// go through all local decls and find the local memory decls
+			std::vector<llvm::Constant*> lmem_refs;
+			for(const auto& I : LocalDeclMap) {
+				const Decl* local_decl = I.first;
+				llvm::Value *Addr = I.second;
+				if(dyn_cast<llvm::GlobalValue>(Addr)) {
+					const VarDecl* lmem_VD = cast<VarDecl>(local_decl);
+					if(lmem_VD->getStorageClass() == SC_OpenCLWorkGroupLocal) {
+						lmem_refs.push_back(CGM.getStaticLocalDeclAddress(lmem_VD));
+					}
+				}
+			}
+			
+			// go through kernel arguments and set info
+			// "global float* a, global const float* b, constant float* c, constant const float* d, local float* e,
+			//  float f, const float g, read_only image2d_t h, write_only image2d_t i, read_write image2d_t j"
+			// -> "218890056a"
+			// TODO: sampler is "4" (NOTE: all other "numbers/chars" are unused)
+			std::string arg_info = "";
+			for(const auto& parm : FD->params()) {
+				const auto clang_type = parm->getType();
+				
+				static const auto add_image_arg = [&arg_info](const OpenCLImageAccessAttr* access_attr) {
+					// access qualifier
+					if(access_attr && access_attr->isWriteOnly()) {
+						arg_info += "6";
+					}
+					else if(access_attr && access_attr->isReadWrite()) {
+						arg_info += "a";
+					}
+					else {
+						arg_info += "5";
+					}
+				};
+				
+				// storage type (stream or image)
+				if(clang_type->isPointerType() || clang_type->isReferenceType()) {
+					// access qualifier
+					const auto clang_pointee_type = clang_type->getPointeeType();
+					bool read_only = false;
+					if(clang_pointee_type.isConstQualified() ||
+					   (clang_pointee_type.getAddressSpace() == LangAS::opencl_constant)) {
+						read_only = true;
+					}
+					
+					// address space
+					switch(clang_pointee_type.getAddressSpace()) {
+						case LangAS::opencl_global:
+							arg_info += (read_only ? "1" : "2");
+							break;
+						case LangAS::opencl_local:
+							arg_info += "9";
+							break;
+						case LangAS::opencl_constant:
+							arg_info += "8";
+							break;
+					}
+				}
+				else if(clang_type->isImageType()) {
+					add_image_arg(parm->getAttr<OpenCLImageAccessAttr>());
+				}
+				else if(clang_type->isAggregateImageType()) {
+					const auto decl = (clang_type->isStructureType() ?
+									   clang_type->getAsStructureType()->getDecl() :
+									   clang_type->getAsCXXRecordDecl());
+					for(const auto& field : decl->fields()) {
+						add_image_arg(field->getAttr<OpenCLImageAccessAttr>());
+					}
+				}
+				else {
+					// simple kernel parameter (not a buffer)
+					arg_info += "0";
+				}
+			}
+			
+			CGM.AddAppleCLKernelAnnotation(Fn, arg_info, lmem_refs);
+		}
+	}
+}
+
 void CodeGenFunction::GenerateCode(GlobalDecl GD, llvm::Function *Fn,
                                    const CGFunctionInfo &FnInfo) {
   const FunctionDecl *FD = cast<FunctionDecl>(GD.getDecl());
@@ -858,6 +1732,10 @@ void CodeGenFunction::GenerateCode(GlobalDecl GD, llvm::Function *Fn,
   // Emit the standard function epilogue.
   FinishFunction(BodyRange.getEnd());
 
+  // emit applecl metadata and global annotations
+  // note that this must be done at the end, because we need access to local memory declarations
+  EmitAppleCLKernelAnnotation(GD, Fn);
+
   // If we haven't marked the function nothrow through other means, do
   // a quick pass now to see if we can.
   if (!CurFn->doesNotThrow())
diff --git a/tools/clang/lib/CodeGen/CodeGenFunction.h b/tools/clang/lib/CodeGen/CodeGenFunction.h
index 59cc30d..11cf78e 100644
--- a/tools/clang/lib/CodeGen/CodeGenFunction.h
+++ b/tools/clang/lib/CodeGen/CodeGenFunction.h
@@ -989,7 +989,13 @@ private:
   ///   "reqd_work_group_size", and three 32-bit integers X, Y and Z.
   void EmitOpenCLKernelMetadata(const FunctionDecl *FD, 
                                 llvm::Function *Fn);
+	
+  void EmitFloorKernelMetadata(const FunctionDecl *FD,
+                               llvm::Function *Fn,
+                               const FunctionArgList &Args);
 
+  void EmitAppleCLKernelAnnotation(GlobalDecl& GD, llvm::Function* Fn);
+	
 public:
   CodeGenFunction(CodeGenModule &cgm, bool suppressNewContext=false);
   ~CodeGenFunction();
diff --git a/tools/clang/lib/CodeGen/CodeGenModule.cpp b/tools/clang/lib/CodeGen/CodeGenModule.cpp
index 48823be..a537874 100644
--- a/tools/clang/lib/CodeGen/CodeGenModule.cpp
+++ b/tools/clang/lib/CodeGen/CodeGenModule.cpp
@@ -1147,6 +1147,39 @@ void CodeGenModule::AddGlobalAnnotations(const ValueDecl *D,
     Annotations.push_back(EmitAnnotateAttr(GV, I, D->getLocation()));
 }
 
+void CodeGenModule::AddAppleCLKernelAnnotation(llvm::Function* Fn, const std::string& sgv_str,
+											   std::vector<llvm::Constant*> lmem_refs) {
+	// sgv contains the argument type information
+	llvm::Constant* sgv_data = llvm::ConstantDataArray::getString(getLLVMContext(), sgv_str);
+	llvm::Constant* sgv = new llvm::GlobalVariable(getModule(), sgv_data->getType(), true,
+												   llvm::GlobalValue::InternalLinkage, sgv_data, "sgv");
+	
+	// fgv is always empty (would usually contain the file name)
+	llvm::Constant* fgv_data = llvm::ConstantDataArray::getString(getLLVMContext(), "", false);
+	llvm::Constant* fgv = new llvm::GlobalVariable(getModule(), fgv_data->getType(), true,
+												   llvm::GlobalValue::InternalLinkage, fgv_data, "fgv");
+	
+	// lvgv contains the pointers to local memory decls
+	std::vector<llvm::Constant*> lvgv_data;
+	for(const auto& lmem : lmem_refs) {
+		lvgv_data.push_back(llvm::ConstantExpr::getBitCast(lmem, Int8PtrTy));
+	}
+	llvm::Constant* lvgv_container = llvm::ConstantArray::get(llvm::ArrayType::get(Int8PtrTy, lmem_refs.size()), lvgv_data);
+	llvm::Constant* lvgv = new llvm::GlobalVariable(getModule(), lvgv_container->getType(), true,
+													llvm::GlobalValue::InternalLinkage, lvgv_container, "lvgv");
+	
+	// Create the ConstantStruct for the global annotation.
+	llvm::Constant *Fields[5] = {
+		llvm::ConstantExpr::getBitCast(Fn, Int8PtrTy),
+		llvm::ConstantExpr::getBitCast(sgv, Int8PtrTy),
+		llvm::ConstantExpr::getBitCast(fgv, Int8PtrTy),
+		llvm::ConstantExpr::getBitCast(lvgv, Int8PtrTy),
+		// always 0?
+		llvm::ConstantInt::get(Int32Ty, 0)
+	};
+	Annotations.push_back(llvm::ConstantStruct::getAnon(Fields));
+}
+
 bool CodeGenModule::MayDeferGeneration(const ValueDecl *Global) {
   // Never defer when EmitAllDecls is specified.
   if (LangOpts.EmitAllDecls)
@@ -1218,23 +1251,6 @@ void CodeGenModule::EmitGlobal(GlobalDecl GD) {
   if (Global->hasAttr<AliasAttr>())
     return EmitAliasDefinition(GD);
 
-  // If this is CUDA, be selective about which declarations we emit.
-  if (LangOpts.CUDA) {
-    if (CodeGenOpts.CUDAIsDevice) {
-      if (!Global->hasAttr<CUDADeviceAttr>() &&
-          !Global->hasAttr<CUDAGlobalAttr>() &&
-          !Global->hasAttr<CUDAConstantAttr>() &&
-          !Global->hasAttr<CUDASharedAttr>())
-        return;
-    } else {
-      if (!Global->hasAttr<CUDAHostAttr>() && (
-            Global->hasAttr<CUDADeviceAttr>() ||
-            Global->hasAttr<CUDAConstantAttr>() ||
-            Global->hasAttr<CUDASharedAttr>()))
-        return;
-    }
-  }
-
   // Ignore declarations, they will be emitted on their first use.
   if (const auto *FD = dyn_cast<FunctionDecl>(Global)) {
     // Forward declarations are emitted lazily on first use.
diff --git a/tools/clang/lib/CodeGen/CodeGenModule.h b/tools/clang/lib/CodeGen/CodeGenModule.h
index 9533a8d..d53d4e3 100644
--- a/tools/clang/lib/CodeGen/CodeGenModule.h
+++ b/tools/clang/lib/CodeGen/CodeGenModule.h
@@ -1009,6 +1009,9 @@ public:
   /// annotations are emitted during finalization of the LLVM code.
   void AddGlobalAnnotations(const ValueDecl *D, llvm::GlobalValue *GV);
 
+  void AddAppleCLKernelAnnotation(llvm::Function* Fn, const std::string& arg_info,
+                                  std::vector<llvm::Constant*> lmem_refs);
+
   const SanitizerBlacklist &getSanitizerBlacklist() const {
     return SanitizerBL;
   }
diff --git a/tools/clang/lib/CodeGen/CodeGenTypes.cpp b/tools/clang/lib/CodeGen/CodeGenTypes.cpp
index d4e2262..2b8d3e0 100644
--- a/tools/clang/lib/CodeGen/CodeGenTypes.cpp
+++ b/tools/clang/lib/CodeGen/CodeGenTypes.cpp
@@ -380,6 +380,16 @@ llvm::Type *CodeGenTypes::ConvertType(QualType T) {
     case BuiltinType::OCLImage1dBuffer:
     case BuiltinType::OCLImage2d:
     case BuiltinType::OCLImage2dArray:
+    case BuiltinType::OCLImage2dDepth:
+    case BuiltinType::OCLImage2dArrayDepth:
+    case BuiltinType::OCLImage2dMSAA:
+    case BuiltinType::OCLImage2dArrayMSAA:
+    case BuiltinType::OCLImage2dMSAADepth:
+    case BuiltinType::OCLImage2dArrayMSAADepth:
+    case BuiltinType::OCLImageCube:
+    case BuiltinType::OCLImageCubeArray:
+    case BuiltinType::OCLImageCubeDepth:
+    case BuiltinType::OCLImageCubeArrayDepth:
     case BuiltinType::OCLImage3d:
     case BuiltinType::OCLSampler:
     case BuiltinType::OCLEvent:
diff --git a/tools/clang/lib/CodeGen/ItaniumCXXABI.cpp b/tools/clang/lib/CodeGen/ItaniumCXXABI.cpp
index d7e61f0..03c08c2 100644
--- a/tools/clang/lib/CodeGen/ItaniumCXXABI.cpp
+++ b/tools/clang/lib/CodeGen/ItaniumCXXABI.cpp
@@ -2173,6 +2173,16 @@ static bool TypeInfoIsInStandardLibrary(const BuiltinType *Ty) {
     case BuiltinType::OCLImage1dBuffer:
     case BuiltinType::OCLImage2d:
     case BuiltinType::OCLImage2dArray:
+    case BuiltinType::OCLImage2dDepth:
+    case BuiltinType::OCLImage2dArrayDepth:
+    case BuiltinType::OCLImage2dMSAA:
+    case BuiltinType::OCLImage2dArrayMSAA:
+    case BuiltinType::OCLImage2dMSAADepth:
+    case BuiltinType::OCLImage2dArrayMSAADepth:
+    case BuiltinType::OCLImageCube:
+    case BuiltinType::OCLImageCubeArray:
+    case BuiltinType::OCLImageCubeDepth:
+    case BuiltinType::OCLImageCubeArrayDepth:
     case BuiltinType::OCLImage3d:
     case BuiltinType::OCLSampler:
     case BuiltinType::OCLEvent:
diff --git a/tools/clang/lib/CodeGen/TargetInfo.cpp b/tools/clang/lib/CodeGen/TargetInfo.cpp
index f75e59d..e2cc3d3 100644
--- a/tools/clang/lib/CodeGen/TargetInfo.cpp
+++ b/tools/clang/lib/CodeGen/TargetInfo.cpp
@@ -46,6 +46,10 @@ static bool isAggregateTypeForABI(QualType T) {
          T->isMemberFunctionPointerType();
 }
 
+static bool isAggregateImageType(QualType T) {
+  return CodeGenFunction::hasAggregateEvaluationKind(T) && T->isAggregateImageType();
+}
+
 ABIInfo::~ABIInfo() {}
 
 static CGCXXABI::RecordArgABI getRecordArgABI(const RecordType *RT,
@@ -376,6 +380,9 @@ llvm::Value *DefaultABIInfo::EmitVAArg(llvm::Value *VAListAddr, QualType Ty,
 }
 
 ABIArgInfo DefaultABIInfo::classifyArgumentType(QualType Ty) const {
+  if (isAggregateImageType(Ty))
+    return ABIArgInfo::getExpand();
+
   if (isAggregateTypeForABI(Ty))
     return ABIArgInfo::getIndirect(0);
 
diff --git a/tools/clang/lib/Frontend/CompilerInvocation.cpp b/tools/clang/lib/Frontend/CompilerInvocation.cpp
index ce61a46..6870297 100644
--- a/tools/clang/lib/Frontend/CompilerInvocation.cpp
+++ b/tools/clang/lib/Frontend/CompilerInvocation.cpp
@@ -474,6 +474,8 @@ static bool ParseCodeGenArgs(CodeGenOptions &Opts, ArgList &Args, InputKind IK,
   Opts.InstrumentFunctions = Args.hasArg(OPT_finstrument_functions);
   Opts.InstrumentForProfiling = Args.hasArg(OPT_pg);
   Opts.EmitOpenCLArgMetadata = Args.hasArg(OPT_cl_kernel_arg_info);
+  Opts.EmitAIRMetadata = Args.hasArg(OPT_metal_air);
+  Opts.EmitAppleCLMetadata = Args.hasArg(OPT_applecl_kernel_info);
   Opts.CompressDebugSections = Args.hasArg(OPT_compress_debug_sections);
   Opts.DebugCompilationDir = Args.getLastArgValue(OPT_fdebug_compilation_dir);
   Opts.LinkBitcodeFile = Args.getLastArgValue(OPT_mlink_bitcode_file);
@@ -1276,7 +1278,7 @@ static void ParseLangArgs(LangOptions &Opts, ArgList &Args, InputKind IK,
             << A->getAsString(Args) << "C++/ObjC++";
         break;
       case IK_OpenCL:
-        if (!Std.isC99())
+        if (!Std.isC99() && !Std.isCPlusPlus())
           Diags.Report(diag::err_drv_argument_not_allowed_with)
             << A->getAsString(Args) << "OpenCL";
         break;
@@ -1311,6 +1313,32 @@ static void ParseLangArgs(LangOptions &Opts, ArgList &Args, InputKind IK,
   
   CompilerInvocation::setLangDefaults(Opts, IK, LangStd);
 
+  // extract the metal version and metal language version from the cli option
+  if (const Arg *A = Args.getLastArg(OPT_metal_air)) {
+    StringRef metal_versions = A->getValue();
+    // expecting "major,minor,rev,major,minor,rev" -> 5 commas
+    if(metal_versions.count(',') != 5) {
+      Diags.Report(diag::err_drv_invalid_value)
+      << A->getAsString(Args) << A->getValue();
+    }
+    else {
+      std::vector<std::string> versions;
+      size_t pos = 0, old_pos = 0;
+      while((pos = metal_versions.find(',', old_pos)) != std::string::npos) {
+        versions.emplace_back(metal_versions.substr(old_pos, pos - old_pos));
+        old_pos = pos + 1;
+      }
+      versions.emplace_back(metal_versions.substr(old_pos, pos - old_pos));
+      
+      Opts.metal_version[0] = std::stoul(versions[0]);
+      Opts.metal_version[1] = std::stoul(versions[1]);
+      Opts.metal_version[2] = std::stoul(versions[2]);
+      Opts.metal_language_version[0] = std::stoul(versions[3]);
+      Opts.metal_language_version[1] = std::stoul(versions[4]);
+      Opts.metal_language_version[2] = std::stoul(versions[5]);
+    }
+  }
+
   // We abuse '-f[no-]gnu-keywords' to force overriding all GNU-extension
   // keywords. This behavior is provided by GCC's poorly named '-fasm' flag,
   // while a subset (the non-C++ GNU keywords) is provided by GCC's
diff --git a/tools/clang/lib/Index/USRGeneration.cpp b/tools/clang/lib/Index/USRGeneration.cpp
index e08b85e..f64c535 100644
--- a/tools/clang/lib/Index/USRGeneration.cpp
+++ b/tools/clang/lib/Index/USRGeneration.cpp
@@ -592,6 +592,16 @@ void USRGenerator::VisitType(QualType T) {
         case BuiltinType::OCLImage1dBuffer:
         case BuiltinType::OCLImage2d:
         case BuiltinType::OCLImage2dArray:
+        case BuiltinType::OCLImage2dDepth:
+        case BuiltinType::OCLImage2dArrayDepth:
+        case BuiltinType::OCLImage2dMSAA:
+        case BuiltinType::OCLImage2dArrayMSAA:
+        case BuiltinType::OCLImage2dMSAADepth:
+        case BuiltinType::OCLImage2dArrayMSAADepth:
+        case BuiltinType::OCLImageCube:
+        case BuiltinType::OCLImageCubeArray:
+        case BuiltinType::OCLImageCubeDepth:
+        case BuiltinType::OCLImageCubeArrayDepth:
         case BuiltinType::OCLImage3d:
         case BuiltinType::OCLEvent:
         case BuiltinType::OCLSampler:
diff --git a/tools/clang/lib/Lex/PPDirectives.cpp b/tools/clang/lib/Lex/PPDirectives.cpp
index 1741c30..2236e48 100644
--- a/tools/clang/lib/Lex/PPDirectives.cpp
+++ b/tools/clang/lib/Lex/PPDirectives.cpp
@@ -1807,7 +1807,7 @@ bool Preprocessor::ReadMacroDefinitionArgList(MacroInfo *MI, Token &Tok) {
              diag::ext_variadic_macro);
 
       // OpenCL v1.2 s6.9.e: variadic macros are not supported.
-      if (LangOpts.OpenCL) {
+      if (LangOpts.OpenCL && !LangOpts.CPlusPlus) {
         Diag(Tok, diag::err_pp_opencl_variadic_macros);
         return true;
       }
diff --git a/tools/clang/lib/Sema/Sema.cpp b/tools/clang/lib/Sema/Sema.cpp
index 2c65332..303fc49 100644
--- a/tools/clang/lib/Sema/Sema.cpp
+++ b/tools/clang/lib/Sema/Sema.cpp
@@ -206,6 +206,16 @@ void Sema::Initialize() {
     addImplicitTypedef("image1d_buffer_t", Context.OCLImage1dBufferTy);
     addImplicitTypedef("image2d_t", Context.OCLImage2dTy);
     addImplicitTypedef("image2d_array_t", Context.OCLImage2dArrayTy);
+    addImplicitTypedef("image2d_depth_t", Context.OCLImage2dDepthTy);
+    addImplicitTypedef("image2d_array_depth_t", Context.OCLImage2dArrayDepthTy);
+    addImplicitTypedef("image2d_msaa_t", Context.OCLImage2dMSAATy);
+    addImplicitTypedef("image2d_array_msaa_t", Context.OCLImage2dArrayMSAATy);
+    addImplicitTypedef("image2d_msaa_depth_t", Context.OCLImage2dMSAADepthTy);
+    addImplicitTypedef("image2d_array_msaa_depth_t", Context.OCLImage2dArrayMSAADepthTy);
+    addImplicitTypedef("imagecube_t", Context.OCLImageCubeTy);
+    addImplicitTypedef("imagecube_array_t", Context.OCLImageCubeArrayTy);
+    addImplicitTypedef("imagecube_depth_t", Context.OCLImageCubeDepthTy);
+    addImplicitTypedef("imagecube_array_depth_t", Context.OCLImageCubeArrayDepthTy);
     addImplicitTypedef("image3d_t", Context.OCLImage3dTy);
     addImplicitTypedef("sampler_t", Context.OCLSamplerTy);
     addImplicitTypedef("event_t", Context.OCLEventTy);
diff --git a/tools/clang/lib/Sema/SemaDecl.cpp b/tools/clang/lib/Sema/SemaDecl.cpp
index 8716227..81dd1a8 100644
--- a/tools/clang/lib/Sema/SemaDecl.cpp
+++ b/tools/clang/lib/Sema/SemaDecl.cpp
@@ -5994,9 +5994,21 @@ void Sema::CheckVariableDeclarationType(VarDecl *NewVD) {
   if (getLangOpts().OpenCL && NewVD->isFileVarDecl()
       && T.getAddressSpace() != LangAS::opencl_constant
       && !T->isSamplerT()){
-    Diag(NewVD->getLocation(), diag::err_opencl_global_invalid_addr_space);
-    NewVD->setInvalidDecl();
-    return;
+    // if the variable doesn't have an address space, but is a global static const variable,
+    // automatically add the constant address space
+    if(T.getAddressSpace() == 0 &&
+       (NewVD->isStaticDataMember() || NewVD->hasGlobalStorage()) &&
+       T.isConstQualified()) {
+      QualType constant_T = Context.getAddrSpaceQualType(T, LangAS::opencl_constant);
+      TypeSourceInfo* constant_Tinfo = Context.getTrivialTypeSourceInfo(constant_T);
+      NewVD->setType(constant_Tinfo->getType());
+      NewVD->setTypeSourceInfo(constant_Tinfo);
+    }
+    else {
+      Diag(NewVD->getLocation(), diag::err_opencl_global_invalid_addr_space);
+      NewVD->setInvalidDecl();
+      return;
+    }
   }
   
   // OpenCL v1.2 s6.8 -- The static qualifier is valid only in program
@@ -6740,6 +6752,10 @@ static void checkIsValidOpenCLKernelParameter(
     // Add a null marker so we know when we've gone back up a level
     VisitStack.push_back(nullptr);
 
+    // if this is an aggregate of images, all is well
+    if (RD->getTypeForDecl()->isAggregateImageType())
+      continue;
+
     for (const auto *FD : RD->fields()) {
       QualType QT = FD->getType();
 
@@ -11941,7 +11957,7 @@ FieldDecl *Sema::CheckFieldDecl(DeclarationName Name, QualType T,
   }
 
   // OpenCL v1.2 s6.9.c: bitfields are not supported.
-  if (BitWidth && getLangOpts().OpenCL) {
+  if (BitWidth && getLangOpts().OpenCL && !getLangOpts().CPlusPlus) {
     Diag(Loc, diag::err_opencl_bitfields);
     InvalidDecl = true;
   }
diff --git a/tools/clang/lib/Sema/SemaDeclAttr.cpp b/tools/clang/lib/Sema/SemaDeclAttr.cpp
index 61683cd..040f9de 100644
--- a/tools/clang/lib/Sema/SemaDeclAttr.cpp
+++ b/tools/clang/lib/Sema/SemaDeclAttr.cpp
@@ -2679,6 +2679,58 @@ static void handleAnnotateAttr(Sema &S, Decl *D, const AttributeList &Attr) {
                           Attr.getAttributeSpellingListIndex()));
 }
 
+static void handleAlignValueAttr(Sema &S, Decl *D,
+                                 const AttributeList &Attr) {
+  S.AddAlignValueAttr(Attr.getRange(), D, Attr.getArgAsExpr(0),
+                      Attr.getAttributeSpellingListIndex());
+}
+
+void Sema::AddAlignValueAttr(SourceRange AttrRange, Decl *D, Expr *E,
+                             unsigned SpellingListIndex) {
+  AlignValueAttr TmpAttr(AttrRange, Context, E, SpellingListIndex);
+  SourceLocation AttrLoc = AttrRange.getBegin();
+
+  QualType T;
+  if (TypedefNameDecl *TD = dyn_cast<TypedefNameDecl>(D))
+    T = TD->getUnderlyingType();
+  else if (ValueDecl *VD = dyn_cast<ValueDecl>(D))
+    T = VD->getType();
+  else
+    llvm_unreachable("Unknown decl type for align_value");
+
+  if (!T->isDependentType() && !T->isAnyPointerType() &&
+      !T->isReferenceType() && !T->isMemberPointerType()) {
+    Diag(AttrLoc, diag::warn_attribute_pointer_or_reference_only)
+      << &TmpAttr /*TmpAttr.getName()*/ << T << D->getSourceRange();
+    return;
+  }
+
+  if (!E->isValueDependent()) {
+    llvm::APSInt Alignment(32);
+    ExprResult ICE
+      = VerifyIntegerConstantExpression(E, &Alignment,
+          diag::err_align_value_attribute_argument_not_int,
+            /*AllowFold*/ false);
+    if (ICE.isInvalid())
+      return;
+
+    if (!Alignment.isPowerOf2()) {
+      Diag(AttrLoc, diag::err_alignment_not_power_of_two)
+        << E->getSourceRange();
+      return;
+    }
+
+    D->addAttr(::new (Context)
+               AlignValueAttr(AttrRange, Context, ICE.get(),
+               SpellingListIndex));
+    return;
+  }
+
+  // Save dependent expressions in the AST to be instantiated.
+  D->addAttr(::new (Context) AlignValueAttr(TmpAttr));
+  return;
+}
+
 static void handleAlignedAttr(Sema &S, Decl *D, const AttributeList &Attr) {
   // check the attribute arguments.
   if (Attr.getNumArgs() > 1) {
@@ -4102,6 +4154,9 @@ static void ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D,
   case AttributeList::AT_Aligned:
     handleAlignedAttr(S, D, Attr);
     break;
+  case AttributeList::AT_AlignValue:
+    handleAlignValueAttr(S, D, Attr);
+    break;
   case AttributeList::AT_AlwaysInline:
     handleAlwaysInlineAttr(S, D, Attr);
     break;
@@ -4405,6 +4460,9 @@ static void ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D,
   case AttributeList::AT_OpenCLImageAccess:
     handleSimpleAttribute<OpenCLImageAccessAttr>(S, D, Attr);
     break;
+  case AttributeList::AT_FloorImageSampleType:
+    handleSimpleAttribute<FloorImageSampleTypeAttr>(S, D, Attr);
+    break;
 
   // Microsoft attributes:
   case AttributeList::AT_MsStruct:
diff --git a/tools/clang/lib/Sema/SemaDeclCXX.cpp b/tools/clang/lib/Sema/SemaDeclCXX.cpp
index c5cd83d..7084757 100644
--- a/tools/clang/lib/Sema/SemaDeclCXX.cpp
+++ b/tools/clang/lib/Sema/SemaDeclCXX.cpp
@@ -13026,21 +13026,13 @@ Sema::checkExceptionSpecification(ExceptionSpecificationType EST,
 
 /// IdentifyCUDATarget - Determine the CUDA compilation target for this function
 Sema::CUDAFunctionTarget Sema::IdentifyCUDATarget(const FunctionDecl *D) {
-  // Implicitly declared functions (e.g. copy constructors) are
-  // __host__ __device__
-  if (D->isImplicit())
-    return CFT_HostDevice;
-
   if (D->hasAttr<CUDAGlobalAttr>())
     return CFT_Global;
 
-  if (D->hasAttr<CUDADeviceAttr>()) {
-    if (D->hasAttr<CUDAHostAttr>())
-      return CFT_HostDevice;
-    return CFT_Device;
-  }
-
-  return CFT_Host;
+  // if not a kernel, always default to device
+  // this is IMO a much saner approach and doesn't require to add the __device__
+  // attribute to _all_ functions
+  return CFT_Device;
 }
 
 bool Sema::CheckCUDATarget(CUDAFunctionTarget CallerTarget,
diff --git a/tools/clang/lib/Sema/SemaExpr.cpp b/tools/clang/lib/Sema/SemaExpr.cpp
index 35dad82..bd249ab 100644
--- a/tools/clang/lib/Sema/SemaExpr.cpp
+++ b/tools/clang/lib/Sema/SemaExpr.cpp
@@ -444,7 +444,7 @@ ExprResult Sema::DefaultFunctionArrayConversion(Expr *E) {
   if (Ty->isFunctionType()) {
     // If we are here, we are not calling a function but taking
     // its address (which is not allowed in OpenCL v1.0 s6.8.a.3).
-    if (getLangOpts().OpenCL) {
+    if (getLangOpts().OpenCL && !LangOpts.CPlusPlus) {
       Diag(E->getExprLoc(), diag::err_opencl_taking_function_address);
       return ExprError();
     }
@@ -8953,7 +8953,7 @@ QualType Sema::CheckAddressOfOperand(ExprResult &OrigOp, SourceLocation OpLoc) {
   Expr *op = OrigOp.get()->IgnoreParens();
 
   // OpenCL v1.0 s6.8.a.3: Pointers to functions are not allowed.
-  if (LangOpts.OpenCL && op->getType()->isFunctionType()) {
+  if (LangOpts.OpenCL && !LangOpts.CPlusPlus && op->getType()->isFunctionType()) {
     Diag(op->getExprLoc(), diag::err_opencl_taking_function_address);
     return QualType();
   }
diff --git a/tools/clang/lib/Sema/SemaInit.cpp b/tools/clang/lib/Sema/SemaInit.cpp
index 06ca9ae..a517db4 100644
--- a/tools/clang/lib/Sema/SemaInit.cpp
+++ b/tools/clang/lib/Sema/SemaInit.cpp
@@ -3970,6 +3970,7 @@ static void TryReferenceInitializationCore(Sema &S,
   //         where "cv1 T1" is reference-compatible with "cv3 T3",
   //
   // DR1287 removes the "implicitly" here.
+  bool isOpenCLASRef = false;
   if (T2->isRecordType()) {
     if (RefRelationship == Sema::Ref_Incompatible) {
       ConvOvlResult = TryRefInitWithConversionFunction(
@@ -3990,8 +3991,15 @@ static void TryReferenceInitializationCore(Sema &S,
       return;
     }
 
-    Sequence.SetFailed(InitializationSequence::FK_ReferenceInitDropsQualifiers);
-    return;
+    if(S.getLangOpts().OpenCL &&
+       ((cv1T1.getAddressSpace() == 0 && cv2T2.getAddressSpace() != 0) ||
+        (cv1T1.getAddressSpace() != 0 && cv2T2.getAddressSpace() == 0))) {
+      isOpenCLASRef = true;
+    }
+    if(!isOpenCLASRef) {
+      Sequence.SetFailed(InitializationSequence::FK_ReferenceInitDropsQualifiers);
+      return;
+    }
   }
 
   //      - Otherwise, a temporary of type "cv1 T1" is created and initialized
@@ -4721,13 +4729,18 @@ void InitializationSequence::InitializeFrom(Sema &S,
         tryObjCWritebackConversion(S, *this, Entity, Initializer)) {
       return;
     }
+  }
 
+  // need to try these two when using C++ with OpenCL
+  if (!S.getLangOpts().CPlusPlus || S.getLangOpts().OpenCL) {
     if (TryOCLSamplerInitialization(S, *this, DestType, Initializer))
       return;
 
     if (TryOCLZeroEventInitialization(S, *this, DestType, Initializer))
       return;
+  }
 
+  if (!S.getLangOpts().CPlusPlus) {
     // Handle initialization in C
     AddCAssignmentStep(DestType);
     MaybeProduceObjCObject(S, *this, Entity);
@@ -5926,7 +5939,10 @@ InitializationSequence::Perform(Sema &S,
 
     case SK_BindReferenceToTemporary: {
       // Make sure the "temporary" is actually an rvalue.
-      assert(CurInit.get()->isRValue() && "not a temporary");
+      // TODO: fix this!
+      //if(CurInit.get()->getType()) {
+      //assert(CurInit.get()->isRValue() && "not a temporary");
+      //}
 
       // Check exception specifications
       if (S.CheckExceptionSpecCompatibility(CurInit.get(), DestType))
diff --git a/tools/clang/lib/Sema/SemaOverload.cpp b/tools/clang/lib/Sema/SemaOverload.cpp
index 03001d8..2c4bc8c 100644
--- a/tools/clang/lib/Sema/SemaOverload.cpp
+++ b/tools/clang/lib/Sema/SemaOverload.cpp
@@ -1451,6 +1451,7 @@ static bool IsStandardConversion(Sema &S, Expr* From, QualType ToType,
       // We were able to resolve the address of the overloaded function,
       // so we can convert to the type of that function.
       FromType = Fn->getType();
+      SCS.setFromType(FromType);
 
       // we can sometimes resolve &foo<int> regardless of ToType, so check
       // if the type matches (identity) or we are converting to bool
@@ -4048,7 +4049,7 @@ Sema::CompareReferenceRelationship(SourceLocation Loc,
     
   if (T1Quals == T2Quals)
     return Ref_Compatible;
-  else if (T1Quals.compatiblyIncludes(T2Quals))
+  else if (T1Quals.compatiblyIncludes(T2Quals, !getASTContext().getLangOpts().OpenCL))
     return Ref_Compatible_With_Added_Qualification;
   else
     return Ref_Related;
@@ -4387,7 +4388,7 @@ TryReferenceInit(Sema &S, Expr *Init, QualType DeclType,
     T1Quals.removeObjCLifetime();
     T2Quals.removeObjCGCAttr();
     T2Quals.removeObjCLifetime();
-    if (!T1Quals.compatiblyIncludes(T2Quals))
+    if (!T1Quals.compatiblyIncludes(T2Quals, !S.getLangOpts().OpenCL))
       return ICS;
   }
 
diff --git a/tools/clang/lib/Sema/SemaTemplateDeduction.cpp b/tools/clang/lib/Sema/SemaTemplateDeduction.cpp
index 53a75d2..1e31cb8 100644
--- a/tools/clang/lib/Sema/SemaTemplateDeduction.cpp
+++ b/tools/clang/lib/Sema/SemaTemplateDeduction.cpp
@@ -2715,7 +2715,7 @@ CheckOriginalCallArgDeduction(Sema &S, Sema::OriginalCallArg OriginalArg,
 
     if (AQuals == DeducedAQuals) {
       // Qualifiers match; there's nothing to do.
-    } else if (!DeducedAQuals.compatiblyIncludes(AQuals)) {
+    } else if (!DeducedAQuals.compatiblyIncludes(AQuals, !S.getLangOpts().OpenCL)) {
       return true;
     } else {        
       // Qualifiers are compatible, so have the argument type adopt the
diff --git a/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp b/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp
index accec95..d1095d9 100644
--- a/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp
+++ b/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp
@@ -129,6 +129,17 @@ static void instantiateDependentAlignedAttr(
   }
 }
 
+static void instantiateDependentAlignValueAttr(
+    Sema &S, const MultiLevelTemplateArgumentList &TemplateArgs,
+    const AlignValueAttr *Aligned, Decl *New) {
+  // The alignment expression is a constant expression.
+  EnterExpressionEvaluationContext Unevaluated(S, Sema::ConstantEvaluated);
+  ExprResult Result = S.SubstExpr(Aligned->getAlignment(), TemplateArgs);
+  if (!Result.isInvalid())
+    S.AddAlignValueAttr(Aligned->getLocation(), New, Result.getAs<Expr>(),
+                        Aligned->getSpellingListIndex());
+}
+
 static void instantiateDependentEnableIfAttr(
     Sema &S, const MultiLevelTemplateArgumentList &TemplateArgs,
     const EnableIfAttr *A, const Decl *Tmpl, Decl *New) {
@@ -176,6 +187,12 @@ void Sema::InstantiateAttrs(const MultiLevelTemplateArgumentList &TemplateArgs,
       continue;
     }
 
+    const AlignValueAttr *AlignValue = dyn_cast<AlignValueAttr>(TmplAttr);
+    if (AlignValue) {
+      instantiateDependentAlignValueAttr(*this, TemplateArgs, AlignValue, New);
+      continue;
+    }
+
     const EnableIfAttr *EnableIf = dyn_cast<EnableIfAttr>(TmplAttr);
     if (EnableIf && EnableIf->getCond()->isValueDependent()) {
       instantiateDependentEnableIfAttr(*this, TemplateArgs, EnableIf, Tmpl,
diff --git a/tools/clang/lib/Sema/SemaType.cpp b/tools/clang/lib/Sema/SemaType.cpp
index be1191c..510d945 100644
--- a/tools/clang/lib/Sema/SemaType.cpp
+++ b/tools/clang/lib/Sema/SemaType.cpp
@@ -2474,8 +2474,24 @@ getCCForDeclaratorChunk(Sema &S, Declarator &D,
     }
   }
 
-  return S.Context.getDefaultCallingConvention(FTI.isVariadic,
-                                               IsCXXInstanceMethod);
+  CallingConv CC = S.Context.getDefaultCallingConvention(FTI.isVariadic,
+                                                         IsCXXInstanceMethod);
+
+  // Attribute AT_OpenCLKernel affects the calling convention only on
+  // the SPIR target, hence it cannot be treated as a calling
+  // convention attribute. This is the simplest place to infer
+  // "spir_kernel" for OpenCL kernels on SPIR.
+  if (CC == CC_SpirFunction) {
+    for (const AttributeList *Attr = D.getDeclSpec().getAttributes().getList();
+         Attr; Attr = Attr->getNext()) {
+      if (Attr->getKind() == AttributeList::AT_OpenCLKernel) {
+        CC = CC_SpirKernel;
+        break;
+      }
+    }
+  }
+
+  return CC;
 }
 
 static TypeSourceInfo *GetFullTypeForDeclarator(TypeProcessingState &state,
@@ -4931,6 +4947,9 @@ static void processTypeAttrs(TypeProcessingState &state, QualType &type,
       // imagine, but the original handler's checking was entirely superfluous.
       attr.setUsedAsTypeAttr();
       break;
+    case AttributeList::AT_FloorImageSampleType:
+      attr.setUsedAsTypeAttr();
+      break;
 
     MS_TYPE_ATTRS_CASELIST:
       if (!handleMSPointerTypeQualifierAttr(state, attr, type))
diff --git a/tools/clang/lib/Serialization/ASTCommon.cpp b/tools/clang/lib/Serialization/ASTCommon.cpp
index ad046ff..be31b68 100644
--- a/tools/clang/lib/Serialization/ASTCommon.cpp
+++ b/tools/clang/lib/Serialization/ASTCommon.cpp
@@ -66,6 +66,16 @@ serialization::TypeIdxFromBuiltin(const BuiltinType *BT) {
   case BuiltinType::OCLImage1dBuffer: ID = PREDEF_TYPE_IMAGE1D_BUFF_ID; break;
   case BuiltinType::OCLImage2d:       ID = PREDEF_TYPE_IMAGE2D_ID;      break;
   case BuiltinType::OCLImage2dArray:  ID = PREDEF_TYPE_IMAGE2D_ARR_ID;  break;
+  case BuiltinType::OCLImage2dDepth:  ID = PREDEF_TYPE_IMAGE2D_DEPTH_ID;  break;
+  case BuiltinType::OCLImage2dArrayDepth:  ID = PREDEF_TYPE_IMAGE2D_ARR_DEPTH_ID;  break;
+  case BuiltinType::OCLImage2dMSAA:  ID = PREDEF_TYPE_IMAGE2D_MSAA_ID;  break;
+  case BuiltinType::OCLImage2dArrayMSAA:  ID = PREDEF_TYPE_IMAGE2D_ARR_MSAA_ID;  break;
+  case BuiltinType::OCLImage2dMSAADepth:  ID = PREDEF_TYPE_IMAGE2D_MSAA_DEPTH_ID;  break;
+  case BuiltinType::OCLImage2dArrayMSAADepth:  ID = PREDEF_TYPE_IMAGE2D_ARR_MSAA_DEPTH_ID;  break;
+  case BuiltinType::OCLImageCube: ID = PREDEF_TYPE_IMAGECUBE_ID; break;
+  case BuiltinType::OCLImageCubeArray: ID = PREDEF_TYPE_IMAGECUBE_ARR_ID; break;
+  case BuiltinType::OCLImageCubeDepth: ID = PREDEF_TYPE_IMAGECUBE_DEPTH_ID; break;
+  case BuiltinType::OCLImageCubeArrayDepth: ID = PREDEF_TYPE_IMAGECUBE_ARR_DEPTH_ID; break;
   case BuiltinType::OCLImage3d:       ID = PREDEF_TYPE_IMAGE3D_ID;      break;
   case BuiltinType::OCLSampler:       ID = PREDEF_TYPE_SAMPLER_ID;      break;
   case BuiltinType::OCLEvent:         ID = PREDEF_TYPE_EVENT_ID;        break;
diff --git a/tools/clang/lib/Serialization/ASTReader.cpp b/tools/clang/lib/Serialization/ASTReader.cpp
index ae41654..098f631 100644
--- a/tools/clang/lib/Serialization/ASTReader.cpp
+++ b/tools/clang/lib/Serialization/ASTReader.cpp
@@ -5836,6 +5836,16 @@ QualType ASTReader::GetType(TypeID ID) {
     case PREDEF_TYPE_IMAGE1D_BUFF_ID: T = Context.OCLImage1dBufferTy; break;
     case PREDEF_TYPE_IMAGE2D_ID:    T = Context.OCLImage2dTy;       break;
     case PREDEF_TYPE_IMAGE2D_ARR_ID: T = Context.OCLImage2dArrayTy; break;
+    case PREDEF_TYPE_IMAGE2D_DEPTH_ID:    T = Context.OCLImage2dDepthTy; break;
+    case PREDEF_TYPE_IMAGE2D_ARR_DEPTH_ID: T = Context.OCLImage2dArrayDepthTy; break;
+    case PREDEF_TYPE_IMAGE2D_MSAA_ID:    T = Context.OCLImage2dMSAATy; break;
+    case PREDEF_TYPE_IMAGE2D_ARR_MSAA_ID: T = Context.OCLImage2dArrayMSAATy; break;
+    case PREDEF_TYPE_IMAGE2D_MSAA_DEPTH_ID:    T = Context.OCLImage2dMSAADepthTy; break;
+    case PREDEF_TYPE_IMAGE2D_ARR_MSAA_DEPTH_ID: T = Context.OCLImage2dArrayMSAADepthTy; break;
+    case PREDEF_TYPE_IMAGECUBE_ID:  T = Context.OCLImageCubeTy;      break;
+    case PREDEF_TYPE_IMAGECUBE_ARR_ID:  T = Context.OCLImageCubeArrayTy; break;
+    case PREDEF_TYPE_IMAGECUBE_DEPTH_ID:  T = Context.OCLImageCubeDepthTy; break;
+    case PREDEF_TYPE_IMAGECUBE_ARR_DEPTH_ID:  T = Context.OCLImageCubeArrayDepthTy; break;
     case PREDEF_TYPE_IMAGE3D_ID:    T = Context.OCLImage3dTy;       break;
     case PREDEF_TYPE_SAMPLER_ID:    T = Context.OCLSamplerTy;       break;
     case PREDEF_TYPE_EVENT_ID:      T = Context.OCLEventTy;         break;
diff --git a/tools/clang/tools/libclang/CIndex.cpp b/tools/clang/tools/libclang/CIndex.cpp
index fc8703a..cb4d0bc 100644
--- a/tools/clang/tools/libclang/CIndex.cpp
+++ b/tools/clang/tools/libclang/CIndex.cpp
@@ -1418,6 +1418,16 @@ bool CursorVisitor::VisitBuiltinTypeLoc(BuiltinTypeLoc TL) {
   case BuiltinType::OCLImage1dBuffer:
   case BuiltinType::OCLImage2d:
   case BuiltinType::OCLImage2dArray:
+  case BuiltinType::OCLImage2dDepth:
+  case BuiltinType::OCLImage2dArrayDepth:
+  case BuiltinType::OCLImage2dMSAA:
+  case BuiltinType::OCLImage2dArrayMSAA:
+  case BuiltinType::OCLImage2dMSAADepth:
+  case BuiltinType::OCLImage2dArrayMSAADepth:
+  case BuiltinType::OCLImageCube:
+  case BuiltinType::OCLImageCubeArray:
+  case BuiltinType::OCLImageCubeDepth:
+  case BuiltinType::OCLImageCubeArrayDepth:
   case BuiltinType::OCLImage3d:
   case BuiltinType::OCLSampler:
   case BuiltinType::OCLEvent:
diff --git a/tools/clang/tools/libclang/CXType.cpp b/tools/clang/tools/libclang/CXType.cpp
index fe45899..0f97dc0 100644
--- a/tools/clang/tools/libclang/CXType.cpp
+++ b/tools/clang/tools/libclang/CXType.cpp
@@ -526,6 +526,8 @@ CXCallingConv clang_getFunctionTypeCallingConv(CXType X) {
       TCALLINGCONV(AAPCS_VFP);
       TCALLINGCONV(PnaclCall);
       TCALLINGCONV(IntelOclBicc);
+      TCALLINGCONV(SpirFunction);
+      TCALLINGCONV(SpirKernel);
     }
 #undef TCALLINGCONV
   }
