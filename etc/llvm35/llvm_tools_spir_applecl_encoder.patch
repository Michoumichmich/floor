diff --git llvm351_rel/tools/spir-encoder/SpirBitcodeWriter.cpp llvm/tools/spir-encoder/SpirBitcodeWriter.cpp
--- llvm351_rel/tools/spir-encoder/SpirBitcodeWriter.cpp
+++ llvm/tools/spir-encoder/SpirBitcodeWriter.cpp
@@ -190,11 +190,14 @@
     for (unsigned i = 0, e = A.getNumSlots(); i != e; ++i) {
       unsigned Slot = A.getSlotIndex(i);
 
+      // drop readnone, readonly, nocapture attrs
+      const auto raw_attrs = A.Raw(Slot) & ~(uint64_t(1 << 9) | uint64_t(1 << 10) | uint64_t(1 << 21));
+
       // Taken from LLVM 3.2 Attributes::encodeLLVMAttributesForBitcode
-      uint64_t EncodedAttrs = A.Raw(Slot) & 0xffff;
+      uint64_t EncodedAttrs = raw_attrs & 0xffff;
       if (A.hasAttribute(Slot, Attribute::Alignment))
         EncodedAttrs |= A.getAttribute(Slot, Attribute::Alignment).getAlignment() << 16;
-      EncodedAttrs |= (A.Raw(Slot) & (0xffffULL << 21)) << 11;
+      EncodedAttrs |= (raw_attrs & (0xffffULL << 21)) << 11;
 
       Record.push_back(Slot);
       Record.push_back(EncodedAttrs);
diff -rduBE llvm351_rel/tools/LLVMBuild.txt llvm/tools/LLVMBuild.txt
--- llvm351_rel/tools/LLVMBuild.txt
+++ llvm/tools/LLVMBuild.txt
@@ -16,7 +16,7 @@
 ;===------------------------------------------------------------------------===;
 
 [common]
-subdirectories = bugpoint llc lli llvm-ar llvm-as llvm-bcanalyzer llvm-cov llvm-diff llvm-dis llvm-dwarfdump llvm-extract llvm-jitlistener llvm-link llvm-lto llvm-mc llvm-nm llvm-objdump llvm-profdata llvm-rtdyld llvm-size macho-dump opt llvm-mcmarkup
+subdirectories = bugpoint llc lli llvm-ar llvm-as llvm-bcanalyzer llvm-cov llvm-diff llvm-dis llvm-dwarfdump llvm-extract llvm-jitlistener llvm-link llvm-lto llvm-mc llvm-nm llvm-objdump llvm-profdata llvm-rtdyld llvm-size macho-dump opt llvm-mcmarkup spir-encoder spir-verifier applecl-encoder
 
 [component_0]
 type = Group
diff -rduBE llvm351_rel/tools/Makefile llvm/tools/Makefile
--- llvm351_rel/tools/Makefile
+++ llvm/tools/Makefile
@@ -31,7 +31,7 @@
                  lli llvm-extract llvm-mc bugpoint llvm-bcanalyzer llvm-diff \
                  macho-dump llvm-objdump llvm-readobj llvm-rtdyld \
                  llvm-dwarfdump llvm-cov llvm-size llvm-stress llvm-mcmarkup \
-                 llvm-profdata llvm-symbolizer obj2yaml yaml2obj llvm-c-test
+                 llvm-profdata llvm-symbolizer obj2yaml yaml2obj llvm-c-test spir-encoder spir-verifier applecl-encoder
 
 # If Intel JIT Events support is configured, build an extra tool to test it.
 ifeq ($(USE_INTEL_JITEVENTS), 1)
diff -rduBE llvm351_rel/tools/spir-encoder/SpirBitcodeWriter.cpp llvm/tools/spir-encoder/SpirBitcodeWriter.cpp
--- llvm351_rel/tools/spir-encoder/SpirBitcodeWriter.cpp
+++ llvm/tools/spir-encoder/SpirBitcodeWriter.cpp
@@ -23,6 +23,7 @@
 #include "llvm/IR/DerivedTypes.h"
 #include "llvm/IR/InlineAsm.h"
 #include "llvm/IR/Instructions.h"
+#include "llvm/IR/IntrinsicInst.h"
 #include "llvm/IR/Module.h"
 #include "llvm/IR/Operator.h"
 #include "llvm/IR/ValueSymbolTable.h"
@@ -47,11 +48,11 @@
   "v64:64:64-v96:128:128-v128:128:128-v192:256:256-v256:256:256-" \
   "v512:512:512-v1024:1024:1024"
 
-static cl::opt<bool>
+/*static cl::opt<bool>
 EnablePreserveUseListOrdering("enable-bc-uselist-preserve",
                               cl::desc("Turn on experimental support for "
                                        "use-list order preservation."),
-                              cl::init(false), cl::Hidden);
+                              cl::init(false), cl::Hidden);*/
 
 /// These are manifest constants used by the bitcode writer. They do not need to
 /// be kept in sync with the reader, but need to be consistent within this file.
@@ -1847,8 +1848,8 @@
   WriteValueSymbolTable(M->getValueSymbolTable(), VE, Stream);
 
   // Emit use-lists.
-  if (EnablePreserveUseListOrdering)
-    WriteModuleUseLists(M, VE, Stream);
+  /*if (EnablePreserveUseListOrdering)
+    WriteModuleUseLists(M, VE, Stream);*/
 
   // Emit function bodies.
   for (Module::const_iterator F = M->begin(), E = M->end(); F != E; ++F)
diff -rduBE llvm351_rel/tools/spir-encoder/SpirEncoder.cpp llvm/tools/spir-encoder/SpirEncoder.cpp
--- llvm351_rel/tools/spir-encoder/SpirEncoder.cpp
+++ llvm/tools/spir-encoder/SpirEncoder.cpp
@@ -8,7 +8,7 @@
 //===---------------------------------------------------------------------===//
 
 
-#include "encoder/SpirBitcodeWriter.h"
+#include "SpirBitcodeWriter.h"
 
 #include <llvm/IR/Module.h>
 #include <llvm/IR/LLVMContext.h>
diff -rduBE llvm351_rel/tools/spir-verifier/SpirIterators.cpp llvm/tools/spir-verifier/SpirIterators.cpp
--- llvm351_rel/tools/spir-verifier/SpirIterators.cpp
+++ llvm/tools/spir-verifier/SpirIterators.cpp
@@ -19,6 +19,7 @@
   #include "llvm/Instructions.h"
   #include "llvm/Value.h"
 #else
+  #include "llvm/IR/Constants.h"
   #include "llvm/IR/Module.h"
   #include "llvm/IR/Function.h"
   #include "llvm/IR/Instruction.h"
@@ -594,8 +595,11 @@
       ErrCreator->addError(ERR_KERNEL_ARG_PTRPTR, Ty, F->getName());
     }
 
-    // kernel arguments shall not be pointers to a private addrspace
-    if (Ty->isPointerTy() && Ty->getPointerAddressSpace() == PRIVATE_ADDR_SPACE) {
+    // kernel arguments shall not be pointers to a private addrspace,
+    // except for aggregate types which are always pointer types
+    if (Ty->isPointerTy() &&
+        !Ty->getPointerElementType()->isStructTy() &&
+        Ty->getPointerAddressSpace() == PRIVATE_ADDR_SPACE) {
       ErrCreator->addError(ERR_KERNEL_ARG_AS0, Ty, F->getName());
     }
   }
@@ -641,6 +645,7 @@
 }
 
 void VerifyTripleAndDataLayout::execute(const Module *M) {
+#if 0 // assume this is correct
   StringRef Triple(M->getTargetTriple());
   StringRef DL(M->getDataLayout());
 
@@ -668,6 +673,7 @@
     std::string S = Triple.str() + "\n" + DL.str();
     ErrCreator->addError(ERR_MISMATCH_TRIPLE_AND_DATA_LAYOUT, S);
   }
+#endif
 }
 
 void VerifyMetadataArgAddrSpace::execute(const llvm::MDNode *Node) {
diff -rduBE llvm351_rel/tools/spir-verifier/SpirVerifier.cpp llvm/tools/spir-verifier/SpirVerifier.cpp
--- llvm351_rel/tools/spir-verifier/SpirVerifier.cpp
+++ llvm/tools/spir-verifier/SpirVerifier.cpp
@@ -7,20 +7,20 @@
 //
 //===---------------------------------------------------------------------===//
 
-#include "validation/LLVMVersion.h"
-#include "validation/SpirValidation.h"
+#include "LLVMVersion.h"
+#include "SpirValidation.h"
 
 #if LLVM_VERSION==3200
   #include "llvm/LLVMContext.h"
 #else
   #include "llvm/IR/LLVMContext.h"
 #endif
-#include "llvm/ADT/OwningPtr.h"
 #include "llvm/Bitcode/ReaderWriter.h"
 #include "llvm/Support/CommandLine.h"
 #include "llvm/Support/MemoryBuffer.h"
-#include "llvm/Support/system_error.h"
 #include "llvm/Support/raw_ostream.h"
+#include <system_error>
+#include <memory>
 
 using namespace llvm;
 using namespace SPIR;
@@ -43,27 +43,25 @@
 
   StringRef Path = InputFilename;
   LLVMContext Ctx;
-  OwningPtr<MemoryBuffer> result;
 
   // Parse the bitcode file into a module.
-  error_code ErrCode = MemoryBuffer::getFile(Path, result);
+  auto result = MemoryBuffer::getFile(Path);
 
-  if (!result.get()) {
-    errs() << "Buffer Creation Error. " << ErrCode.message() << "\n";
+  if (!result) {
+    errs() << "Buffer Creation Error. " << result.getError().message() << "\n";
     return 1;
   }
 
-  std::string ErrMsg;
-  Module *M = ParseBitcodeFile(result.get(), Ctx, &ErrMsg);
+  auto M = parseBitcodeFile(result.get().get(), Ctx);
   if (!M) {
     outs() << "According to this SPIR Verifier, " << Path << " is an invalid SPIR module.\n";
-    errs() << "Bitcode parsing error. " << ErrMsg << "\n";
+    errs() << "Bitcode parsing error. " << M.getError().message() << "\n";
     return 1;
   }
 
   // Run the verification pass, and report errors if necessary.
   SpirValidation Validation;
-  Validation.runOnModule(*M);
+  Validation.runOnModule(*M.get());
   const ErrorPrinter *EP = Validation.getErrorPrinter();
   if (EP->hasErrors()) {
     outs() << "According to this SPIR Verifier, " << Path << " is an invalid SPIR module.\n";
