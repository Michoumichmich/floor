diff -rduBE llvm_rel35/tools/clang/include/clang/Basic/Attr.td llvm/tools/clang/include/clang/Basic/Attr.td
--- llvm_rel35/tools/clang/include/clang/Basic/Attr.td
+++ llvm/tools/clang/include/clang/Basic/Attr.td
@@ -574,7 +574,7 @@
 }
 
 def OpenCLKernel : InheritableAttr {
-  let Spellings = [Keyword<"__kernel">, Keyword<"kernel">];
+  let Spellings = [Keyword<"__kernel">];
   let Subjects = SubjectList<[Function], ErrorDiag>;
   let Documentation = [Undocumented];
 }
@@ -596,22 +596,22 @@
 }
 
 def OpenCLPrivateAddressSpace : TypeAttr {
-  let Spellings = [Keyword<"__private">, Keyword<"private">];
+  let Spellings = [Keyword<"__private">];
   let Documentation = [Undocumented];
 }
 
 def OpenCLGlobalAddressSpace : TypeAttr {
-  let Spellings = [Keyword<"__global">, Keyword<"global">];
+  let Spellings = [Keyword<"__global">];
   let Documentation = [Undocumented];
 }
 
 def OpenCLLocalAddressSpace : TypeAttr {
-  let Spellings = [Keyword<"__local">, Keyword<"local">];
+  let Spellings = [Keyword<"__local">];
   let Documentation = [Undocumented];
 }
 
 def OpenCLConstantAddressSpace : TypeAttr {
-  let Spellings = [Keyword<"__constant">, Keyword<"constant">];
+  let Spellings = [Keyword<"__constant">];
   let Documentation = [Undocumented];
 }
 
diff -rduBE llvm_rel35/tools/clang/include/clang/Basic/TokenKinds.def llvm/tools/clang/include/clang/Basic/TokenKinds.def
--- llvm_rel35/tools/clang/include/clang/Basic/TokenKinds.def
+++ llvm/tools/clang/include/clang/Basic/TokenKinds.def
@@ -461,27 +461,27 @@
 KEYWORD(__unaligned                 , KEYMS)
 
 // OpenCL address space qualifiers
-KEYWORD(__global                    , KEYOPENCL)
-KEYWORD(__local                     , KEYOPENCL)
-KEYWORD(__constant                  , KEYOPENCL)
-KEYWORD(__private                   , KEYOPENCL)
-ALIAS("global", __global            , KEYOPENCL)
-ALIAS("local", __local              , KEYOPENCL)
-ALIAS("constant", __constant        , KEYOPENCL)
-ALIAS("private", __private          , KEYOPENCL)
+KEYWORD(__global                    , KEYCXX|KEYOPENCL)
+KEYWORD(__local                     , KEYCXX|KEYOPENCL)
+KEYWORD(__constant                  , KEYCXX|KEYOPENCL)
+KEYWORD(__private                   , KEYCXX|KEYOPENCL)
+//ALIAS("global", __global            , KEYOPENCL)
+//ALIAS("local", __local              , KEYOPENCL)
+//ALIAS("constant", __constant        , KEYOPENCL)
+//ALIAS("private", __private          , KEYOPENCL)
 // OpenCL function qualifiers
-KEYWORD(__kernel                    , KEYOPENCL)
-ALIAS("kernel", __kernel            , KEYOPENCL)
+KEYWORD(__kernel                    , KEYCXX|KEYOPENCL)
+//ALIAS("kernel", __kernel            , KEYOPENCL)
 // OpenCL access qualifiers
-KEYWORD(__read_only                 , KEYOPENCL)
-KEYWORD(__write_only                , KEYOPENCL)
-KEYWORD(__read_write                , KEYOPENCL)
+KEYWORD(__read_only                 , KEYCXX|KEYOPENCL)
+KEYWORD(__write_only                , KEYCXX|KEYOPENCL)
+KEYWORD(__read_write                , KEYCXX|KEYOPENCL)
 ALIAS("read_only", __read_only      , KEYOPENCL)
 ALIAS("write_only", __write_only    , KEYOPENCL)
 ALIAS("read_write", __read_write    , KEYOPENCL)
 // OpenCL builtins
-KEYWORD(__builtin_astype            , KEYOPENCL)
-KEYWORD(vec_step                    , KEYOPENCL|KEYALTIVEC)
+KEYWORD(__builtin_astype            , KEYCXX|KEYOPENCL)
+KEYWORD(vec_step                    , KEYCXX|KEYOPENCL|KEYALTIVEC)
 
 // Borland Extensions.
 KEYWORD(__pascal                    , KEYALL)
diff -rduBE llvm_rel35/tools/clang/include/clang/Frontend/LangStandards.def llvm/tools/clang/include/clang/Frontend/LangStandards.def
--- llvm_rel35/tools/clang/include/clang/Frontend/LangStandards.def
+++ llvm/tools/clang/include/clang/Frontend/LangStandards.def
@@ -134,17 +134,21 @@
 // OpenCL
 LANGSTANDARD(opencl, "cl",
              "OpenCL 1.0",
-             LineComment | C99 | Digraphs | HexFloat)
+             LineComment | CPlusPlus | CPlusPlus11 | CPlusPlus1y | CPlusPlus1z |
+             Digraphs | GNUMode)
 LANGSTANDARD(opencl11, "CL1.1",
              "OpenCL 1.1",
-             LineComment | C99 | Digraphs | HexFloat)
+             LineComment | CPlusPlus | CPlusPlus11 | CPlusPlus1y | CPlusPlus1z |
+             Digraphs | GNUMode)
 LANGSTANDARD(opencl12, "CL1.2",
              "OpenCL 1.2",
-             LineComment | C99 | Digraphs | HexFloat)
+             LineComment | CPlusPlus | CPlusPlus11 | CPlusPlus1y | CPlusPlus1z |
+             Digraphs | GNUMode)
 
 // CUDA
 LANGSTANDARD(cuda, "cuda",
              "NVIDIA CUDA(tm)",
-             LineComment | CPlusPlus | Digraphs)
+             LineComment | CPlusPlus | CPlusPlus11 | CPlusPlus1y | CPlusPlus1z |
+             Digraphs | GNUMode)
 
 #undef LANGSTANDARD
diff -rduBE llvm_rel35/tools/clang/lib/Frontend/CompilerInvocation.cpp llvm/tools/clang/lib/Frontend/CompilerInvocation.cpp
--- llvm_rel35/tools/clang/lib/Frontend/CompilerInvocation.cpp
+++ llvm/tools/clang/lib/Frontend/CompilerInvocation.cpp
@@ -1276,7 +1276,7 @@
             << A->getAsString(Args) << "C++/ObjC++";
         break;
       case IK_OpenCL:
-        if (!Std.isC99())
+        if (!Std.isC99() && !Std.isCPlusPlus())
           Diags.Report(diag::err_drv_argument_not_allowed_with)
             << A->getAsString(Args) << "OpenCL";
         break;
diff -rduBE llvm_rel35/tools/clang/lib/Lex/PPDirectives.cpp llvm/tools/clang/lib/Lex/PPDirectives.cpp
--- llvm_rel35/tools/clang/lib/Lex/PPDirectives.cpp
+++ llvm/tools/clang/lib/Lex/PPDirectives.cpp
@@ -1807,7 +1807,7 @@
              diag::ext_variadic_macro);
 
       // OpenCL v1.2 s6.9.e: variadic macros are not supported.
-      if (LangOpts.OpenCL) {
+      if (LangOpts.OpenCL && !LangOpts.CPlusPlus) {
         Diag(Tok, diag::err_pp_opencl_variadic_macros);
         return true;
       }
diff -rduBE llvm_rel35/tools/clang/lib/Sema/SemaExpr.cpp llvm/tools/clang/lib/Sema/SemaExpr.cpp
--- llvm_rel35/tools/clang/lib/Sema/SemaExpr.cpp
+++ llvm/tools/clang/lib/Sema/SemaExpr.cpp
@@ -444,7 +444,7 @@
   if (Ty->isFunctionType()) {
     // If we are here, we are not calling a function but taking
     // its address (which is not allowed in OpenCL v1.0 s6.8.a.3).
-    if (getLangOpts().OpenCL) {
+    if (getLangOpts().OpenCL && !LangOpts.CPlusPlus) {
       Diag(E->getExprLoc(), diag::err_opencl_taking_function_address);
       return ExprError();
     }
@@ -8953,7 +8953,7 @@
   Expr *op = OrigOp.get()->IgnoreParens();
 
   // OpenCL v1.0 s6.8.a.3: Pointers to functions are not allowed.
-  if (LangOpts.OpenCL && op->getType()->isFunctionType()) {
+  if (LangOpts.OpenCL && !LangOpts.CPlusPlus && op->getType()->isFunctionType()) {
     Diag(op->getExprLoc(), diag::err_opencl_taking_function_address);
     return QualType();
   }
